  Sun Nov 21 2021 15:13                                                                                                Page 1


                                             ***************************************
                                             **      WDC 65C816 Macro Assembler   **
                                             **                                   **
                                             **     Version 3.49.1- Feb  6 2006    **
                                             ***************************************

     1                        
     2                        ;__ROMBIOS816_____________________________________________________________________________________
                    __
     3                        ;
     4                        ;	ROM BIOS FOR THE RBC 65c816 SBC - NATIVE MODE
     5                        ;
     6                        ;	WRITTEN BY: DAN WERNER -- 10/7/2017
     7                        ;   Modified 3/21/2021 for 65816HC
     8                        ;
     9                        ;_________________________________________________________________________________________________
                    _
    10                        ;
    11                        ; DATA CONSTANTS
    12                        ;_________________________________________________________________________________________________
                    _
    13                        
    14                        		CHIP	65816		; SET CHIP
    15                        		LONGA	OFF		; ASSUME EMULATION MODE
    16                        		LONGI	OFF		;
    17                        		PW	128
    18                        		PL 	60
    19                        		INCLIST ON
    20                        
    21                        ;_________________________________________________________________________________________________
                    _
    22                        ; $8000-$8007 UART 16C550
    23                        ;_________________________________________________________________________________________________
                    _
    24             0000FE00   UART0:			.EQU	$FE00		;   DATA IN/OUT
    25             0000FE01   UART1:			.EQU	$FE01		;   CHECK RX
    26             0000FE02   UART2:			.EQU	$FE02		;   INTERRUPTS
    27             0000FE03   UART3:			.EQU	$FE03		;   LINE CONTROL
    28             0000FE04   UART4:			.EQU	$FE04		;   MODEM CONTROL
    29             0000FE05   UART5:			.EQU	$FE05		;   LINE STATUS
    30             0000FE06   UART6:			.EQU	$FE06		;   MODEM STATUS
    31                        
    32             0000FE08   RTC:			.EQU	$FE08		;   RTC REG.
    33                        
    34             0000FE0A   DATAP:			.EQU 	$FE0A 		; 	VDP Data port
    35             0000FE0B   CMDP:			.EQU 	$FE0B 		; 	VDP Command port
    36                        
    37             0000FE10   via1regb		.equ	$FE10		; Register
    38             0000FE11   via1rega		.equ	$FE11		; Register
    39             0000FE12   via1ddrb		.equ	$FE12		; Register
    40             0000FE13   via1ddra		.equ	$FE13		; Register
    41             0000FE14   via1t1cl		.equ	$FE14		; Register
    42             0000FE15   via1t1ch		.equ	$FE15		; Register
    43             0000FE16   via1t1ll		.equ	$FE16		; Register
    44             0000FE17   via1t1lh		.equ	$FE17		; Register
    45             0000FE18   via1t2cl		.equ	$FE18		; Register
    46             0000FE19   via1t2ch		.equ	$FE19		; Register
  Sun Nov 21 2021 15:13                                                                                                Page 2


    47             0000FE1A   via1sr  		.equ	$FE1A		; Register
    48             0000FE1B   via1acr 		.equ	$FE1B		; Register
    49             0000FE1C   via1pcr 		.equ	$FE1C		; Register
    50             0000FE1D   via1ifr 		.equ	$FE1D		; Register
    51             0000FE1E   via1ier 		.equ	$FE1E		; Register
    52             0000FE1F   via1ora 		.equ	$FE1F		; Register
    53                        
    54                        
    55                        
    56             0000FE20   via2regb		.equ	$FE20		; Register
    57             0000FE21   via2rega		.equ	$FE21		; Register
    58             0000FE22   via2ddrb		.equ	$FE22		; Register
    59             0000FE23   via2ddra		.equ	$FE23		; Register
    60             0000FE24   via2t1cl		.equ	$FE24		; Register
    61             0000FE25   via2t1ch		.equ	$FE25		; Register
    62             0000FE26   via2t1ll		.equ	$FE26		; Register
    63             0000FE27   via2t1lh		.equ	$FE27		; Register
    64             0000FE28   via2t2cl		.equ	$FE28		; Register
    65             0000FE29   via2t2ch		.equ	$FE29		; Register
    66             0000FE2A   via2sr  		.equ	$FE2A		; Register
    67             0000FE2B   via2acr 		.equ	$FE2B		; Register
    68             0000FE2C   via2pcr 		.equ	$FE2C		; Register
    69             0000FE2D   via2ifr 		.equ	$FE2D		; Register
    70             0000FE2E   via2ier 		.equ	$FE2E		; Register
    71             0000FE2F   via2ora 		.equ	$FE2F		; Register
    72                        
    73                        
    74             00007FFF   STACK:			.EQU	$7FFF		;   POINTER TO TOP OF STACK
    75                        
    76                        ;
    77             00000200   KEYBUFF			.EQU	$0200 		; 256 BYTE KEYBOARD BUFFER
    78                        ; NATIVE VECTORS
    79             00000300   ICOPVECTOR 		.EQU	$0300       ;COP handler indirect vector...
    80             00000302   IBRKVECTOR 		.EQU	$0302       ;BRK handler indirect vector...
    81             00000304   IABTVECTOR 		.EQU	$0304       ;ABT handler indirect vector...
    82             00000306   INMIVECTOR 		.EQU	$0306       ;NMI handler indirect vector...
    83             00000308   IIRQVECTOR 		.EQU	$0308       ;IRQ handler indirect vector...
    84                        ; 6502 Emulation Vectors
    85             0000030A   IECOPVECTOR 	.EQU	$030A       ;ECOP handler indirect vector...
    86             0000030C   IEABTVECTOR 	.EQU	$030C       ;EABT handler indirect vector...
    87             0000030E   IENMIVECTOR 	.EQU	$030E       ;ENMI handler indirect vector...
    88             00000310   IEINTVECTOR 	.EQU	$0310       ;EINT handler indirect vector...
    89                        
    90                        ;;; These are as yet unused
    91                        ;------------------------------------------------------------------------------
    92             00000312   IECDCF			.equ	$0312		; Serial output: deferred char flag
    93             00000313   IECDC			.equ    $0313   	; Serial deferred character
    94             00000314   IECBCI			.equ 	$0314		; Serial bit count/EOI flag
    95             00000315   IECBTC			.equ 	$0315       ; Countdown, bit count
    96             00000316   IECCYC			.equ    $0316		; Cycle count
    97             00000317   IECSTW			.equ 	$0317		; Status word
    98             00000318   IECFNLN			.equ 	$0318		; File Name Length
    99             00000319   IECSECAD		.equ 	$0319		; IEC Secondary Address
   100             0000031A   IECBUFFL		.equ 	$031A		; low byte IEC buffer Pointer
   101             0000031B   IECBUFFH		.equ 	$031B		; High byte IEC buffer Pointer
   102             0000031C   IECDEVN			.equ 	$031C		; IEC Device Number
   103             0000031D   IECSTRTL		.equ 	$031D		; low byte IEC Start Address Pointer
  Sun Nov 21 2021 15:13                                                                                                Page 3


   104             0000031E   IECSTRTH		.equ 	$031E		; High byte IEC Start Address Pointer
   105             0000031F   IECMSGM			.equ 	$031F		; message mode flag,
   106                        					; $C0 = both control and kernal messages,
   107                        					; $80 = control messages only,
   108                        					; $40 = kernal messages only,
   109                        					; $00 = neither control or kernal messages
   110             00000320   IECFNPL			.equ 	$0320		; File Name Pointer Low,
   111             00000321   IECFNPH			.equ 	$0321		; File Name Pointer High,
   112             00000322   LOADBUFL		.equ 	$0322		; low byte IEC buffer Pointer
   113             00000323   LOADBUFH		.equ 	$0323		; High byte IEC buffer Pointer
   114             00000324   LOADBANK		.equ 	$0324		; BANK buffer Pointer
   115             00000325   IECOPENF        .EQU    $0325       ; OPEN FILE COUNT
   116             00000326   IECLFN          .EQU    $0326       ; IEC LOGICAL FILE NUMBER
   117             00000327   IECIDN	        .EQU    $0327		; input device number
   118             00000328   IECODN	        .EQU    $0328		; output device number
   119                        ;------------------------------------------------------------------------------
   120                        
   121                        ; VIDEO/KEYBOARD PARAMETER AREA
   122             00000330   CSRX           	.EQU $0330 			; CURRENT X POSITION
   123             00000331   CSRY           	.EQU $0331 			; CURRENT Y POSITION
   124             00000332   LEDS        	.EQU $0332
   125             00000333   KeyLock     	.EQU $0333
   126             00000334   ScannedKey  	.EQU $0334
   127             00000335   ScrollCount 	.EQU $0335			;
   128             00000336   TEMP           	.EQU $0336 			; TEMP AREA
   129                        
   130             00000341   ConsoleDevice	.EQU $0341			; Current Console Device
   131                        									; $00 Serial, $01 On-Board 9918/
                    KB
   132             00000342   CSRCHAR		.EQU $0342			; Character under the Cursor
   133             00000343   VIDEOWIDTH	.EQU $0343			; SCREEN WIDTH -- 32 or 40 (80 in the future)
   134             00000350   ScrollBuffer 	.equ $0350			; at least 80 bytes?
   135             000003B0   PTRLFT          .EQU $03B0			; .. to $03B9 logical file table
   136             000003BA   PTRDNT          .EQU $03BA			; .. to $03C3 device number table
   137             000003C4   PTRSAT          .EQU $03C4			; .. to $03CD secondary address table
   138             000003D0   LINEFLGS        .EQU $03D0          		; 24 BYTES OF LINE POINTERS (3D0 - 3E9 , one ext
                    ra for scrolling)
   139                        
   140                        
   141             00000001   TRUE		.EQU    1
   142             00000000   FALSE		.EQU 	0
   143                        
   144                        
   145                        	INCLUDE 'MACROS.ASM'
     1                        ;_________________________________________________________________________________________________
                    __
     2                        ;
     3                        ;	USEFUL 65186 MACROS
     4                        ;_________________________________________________________________________________________________
                    _
     5                        
     6                        StoreContext    .macro                ; Store Complete Context at the beginning of a Sub
     7                                PHX
     8                                phy
     9                                pha
    10                                php
    11                                .endm
  Sun Nov 21 2021 15:13                                                                                                Page 4


    12                        
    13                        RestoreContext  .macro                ; Restore Complete Context at the end of a Sub
    14                                plp
    15                                pla 
    16                                ply
    17                                plx
    18                                .endm
    19                        
    20                        Index16         .macro                ; Set 16bit Index Registers
    21                        		REP #$10 		; 16 bit Index registers 
    22                        		LONGI ON
    23                                .endm
    24                        Index8          .macro                ; Set 8bit Index Registers
    25                        		SEP #$10 		; 8 bit Index registers 
    26                        		LONGI OFF
    27                                .endm
    28                        
    29                        Accumulator16   .macro                ; Set 16bit Index Registers
    30                        		REP #$20 		; 16 bit Index registers 
    31                        		LONGA ON
    32                                .endm
    33                        
    34                        Accumulator8    .macro                ; Set 8bit Index Registers
    35                        		SEP #$20 		; 8 bit Index registers 
    36                        		LONGA OFF
    37                                .endm
    38                        
    39                        AccumulatorIndex16  .macro            ; Set 16bit Index Registers
    40                        		REP #$30 		; 16 bit Index registers 
    41                        		LONGA ON
    42                                LONGI ON
    43                                .endm
    44                        
    45                        AccumulatorIndex8   .macro            ; Set 8bit Index Registers
    46                        		SEP #$30 		; 8 bit Index registers 
    47                        		LONGA OFF
    48                                LONGI OFF
    49                                .endm
    50                        
    51                        
    52                        
    53                        cr      .macro                ; Restore Complete Context at the end of a Sub
    54                                SEP #$20 		; 8 bit accum 
    55                        		LONGA OFF 
    56                                .endm
    57                        
    58                        ;
   146                        
   147                        ; CHOOSE ONE CONSOLE IO DEVICE
   148                        BIOS	SECTION 	OFFSET $E000
   149                        
   150                        ;__COLD_START___________________________________________________
   151                        ;
   152                        ; PERFORM SYSTEM COLD INIT
   153                        ;
   154                        ;_______________________________________________________________
   155                        COLD_START:
  Sun Nov 21 2021 15:13                                                                                                Page 5


   156 00:E000: D8                  		CLD			; VERIFY DECIMAL MODE IS OFF
   157                        
   158 00:E001: 18           		CLC 			;
   159 00:E002: FB           		XCE 			; SET NATIVE MODE
   160                        		AccumulatorIndex16
+  160 00:E003: C2 30        		REP #$30 		; 16 bit Index registers 
+  160                        		LONGA ON
+  160                                LONGI ON
   161 00:E005: A9 FF 7F     		LDA #STACK 		; get the stack address
   162 00:E008: 1B           		TCS 			; and set the stack to it
   163                        
   164 00:E009: 20 57 E0             	JSR CONSOLE_INIT	; Init UART
   165                        		AccumulatorIndex8
+  165 00:E00C: E2 30        		SEP #$30 		; 8 bit Index registers 
+  165                        		LONGA OFF
+  165                                LONGI OFF
   166 00:E00E: 20 21 F3     		JSR INITIEC		;	init IEC port
   167                        					; Announce that system is alive
   168                        
   169 00:E011: 20 56 E0     		JSR BATEST		; Perform Basic Assurance Test
   170                        
   171                        		Accumulator16
+  171 00:E014: C2 20        		REP #$20 		; 16 bit Index registers 
+  171                        		LONGA ON
   172 00:E016: A9 55 E0             	LDA #INTRETURN 		;
   173 00:E019: 8D 00 03             	STA ICOPVECTOR
   174 00:E01C: 8D 02 03     		STA IBRKVECTOR
   175 00:E01F: 8D 04 03     		STA IABTVECTOR
   176 00:E022: 8D 06 03     		STA INMIVECTOR
   177 00:E025: 8D 08 03     		STA IIRQVECTOR
   178 00:E028: 8D 0A 03     		STA IECOPVECTOR
   179 00:E02B: 8D 0C 03     		STA IEABTVECTOR
   180 00:E02E: 8D 0E 03     		STA IENMIVECTOR
   181 00:E031: 8D 10 03     		STA IEINTVECTOR
   182                        
   183                        		AccumulatorIndex8
+  183 00:E034: E2 30        		SEP #$30 		; 8 bit Index registers 
+  183                        		LONGA OFF
+  183                                LONGI OFF
   184 00:E036: 5C 00 10 FF          	JML  $FF1000		; START BASIC
   185                        
   186                        
   187 00:E03A: 6C 00 03     RCOPVECTOR:	JMP (ICOPVECTOR)
   188 00:E03D: 6C 02 03     RBRKVECTOR:	JMP (IBRKVECTOR)
   189 00:E040: 6C 04 03     RABTVECTOR:	JMP (IABTVECTOR)
   190 00:E043: 6C 06 03     RNMIVECTOR:	JMP (INMIVECTOR)
   191 00:E046: 6C 08 03     RIRQVECTOR:	JMP (IIRQVECTOR)
   192 00:E049: 6C 0A 03     RECOPVECTOR:	JMP (IECOPVECTOR)
   193 00:E04C: 6C 0C 03     REABTVECTOR:	JMP (IEABTVECTOR)
   194 00:E04F: 6C 0E 03     RENMIVECTOR:	JMP (IENMIVECTOR)
   195 00:E052: 6C 10 03     REINTVECTOR: 	JMP (IEINTVECTOR)
   196                        
   197                        
   198                        ;__INTRETURN____________________________________________________
   199                        ;
   200                        ; Handle Interrupts
   201                        ;
  Sun Nov 21 2021 15:13                                                                                                Page 6


   202                        ;_______________________________________________________________
   203                        ;
   204                        INTRETURN:
   205 00:E055: 40           		RTI 			;
   206                        
   207                        ;__BATEST_______________________________________________________
   208                        ;
   209                        ; Perform Basic Hardware Assurance Test
   210                        ;
   211                        ;_______________________________________________________________
   212                        ;
   213                        BATEST:
   214 00:E056: 60           		RTS
   215                        
   216                        
   217                        
   218                        ;__CONSOLE_INIT_________________________________________________
   219                        ;
   220                        ; Initialize Attached Console Devices
   221                        ;
   222                        ;_______________________________________________________________
   223                        ;
   224                        CONSOLE_INIT:
   225 00:E057: 08           		PHP
   226                        		AccumulatorIndex8
+  226 00:E058: E2 30        		SEP #$30 		; 8 bit Index registers 
+  226                        		LONGA OFF
+  226                                LONGI OFF
   227                        
   228 00:E05A: 20 D3 E0         		jsr SERIAL_CONSOLE_INIT
   229 00:E05D: 20 3B E1         		JSR Setup9918
   230 00:E060: 20 0E E4         		JSR LoadFont
   231 00:E063: 20 CE E3         		JSR ClearScreen
   232 00:E066: A9 F0        		lda #$F0
   233 00:E068: 20 81 E2         		JSR SetColor
   234 00:E06B: A9 01        		lda #$01
   235 00:E06D: 8D 41 03     		sta ConsoleDevice
   236 00:E070: 20 3D EC         		JSR INITKEYBOARD
   237                        
   238 00:E073: 28               		plp
   239 00:E074: 60           		rts
   240                        
   241                        
   242                        ;__OUTCH_______________________________________________________
   243                        ;
   244                        ; OUTPUT CHAR IN LOW BYTE OF ACC TO CONSOLE
   245                        ;
   246                        ; Current Console Device stored in ConsoleDevice
   247                        ;
   248                        ; 0=Serial
   249                        ; 1=On Board 9918/KB
   250                        ;______________________________________________________________
   251                        OUTCH:
   252 00:E075: DA           		phx
   253 00:E076: 5A           		phy
   254 00:E077: 08           		PHP
   255                        		AccumulatorIndex8
  Sun Nov 21 2021 15:13                                                                                                Page 7


+  255 00:E078: E2 30        		SEP #$30 		; 8 bit Index registers 
+  255                        		LONGA OFF
+  255                                LONGI OFF
   256 00:E07A: AA           		tax
   257 00:E07B: AD 41 03     		lda ConsoleDevice
   258 00:E07E: C9 01        		cmp #$01
   259 00:E080: D0 08        		bne OUTCH2
   260 00:E082: 8A           		txa
   261 00:E083: 20 0F E2         		JSR Outch9918
   262 00:E086: 28           		plp
   263 00:E087: 7A           		ply
   264 00:E088: FA           		plx
   265 00:E089: 60           		rts
   266                        
   267                        ; Default (serial)
   268                        OUTCH2:
   269 00:E08A: 8A           	txa
   270 00:E08B: 20 04 E1     	jsr SERIAL_OUTCH
   271 00:E08E: 28           	plp
   272 00:E08F: 7A           	ply
   273 00:E090: FA           	plx
   274 00:E091: 60           	rts
   275                        
   276                        
   277                        ;__INCHW_______________________________________________________
   278                        ;
   279                        ; INPUT CHAR FROM CONSOLE TO ACC  (WAIT FOR CHAR)
   280                        ;
   281                        ;______________________________________________________________
   282                        INCHW:
   283 00:E092: DA           	phx
   284 00:E093: 5A           	phy
   285 00:E094: 08           	PHP
   286                        	AccumulatorIndex8
+  286 00:E095: E2 30        		SEP #$30 		; 8 bit Index registers 
+  286                        		LONGA OFF
+  286                                LONGI OFF
   287                        
   288 00:E097: AD 41 03     	lda ConsoleDevice
   289 00:E09A: C9 01        	cmp #$01
   290 00:E09C: D0 07        	bne INCHW2
   291 00:E09E: 20 4E EC         jsr GetKey
   292 00:E0A1: 28           	plp
   293 00:E0A2: 7A           	ply
   294 00:E0A3: FA           	plx
   295 00:E0A4: 60           	rts
   296                        
   297                        ; Default (serial)
   298                        INCHW2:
   299 00:E0A5: 20 17 E1     	jsr SERIAL_INCHW
   300 00:E0A8: 28           	plp
   301 00:E0A9: 7A           	ply
   302 00:E0AA: FA           	plx
   303 00:E0AB: 60           	rts
   304                        
   305                        
   306                        ;__INCH________________________________________________________
  Sun Nov 21 2021 15:13                                                                                                Page 8


   307                        ;
   308                        ; INPUT CHAR FROM CONSOLE TO ACC
   309                        ;
   310                        ;______________________________________________________________
   311                        INCH:
   312 00:E0AC: DA           	phx
   313 00:E0AD: 5A           	phy
   314 00:E0AE: 08           	PHP
   315                         	AccumulatorIndex8
+  315 00:E0AF: E2 30        		SEP #$30 		; 8 bit Index registers 
+  315                        		LONGA OFF
+  315                                LONGI OFF
   316                        
   317 00:E0B1: AD 41 03     	lda ConsoleDevice
   318 00:E0B4: C9 01        	cmp #$01
   319 00:E0B6: D0 0C        	bne INCH2
   320                        
   321 00:E0B8: 20 80 EC     	jsr ScanKeyboard
   322 00:E0BB: C9 FF            cmp #$FF
   323 00:E0BD: F0 0F            beq INCH2S
   324 00:E0BF: 20 4E EC         jsr GetKey
   325 00:E0C2: 80 05        	bra INCH2C
   326                        
   327                        ; Default (serial)
   328                        INCH2:
   329 00:E0C4: 20 28 E1     	jsr SERIAL_INCH
   330 00:E0C7: B0 05        	BCS INCH2S
   331                        
   332                        
   333                        INCH2C:
   334 00:E0C9: 28           	plp
   335 00:E0CA: 7A           	ply
   336 00:E0CB: FA           	plx
   337 00:E0CC: 18           	CLC
   338 00:E0CD: 60           	rts
   339                        INCH2S:
   340 00:E0CE: 28           	plp
   341 00:E0CF: 7A           	ply
   342 00:E0D0: FA           	plx
   343 00:E0D1: 38           	SEC
   344 00:E0D2: 60           	rts
   345                        
   346                        
   347                        
   348                        ;__Device_Driver_Code___________________________________________
   349                        ;
   350                        		INCLUDE 'CONSERIAL.ASM'
     1                        ;__CONSERIAL______________________________________________________________________________________
                    _
     2                        ;
     3                        ;	SERIAL CONSOLE DRIVER FOR THE RBC 65c816 SBC
     4                        ;
     5                        ;	WRITTEN BY: DAN WERNER -- 2/25/2018
     6                        ;
     7                        ;_________________________________________________________________________________________________
                    _
     8                        
  Sun Nov 21 2021 15:13                                                                                                Page 9


     9                        
    10                                LONGA ON
    11                                LONGI ON
    12                        ;
    13                        ;__SERIAL_CONSOLE_INIT___________________________________________
    14                        ;
    15                        ;	INITIALIZE UART
    16                        ;	PARAMS:	SER_BAUD NEEDS TO BE SET TO BAUD RATE
    17                        ;	1200:	96	 = 1,843,200 / ( 16 X 1200 )
    18                        ;	2400:	48	 = 1,843,200 / ( 16 X 2400 )
    19                        ;	4800:	24	 = 1,843,200 / ( 16 X 4800 )
    20                        ;	9600:	12	 = 1,843,200 / ( 16 X 9600 )
    21                        ;	19K2:	06	 = 1,843,200 / ( 16 X 19,200 )
    22                        ;	38K4:	03	
    23                        ;	57K6:	02
    24                        ;	115K2:	01	
    25                        ;
    26                        ;_______________________________________________________________
    27                        ;
    28                        SERIAL_CONSOLE_INIT:
    29 00:E0D3: 08           		PHP
    30 00:E0D4: E2 30                SEP #$30               ; 8 bit registers (A AND I)
    31                                LONGI Off              ;
    32                                LONGA Off              ;
    33                        		
    34 00:E0D6: A2 3F        		ldx #63				;
    35 00:E0D8: 20 B2 F4     		jsr RTC_READ		; get magic number
    36 00:E0DB: C9 A6        		cmp #166			; is valid?
    37 00:E0DD: F0 09        		beq UART_INIT1
    38 00:E0DF: A9 80        		LDA	#$80			;
    39 00:E0E1: 8D 03 FE     		STA	UART3			; SET DLAB FLAG
    40 00:E0E4: A9 0C        		LDA	#12				; SET TO 12 = 9600 BAUD
    41 00:E0E6: 80 0A        		BRA UART_INIT2
    42                        UART_INIT1:	
    43 00:E0E8: A9 80        		LDA	#$80			;
    44 00:E0EA: 8D 03 FE     		STA	UART3			; SET DLAB FLAG
    45 00:E0ED: A2 29        		ldx #41				;
    46 00:E0EF: 20 B2 F4     		jsr RTC_READ		; get baud rate		
    47                        UART_INIT2:	
    48 00:E0F2: 8D 00 FE     		STA	UART0			; save baud rate
    49 00:E0F5: A9 00        		LDA	#00				;
    50 00:E0F7: 8D 01 FE     		STA	UART1			;
    51 00:E0FA: A9 03        		LDA	#03				;
    52 00:E0FC: 8D 03 FE     		STA	UART3			; SET 8 BIT DATA, 1 STOPBIT
    53 00:E0FF: 8D 04 FE     		STA	UART4			; 
    54 00:E102: 28           		PLP
    55 00:E103: 60           		RTS
    56                        
    57                        
    58                               	LONGA ON
    59                               	LONGI ON
    60                        ;__OUTCH_______________________________________________________
    61                        ;
    62                        ; OUTPUT CHAR IN LOW BYTE OF ACC TO UART
    63                        ; 
    64                        ;______________________________________________________________
    65                        SERIAL_OUTCH:	
  Sun Nov 21 2021 15:13                                                                                                Page 10


    66 00:E104: 08           		PHP
    67 00:E105: E2 20               	SEP #$20 			; NEED 8 bit accum for this
    68                        		LONGA OFF 
    69 00:E107: 48           		PHA					; STORE ACC
    70                        TX_BUSYLP:
    71 00:E108: AD 05 FE     		LDA	UART5			; READ LINE STATUS REGISTER
    72 00:E10B: 29 20        		AND	#$20			; TEST IF UART IS READY TO SEND (BIT 5)
    73 00:E10D: C9 00        		CMP #$00
    74 00:E10F: F0 F7        		BEQ	TX_BUSYLP		; IF NOT REPEAT
    75 00:E111: 68           		PLA					; RESTORE ACC
    76 00:E112: 8D 00 FE     		STA	UART0			; THEN WRITE THE CHAR TO UART
    77                        
    78 00:E115: 28           		PLP 				; RESTORE CPU CONTEXT
    79 00:E116: 60           		RTS					; DONE					
    80                        
    81                        
    82                               	LONGA ON
    83                               	LONGI ON
    84                        ;__INCHW_______________________________________________________
    85                        ;
    86                        ; INPUT CHAR FROM UART TO ACC  (WAIT FOR CHAR)
    87                        ;
    88                        ;______________________________________________________________
    89                        SERIAL_INCHW:	
    90 00:E117: 08           		PHP
    91 00:E118: E2 20               	SEP #$20 			; NEED 8 bit accum for this
    92                        		LONGA OFF 
    93                        
    94                        SERIAL_INCHW1:
    95 00:E11A: AD 05 FE     		LDA	UART5			; READ LINE STATUS REGISTER
    96 00:E11D: 29 01        		AND	#$01			; TEST IF DATA IN RECEIVE BUFFER
    97 00:E11F: C9 00        		CMP #$00
    98 00:E121: F0 F7        		BEQ	SERIAL_INCHW1	; LOOP UNTIL DATA IS READY
    99 00:E123: AD 00 FE     		LDA	UART0			; THEN READ THE CHAR FROM THE UART
   100                        
   101 00:E126: 28           		PLP 				; RESTORE CPU CONTEXT
   102 00:E127: 60           		RTS
   103                        
   104                        
   105                                LONGA ON
   106                                LONGI ON
   107                        ;__INCH_______________________________________________________
   108                        ;
   109                        ; INPUT CHAR FROM UART TO ACC (DO NOT WAIT FOR CHAR)
   110                        ; CArry set if invalid character
   111                        ;______________________________________________________________
   112                        SERIAL_INCH:	
   113 00:E128: 08           		PHP
   114 00:E129: E2 20                SEP #$20 			; NEED 8 bit accum for this
   115                        		LONGA OFF 
   116 00:E12B: AD 05 FE     		LDA	UART5			; READ LINE STATUS REGISTER
   117 00:E12E: 29 01        		AND	#$01			; TEST IF DATA IN RECEIVE BUFFER
   118 00:E130: F0 06        		BEQ	SERIAL_INCH1	; NO CHAR FOUND
   119 00:E132: AD 00 FE     		LDA	UART0			; THEN READ THE CHAR FROM THE UART
   120 00:E135: 28           		PLP 				; RESTORE CPU CONTEXT
   121 00:E136: 18           		CLC
   122 00:E137: 60           		RTS
  Sun Nov 21 2021 15:13                                                                                                Page 11


   123                        SERIAL_INCH1:
   124 00:E138: 28            		PLP 				; RESTORE CPU CONTEXT
   125 00:E139: 38           		SEC 	
   126 00:E13A: 60           		RTS
   351                        		INCLUDE 'CONLOCAL.ASM'
     1                        ;__CONLOCAL_______________________________________________________________________________________
     2                        ;
     3                        ;	LOCAL CONSOLE DRIVER FOR THE HOMECOMPUTER3
     4                        ;
     5                        ;	WRITTEN BY: DAN WERNER -- 4/4/2021
     6                        ;
     7                        ;_________________________________________________________________________________________________
     8                        
     9                        
    10                        ;;;    JSR     Setup9918
    11                        ;;;    JSR     LoadFont
    12                        ;;;	    JSR     ClearScreen
    13                        ;;;	    JSR SetColor
    14                        ;;;  	JSR SetXY
    15                        ;;;	    JSR CopyVideoMem
    16                        ;;;	    JSR ScrollUp
    17                        ;;;	    JSR Outch9918
    18                        ;;;     JSR INITKEYBOARD
    19                        ;;;     jsr GetKey
    20                        ;;;     DecodeKeyboard
    21                        ;;;     ModifierKeyCheck
    22                        ;;;     ScanKeyboard
    23                        ;;;     CURSOR
    24                        ;;;     UNCURSOR
    25                        ;;;
    26                        ;;;
    27                        ;;; 	VRAM Memory Map
    28                        ;;;	$0000-$03FF	Sprite Patterns
    29                        ;;;	$0400-$07BF	Screen Memory  ($06FF for Graphics Modes)
    30                        ;;;	$0700-$07FF	Sprite Attributes
    31                        ;;;	$0800-$1FFF	Patterns
    32                        ;;;	$2000-$3FFF	Color Memory
    33                        ;;;
    34                        ;;;
    35                        ;;;
    36                        
    37                        
    38                        
    39                        ;__Setup9918______________________________________________________________________________
    40                        ;   Setup 9918 registers and clear VRAM
    41                        ;________________________________________________________________________________________
    42                        Setup9918:
    43 00:E13B: 5A                   phy
    44 00:E13C: 48                   pha
    45 00:E13D: 08                   php
    46 00:E13E: C2 10        	REP #$10 		; 16 bit Index registers
    47                        	LONGI ON
    48 00:E140: E2 20                SEP #$20 		; 8 bit accum
    49                        	LONGA OFF
    50                        
    51                        ;	Setup Width Parm
    52 00:E142: A9 28        	lda 	#40
  Sun Nov 21 2021 15:13                                                                                                Page 12


    53 00:E144: 8D 43 03     	sta 	VIDEOWIDTH
    54                        
    55                        ; Let's set VDP write address to $0000
    56 00:E147: A9 00        	LDA	#$00
    57 00:E149: 8D 0B FE     	sta	CMDP
    58 00:E14C: A9 40        	lda	#$40
    59 00:E14E: 8D 0B FE     	sta	CMDP
    60                        
    61                        ; Now let's clear VDP memory
    62 00:E151: A9 00        	LDA	#$00
    63 00:E153: A0 FF 3F     	LDY	#$3FFF
    64                        CLEAR:
    65 00:E156: 8D 0A FE     	STA	DATAP
    66 00:E159: 88           	DEY
    67 00:E15A: F0 06        	BEQ	ENDCLR
    68 00:E15C: 20 34 E4     	JSR 	DELAY9918
    69 00:E15F: 4C 56 E1     	JMP	CLEAR
    70                        
    71                        ENDCLR:
    72                        	LONGI	OFF
    73 00:E162: E2 10        	SEP	#$10
    74                        
    75                        ; Now it is time to set up VDP registers:
    76                        ;----------------------------------------
    77                        ; Register 0 to $0
    78                        ;
    79                        ; Set mode selection bit M3 (maybe also M4 & M5) to zero and
    80                        ; disable external video & horizontal interrupt
    81 00:E164: A9 00        	LDA	#$00
    82 00:E166: 8D 0B FE     	STA	CMDP
    83 00:E169: A9 80        	LDA	#$80
    84 00:E16B: 8D 0B FE     	STA	CMDP
    85                        
    86                        ;----------------------------------------
    87                        ; Register 1 to $50
    88                        ;
    89                        ; Select 40 column mode, enable screen and disable vertical interrupt
    90 00:E16E: A9 D0        	LDA	#$D0
    91 00:E170: 8D 0B FE     	STA	CMDP
    92 00:E173: A9 81            	LDA 	#$81
    93 00:E175: 8D 0B FE     	STA	CMDP
    94                        ;----------------------------------------
    95                        ; Register 2 to $0
    96                        ;
    97                        ; Set Screen RAM to $0400
    98 00:E178: A9 01        	LDA	#$01
    99 00:E17A: 8D 0B FE     	STA	CMDP
   100 00:E17D: A9 82            	LDA 	#$82
   101 00:E17F: 8D 0B FE     	STA	CMDP
   102                        
   103                        ;----------------------------------------
   104                        ; Register 3 is COLOR TABLE
   105                        ; Set COLOR table to $2000
   106 00:E182: A9 80        	LDA	#$80
   107 00:E184: 8D 0B FE     	STA	CMDP
   108 00:E187: A9 83            	LDA 	#$83
   109 00:E189: 8D 0B FE     	STA	CMDP
  Sun Nov 21 2021 15:13                                                                                                Page 13


   110                        
   111                        ;----------------------------------------
   112                        ; Register 4 to $1
   113                        ; Set pattern generator table to $0800
   114 00:E18C: A9 01        	LDA 	#$01
   115 00:E18E: 8D 0B FE     	STA	CMDP
   116 00:E191: A9 84            	LDA 	#$84
   117 00:E193: 8D 0B FE     	STA	CMDP
   118                        
   119                        ;----------------------------------------
   120                        ; Register 5 Sprite attribute
   121                        ; Set ATTRIBUTE table to $0700
   122 00:E196: A9 0E        	LDA	#$0E
   123 00:E198: 8D 0B FE     	STA	CMDP
   124 00:E19B: A9 85            	LDA 	#$85
   125 00:E19D: 8D 0B FE     	STA	CMDP
   126                        
   127                        ;----------------------------------------
   128                        ; Register 6 Sprite pattern
   129                        ; Set ATTRIBUTE table to $0000
   130 00:E1A0: A9 00        	LDA	#$00
   131 00:E1A2: 8D 0B FE     	STA	CMDP
   132 00:E1A5: A9 86            	LDA 	#$86
   133 00:E1A7: 8D 0B FE     	STA	CMDP
   134                        
   135                        
   136                        
   137                        ;----------------------------------------
   138                        ; Register 7 to $F0
   139                        ; Set colors to white on black
   140 00:E1AA: A9 F1        	LDA	#$F1
   141 00:E1AC: 8D 0B FE     	STA	CMDP
   142 00:E1AF: A9 87            	LDA #$87
   143 00:E1B1: 8D 0B FE     	STA	CMDP
   144                        
   145 00:E1B4: 28               	plp
   146 00:E1B5: 68               	pla
   147 00:E1B6: 7A               	ply
   148 00:E1B7: 60               	rts
   149                        
   150                        
   151                        ;__Cursor________________________________________________________________________________
   152                        ;   Draw A cursor
   153                        ;
   154                        ;________________________________________________________________________________________
   155                        CURSOR:
   156 00:E1B8: DA           	phx
   157 00:E1B9: 5A           	phy
   158 00:E1BA: 48           	pha
   159 00:E1BB: 08                   php
   160 00:E1BC: E2 30        	SEP #$30
   161                        	LONGA OFF
   162                        	LONGI OFF
   163 00:E1BE: AC 31 03     	ldy CSRY
   164 00:E1C1: AE 30 03     	ldx CSRX
   165 00:E1C4: 20 8E E2     	jsr SetXY
   166 00:E1C7: 20 34 E4     	JSR DELAY9918
  Sun Nov 21 2021 15:13                                                                                                Page 14


   167 00:E1CA: AD 0A FE     	LDA DATAP
   168 00:E1CD: 20 34 E4     	JSR DELAY9918
   169 00:E1D0: AD 0A FE     	LDA DATAP
   170 00:E1D3: 8D 42 03     	STA CSRCHAR
   171 00:E1D6: AC 31 03     	ldy CSRY
   172 00:E1D9: AE 30 03     	ldx CSRX
   173 00:E1DC: 20 8E E2     	jsr SetXY
   174 00:E1DF: 20 34 E4     	JSR DELAY9918
   175 00:E1E2: A9 FE        	LDA #$FE
   176 00:E1E4: 8D 0A FE     	STA DATAP
   177 00:E1E7: AC 31 03     	ldy CSRY
   178 00:E1EA: AE 30 03     	ldx CSRX
   179 00:E1ED: 20 8E E2     	jsr SetXY
   180 00:E1F0: 28           	plp
   181 00:E1F1: 68           	pla
   182 00:E1F2: 7A           	ply
   183 00:E1F3: FA           	plx
   184 00:E1F4: 60           	rts
   185                        
   186                        ;__UnCursor______________________________________________________________________________
   187                        ;   Remove the cursor
   188                        ;
   189                        ;________________________________________________________________________________________
   190                        UNCURSOR:
   191 00:E1F5: DA           	phx
   192 00:E1F6: 5A           	phy
   193 00:E1F7: 48           	pha
   194 00:E1F8: 08                   php
   195 00:E1F9: E2 30        	SEP #$30
   196                        	LONGA OFF
   197                        	LONGI OFF
   198 00:E1FB: AD 42 03     	LDA CSRCHAR
   199 00:E1FE: 8D 0A FE     	STA DATAP
   200 00:E201: AC 31 03     	ldy CSRY
   201 00:E204: AE 30 03     	ldx CSRX
   202 00:E207: 20 8E E2     	jsr SetXY
   203 00:E20A: 28           	plp
   204 00:E20B: 68           	pla
   205 00:E20C: 7A           	ply
   206 00:E20D: FA           	plx
   207 00:E20E: 60           	rts
   208                        
   209                        
   210                        
   211                        
   212                        ;__Outch9918______________________________________________________________________________
   213                        ;   Output char to screen
   214                        ;
   215                        ; Char in A
   216                        ;________________________________________________________________________________________
   217                        Outch9918:
   218 00:E20F: DA           	phx
   219 00:E210: 5A           	phy
   220 00:E211: 08                   php
   221 00:E212: E2 30                SEP #$30 		; 8 bit accum
   222                        	LONGA OFF
   223                        	LONGI OFF
  Sun Nov 21 2021 15:13                                                                                                Page 15


   224                        
   225 00:E214: AE 30 03     	ldx CSRX
   226 00:E217: AC 31 03     	ldy CSRY
   227                        
   228 00:E21A: C9 0A        	cmp #10
   229 00:E21C: F0 33        	beq Outch9918_Exit
   230 00:E21E: C9 0D        	cmp #13
   231 00:E220: F0 39        	beq Outch9918_CR
   232 00:E222: C9 08        	cmp #8
   233 00:E224: F0 43        	beq Outch9918_BS
   234                        
   235 00:E226: 8D 0A FE     	sta DATAP
   236                        
   237 00:E229: E8           	INX
   238 00:E22A: EC 43 03     	cpx VIDEOWIDTH
   239 00:E22D: D0 22        	bne Outch9918_Exit
   240 00:E22F: C8           	iny
   241 00:E230: BB           	tyx			; set next line as a continuation line
   242 00:E231: A9 FF        	LDA #$FF		;
   243 00:E233: 9D D0 03     	STA LINEFLGS,X		;
   244 00:E236: A2 00        	ldx #0
   245 00:E238: C0 18        	cpy #24
   246 00:E23A: D0 15        	bne Outch9918_Exit
   247                        Outch9918_CR1:
   248 00:E23C: AD 43 03     	LDA VIDEOWIDTH
   249 00:E23F: A2 00        	ldx #0
   250 00:E241: A0 17        	ldy #23
   251 00:E243: 8E 30 03     	stx CSRX
   252 00:E246: 8C 31 03     	sty CSRY
   253 00:E249: 20 FE E2     	jsr ScrollUp
   254 00:E24C: A9 00        	LDA #00			;
   255 00:E24E: 8D E8 03     	STA LINEFLGS+24		;
   256                        
   257                        Outch9918_Exit:
   258 00:E251: 8E 30 03     	stx CSRX
   259 00:E254: 8C 31 03     	sty CSRY
   260 00:E257: 28           	plp
   261 00:E258: 7A           	ply
   262 00:E259: FA           	plx
   263 00:E25A: 60           	rts
   264                        Outch9918_CR:
   265 00:E25B: C8           	iny
   266 00:E25C: C0 18        	cpy #24
   267 00:E25E: F0 DC        	beq Outch9918_CR1
   268 00:E260: A2 00        	ldx #0
   269 00:E262: 20 8E E2     	jsr SetXY
   270 00:E265: 28           	plp
   271 00:E266: 7A           	ply
   272 00:E267: FA           	plx
   273 00:E268: 60           	rts
   274                        Outch9918_BS:
   275 00:E269: E0 00        	cpx #0
   276 00:E26B: F0 06        	beq Outch9918_BS1
   277 00:E26D: CA           	dex
   278 00:E26E: 20 8E E2     	jsr SetXY
   279 00:E271: 80 DE        	bra Outch9918_Exit
   280                        Outch9918_BS1:
  Sun Nov 21 2021 15:13                                                                                                Page 16


   281 00:E273: C0 00        	cpy #0
   282 00:E275: F0 DA        	beq Outch9918_Exit
   283 00:E277: 88           	DEY
   284 00:E278: AE 43 03     	ldx VIDEOWIDTH
   285 00:E27B: CA           	DEX
   286 00:E27C: 20 8E E2     	jsr SetXY
   287 00:E27F: 80 D0        	bra Outch9918_Exit
   288                        
   289                        
   290                        
   291                        ;__SetColor______________________________________________________________________________
   292                        ;   Setup 9918 Color
   293                        ;
   294                        ; Color in A - High 4 bits background, Low 4 bits Foreground
   295                        ;________________________________________________________________________________________
   296                        SetColor:
   297 00:E281: 08                   php
   298 00:E282: E2 30                SEP #$30 		; 8 bit accum
   299                        	LONGA OFF
   300                        	LONGI OFF
   301                        
   302                        ;----------------------------------------
   303                        ; Register 7 to A
   304 00:E284: 8D 0B FE     	STA CMDP
   305 00:E287: A9 87            	LDA #$87
   306 00:E289: 8D 0B FE     	STA CMDP
   307 00:E28C: 28               	plp
   308 00:E28D: 60               	rts
   309                        
   310                        ;__SetXY_________________________________________________________________________________
   311                        ;   Setup 9918 Cursor Position
   312                        ;
   313                        ; Screen Coords in X,Y
   314                        ;________________________________________________________________________________________
   315                        SetXY:
   316 00:E28E: DA           	phx
   317 00:E28F: 5A           	phy
   318 00:E290: 48           	pha
   319 00:E291: 08                   php
   320 00:E292: E2 30        	SEP #$30
   321                        	LONGA OFF
   322                        	LONGI OFF
   323 00:E294: 8C 31 03     	sty CSRY
   324 00:E297: 8E 30 03     	stx CSRX
   325 00:E29A: C2 30                REP #$30 		; 16 bit accum, 16 bit X&Y
   326                        	LONGA ON
   327                        	LONGI ON
   328                        
   329 00:E29C: 98           	tya
   330 00:E29D: 29 FF 00     	and #$00ff			; Lower Byte of Y only
   331 00:E2A0: 18           	clc
   332 00:E2A1: 0A           	ASL
   333 00:E2A2: 0A           	ASL
   334 00:E2A3: 0A           	ASL
   335 00:E2A4: 0A           	ASL
   336 00:E2A5: 0A           	ASL 				; A=A*32
   337 00:E2A6: 8D 36 03     	sta TEMP			;TEMP=A
  Sun Nov 21 2021 15:13                                                                                                Page 17


   338 00:E2A9: AD 43 03     	LDA VIDEOWIDTH
   339 00:E2AC: 29 FF 00     	AND #$00FF
   340 00:E2AF: C9 20 00     	CMP #32
   341 00:E2B2: F0 21        	BEQ SetXY_32
   342 00:E2B4: 98           	tya
   343 00:E2B5: 29 FF 00     	and #$00ff			; Lower Byte of Y only
   344 00:E2B8: 0A           	ASL
   345 00:E2B9: 0A           	ASL
   346 00:E2BA: 0A           	ASL					; A=A*8
   347 00:E2BB: 18           	clc
   348 00:E2BC: 6D 36 03     	adc TEMP			; add a to temp
   349 00:E2BF: 8D 36 03     	sta TEMP			; store in temp (TEMP now = Y*40)
   350 00:E2C2: AD 43 03     	LDA VIDEOWIDTH
   351 00:E2C5: 29 FF 00     	AND #$00FF
   352 00:E2C8: C9 28 00     	CMP #40
   353 00:E2CB: F0 08        	BEQ SetXY_32
   354                        	; double for 80 columns
   355 00:E2CD: AD 36 03     	LDA TEMP			;
   356 00:E2D0: 18           	CLC
   357 00:E2D1: 0A           	ASL
   358 00:E2D2: 8D 36 03     	sta TEMP			; store in temp (TEMP now = Y*80)
   359                        SetXY_32:
   360 00:E2D5: 8A           	TXA 				; move X to A
   361 00:E2D6: 18           	clc
   362 00:E2D7: 6D 36 03     	adc TEMP			; Add A to Temp
   363 00:E2DA: 8D 36 03     	sta TEMP
   364 00:E2DD: A9 00 04     	LDA #$0400			; add in base of screen memory
   365 00:E2E0: 18           	CLC
   366 00:E2E1: 6D 36 03     	adc TEMP
   367 00:E2E4: 8D 36 03     	sta TEMP			; Store A to TEMP (TEMP now = Screen Address)
   368 00:E2E7: E2 30                SEP #$30 			; 8 bit accum, 8 bit X&Y
   369                        	LONGA OFF
   370                        	LONGI OFF
   371                        ; Let's set VDP write address
   372 00:E2E9: AD 36 03     	LDA TEMP
   373 00:E2EC: 8D 0B FE     	sta CMDP
   374 00:E2EF: AD 37 03     	LDA TEMP+1
   375 00:E2F2: 09 40        	ORA #$40
   376 00:E2F4: 29 4F        	AND #$4F
   377 00:E2F6: 8D 0B FE     	sta CMDP
   378 00:E2F9: 28           	plp
   379 00:E2FA: 68           	pla
   380 00:E2FB: 7A           	ply
   381 00:E2FC: FA           	plx
   382 00:E2FD: 60           	rts
   383                        
   384                        ;__ScrollUp______________________________________________________________________________
   385                        ;   Scroll the screen up one line
   386                        ;
   387                        ; number of positions in line in A
   388                        
   389                        ;________________________________________________________________________________________
   390                        ScrollUp:
   391 00:E2FE: 48           	pha
   392 00:E2FF: DA           	phx
   393 00:E300: 5A           	phy
   394 00:E301: 08                   php
  Sun Nov 21 2021 15:13                                                                                                Page 18


   395 00:E302: E2 30        	SEP #$30 		; 8 bit accum, 8 bit X&Y
   396                        	LONGA OFF
   397                        	LONGI OFF
   398                        
   399 00:E304: A0 00        	ldy #00
   400                        ScrollUpLoop:
   401 00:E306: A2 00        	ldx #00
   402 00:E308: 5A           	phy
   403 00:E309: C8           	iny
   404 00:E30A: 48           	pha
   405 00:E30B: 20 8E E2     	jsr SetXY
   406 00:E30E: 68           	pla
   407 00:E30F: 7A           	ply
   408 00:E310: 5A           	phy
   409 00:E311: C8           	iny
   410 00:E312: A2 00        	ldx #00
   411 00:E314: 48           	pha
   412 00:E315: 09 80        	ora #$80
   413 00:E317: 20 57 E3     	jsr CopyVideoMem
   414 00:E31A: 68           	pla
   415 00:E31B: 7A           	ply
   416 00:E31C: C8           	iny
   417 00:E31D: C0 17        	cpy #23
   418 00:E31F: D0 E5        	bne ScrollUpLoop
   419 00:E321: A8           	tay
   420 00:E322: C8           	iny
   421 00:E323: 5A           	PHY
   422 00:E324: A2 00        	LDX #0
   423 00:E326: A0 17        	LDY #23
   424 00:E328: 20 8E E2     	JSR SetXY
   425 00:E32B: 7A           	PLY
   426 00:E32C: A9 20        	lda #' '
   427                        ScrollUpLoop1:
   428 00:E32E: 8D 0A FE     	sta DATAP
   429 00:E331: 20 34 E4     	JSR DELAY9918
   430 00:E334: 88           	DEY
   431 00:E335: D0 F7        	bne ScrollUpLoop1
   432                        
   433                        ; SCROLL UP THE LINE FLAGS
   434 00:E337: A2 00        	LDX  	#0
   435 00:E339: A0 19        	LDY 	#25
   436                        SCRLFLGS:
   437 00:E33B: BD D1 03     	LDA 	LINEFLGS+1,X
   438 00:E33E: 9D D0 03     	STA	LINEFLGS,X
   439 00:E341: 88           	DEY
   440 00:E342: E8           	INX
   441 00:E343: C0 00        	CPY 	#00
   442 00:E345: D0 F4        	BNE 	SCRLFLGS
   443                        
   444 00:E347: E2 10        	SEP #$10 		; 8 bit Index registers
   445                        	LONGI OFF
   446 00:E349: AE 30 03     	ldx CSRX
   447 00:E34C: AC 31 03     	ldy CSRY
   448 00:E34F: 20 8E E2     	jsr SetXY
   449                        
   450 00:E352: 28           	plp
   451 00:E353: 7A           	ply
  Sun Nov 21 2021 15:13                                                                                                Page 19


   452 00:E354: FA           	plx
   453 00:E355: 68           	pla
   454 00:E356: 60           	rts
   455                        
   456                        
   457                        
   458                        
   459                        
   460                        ;__CopyVideoMem__________________________________________________________________________
   461                        ;   Copy Screen Mem Bytes
   462                        ;
   463                        ; Screen Coords in X,Y, number of positions to copy in A
   464                        ; High bit in A indicates direction 1=backward, 0=forward
   465                        ;________________________________________________________________________________________
   466                        CopyVideoMem:
   467 00:E357: 08                   php
   468 00:E358: E2 30        	SEP #$30 		; 8 bit accum, 8 bit X&Y
   469                        	LONGA OFF
   470                        	LONGI OFF
   471 00:E35A: 8D 35 03     	sta ScrollCount
   472 00:E35D: 20 8E E2     	jsr SetXY
   473 00:E360: 20 34 E4     	JSR DELAY9918
   474 00:E363: AD 0A FE     	lda DATAP
   475 00:E366: C2 30                REP #$30 		; 16 bit accum, 16 bit X&Y
   476                        	LONGA ON
   477                        	LONGI ON
   478 00:E368: AD 35 03     	lda ScrollCount
   479 00:E36B: 29 7F 00     	AND #$007f
   480 00:E36E: A8           	tay
   481 00:E36F: A2 00 00     	ldx #$0000
   482 00:E372: E2 20        	SEP #$20 		; 8 bit accum
   483                        	LONGA OFF
   484                        CopyVideoMemLoop:
   485 00:E374: 20 34 E4     	JSR DELAY9918
   486 00:E377: AD 0A FE     	lda DATAP
   487 00:E37A: 9D 50 03     	sta ScrollBuffer,x
   488 00:E37D: E8           	INX
   489 00:E37E: 88           	DEY				; potential delay needed here?
   490 00:E37F: D0 F3        	bne CopyVideoMemLoop
   491                        
   492 00:E381: C2 20        	REP #$20 		; 16 bit accum
   493                        	LONGA ON
   494 00:E383: AD 35 03     	lda ScrollCount
   495 00:E386: 29 80 00     	AND #$0080
   496 00:E389: C9 00 00     	cmp #$00
   497 00:E38C: F0 13        	beq CopyVideoMemForward
   498 00:E38E: AD 36 03     	lda TEMP
   499 00:E391: 48           	pha
   500 00:E392: 8A           	txa
   501 00:E393: A8           	tay
   502 00:E394: 8D 36 03     	sta TEMP
   503 00:E397: 68           	pla
   504 00:E398: 38           	sec
   505 00:E399: ED 36 03     	sbc TEMP
   506 00:E39C: 8D 36 03     	sta TEMP
   507 00:E39F: 80 09        	bra CopyVideoMemCont
   508                        CopyVideoMemForward:
  Sun Nov 21 2021 15:13                                                                                                Page 20


   509 00:E3A1: 8A           	txa
   510 00:E3A2: A8           	tay
   511 00:E3A3: 18           	clc
   512 00:E3A4: 6D 36 03     	adc TEMP
   513 00:E3A7: 8D 36 03     	sta TEMP
   514                        CopyVideoMemCont:
   515 00:E3AA: E2 20        	SEP #$20 		; 8 bit accum
   516                        	LONGA OFF
   517 00:E3AC: AD 36 03     	LDA TEMP
   518 00:E3AF: 8D 0B FE     	sta CMDP
   519 00:E3B2: AD 37 03     	LDA TEMP+1
   520 00:E3B5: 09 40        	ORA #$40
   521 00:E3B7: 29 4F        	AND #$4F
   522 00:E3B9: 8D 0B FE     	sta CMDP
   523 00:E3BC: A2 00 00     	ldx #$0000
   524                        CopyVideoMemLoop1:
   525 00:E3BF: 20 34 E4     	JSR DELAY9918
   526 00:E3C2: BD 50 03     	lda ScrollBuffer,x
   527 00:E3C5: 8D 0A FE     	sta DATAP
   528 00:E3C8: E8           	INX
   529 00:E3C9: 88           	DEY
   530 00:E3CA: D0 F3        	bne CopyVideoMemLoop1
   531 00:E3CC: 28           	plp
   532 00:E3CD: 60           	rts
   533                        
   534                        
   535                        ;__ClearScreen___________________________________________________________________________
   536                        ;  clear 9918 Screen
   537                        ;________________________________________________________________________________________
   538                        ClearScreen:
   539 00:E3CE: 5A                   phy
   540 00:E3CF: 48                   pha
   541 00:E3D0: 08                   php
   542 00:E3D1: C2 10        	REP #$10 		; 16 bit Index registers
   543                        	LONGI ON
   544 00:E3D3: E2 20                SEP #$20 		; 8 bit accum
   545                        	LONGA OFF
   546                        
   547                        ; Let's set VDP write address to $0400
   548 00:E3D5: A9 00        	LDA	#$00
   549 00:E3D7: 8D 0B FE     	sta	CMDP
   550 00:E3DA: A9 44        	lda	#$44
   551 00:E3DC: 8D 0B FE     	sta	CMDP
   552                        
   553                        ; Now let's clear
   554 00:E3DF: A9 20        	LDA	#32
   555 00:E3E1: A0 00 04     	LDY	#$0400
   556                        ClearScreen1:
   557 00:E3E4: 20 34 E4     	JSR 	DELAY9918
   558 00:E3E7: 8D 0A FE     	STA	DATAP
   559 00:E3EA: 88           	DEY
   560 00:E3EB: F0 03        	BEQ	ENDCLRScreen
   561 00:E3ED: 4C E4 E3     	JMP	ClearScreen1
   562                        
   563                        ENDCLRScreen:
   564 00:E3F0: A2 D0 03     	LDX  	#LINEFLGS
   565 00:E3F3: A0 19 00     	LDY 	#25
  Sun Nov 21 2021 15:13                                                                                                Page 21


   566 00:E3F6: A9 00        	LDA 	#00
   567                        CLRFLGS:
   568 00:E3F8: 9D 00 00     	STA	0,X
   569 00:E3FB: 88           	DEY
   570 00:E3FC: E8           	INX
   571 00:E3FD: C0 00 00     	CPY 	#00
   572 00:E400: D0 F6        	BNE 	CLRFLGS
   573 00:E402: E2 10        	SEP #$10 		; 8 bit Index registers
   574                        	LONGI OFF
   575 00:E404: A2 00        	ldx #0
   576 00:E406: 9B           	txy
   577 00:E407: 20 8E E2     	jsr SetXY
   578 00:E40A: 28           	plp
   579 00:E40B: 68               	pla
   580 00:E40C: 7A               	ply
   581 00:E40D: 60               	rts
   582                        
   583                        
   584                        ;__LoadFont______________________________________________________________________________
   585                        ;   Load 9918 Font
   586                        ;________________________________________________________________________________________
   587                        LoadFont:
   588 00:E40E: 5A                   phy
   589 00:E40F: DA                   phx
   590 00:E410: 48                   pha
   591 00:E411: 08                   php
   592 00:E412: C2 10        	REP #$10 		; 16 bit Index registers
   593                        	LONGI ON
   594 00:E414: E2 20                SEP #$20 		; 8 bit accum
   595                        	LONGA OFF
   596                        
   597                        
   598                        ;----------------------------------------
   599                        ; Let's set VDP write address to $800 so, that we can write
   600                        ; character set to memory
   601 00:E416: A9 00        	LDA	#$00
   602 00:E418: 8D 0B FE     	STA	CMDP
   603 00:E41B: A9 48        	LDA	#$48
   604 00:E41D: 8D 0B FE     	STA	CMDP
   605                        
   606                        
   607                        ; Let's copy character set
   608 00:E420: A0 F7 07     	LDY	#(FONT_TMS_END-FONT_TMS)-1	; count of chars to send
   609                        
   610                        COPYCHARS:
   611 00:E423: B9 45 E4     	LDA	FONT_TMS,Y
   612 00:E426: 8D 0A FE     	STA	DATAP
   613 00:E429: 20 34 E4     	JSR 	DELAY9918
   614 00:E42C: 88           	DEY
   615 00:E42D: D0 F4        	BNE	COPYCHARS
   616                        
   617 00:E42F: 28               	plp
   618 00:E430: 68               	pla
   619 00:E431: FA               	plx
   620 00:E432: 7A               	ply
   621 00:E433: 60               	rts
   622                        
  Sun Nov 21 2021 15:13                                                                                                Page 22


   623                        DELAY9918:
   624 00:E434: 48                   PHA
   625 00:E435: 48                   PHA             ; MIGHT BE POSSIBLE TO REDUCE DELAY
   626 00:E436: 68                   PLA
   627 00:E437: 48                   PHA
   628 00:E438: 68                   PLA
   629 00:E439: 48                   PHA
   630 00:E43A: 68                   PLA
   631 00:E43B: 48                   PHA
   632 00:E43C: 68                   PLA
   633 00:E43D: 48                   PHA
   634 00:E43E: 68                   PLA
   635 00:E43F: 48                   PHA
   636 00:E440: 68                   PLA
   637 00:E441: 48                   PHA
   638 00:E442: 68                   PLA
   639 00:E443: 68                   PLA
   640 00:E444: 60                   RTS
   641                        
   642                        	INCLUDE 'fonttms-3.ASM'
     1                        FONT_TMS:			 ; Font file from FontEditor
     2 00:E445: 00 00 78 78   .DB $00,$00,$78,$78,$78,$78,$00,$00 ; $FE
       00:E449: 78 78 00 00 
     3 00:E44D: 00 00 00 00   .DB $00,$00,$00,$00,$70,$20,$10,$60 ; $FD
       00:E451: 70 20 10 60 
     4 00:E455: 00 00 00 00   .DB $00,$00,$00,$00,$28,$28,$28,$50 ; $FC
       00:E459: 28 28 28 50 
     5 00:E45D: 00 20 50 50   .DB $00,$20,$50,$50,$10,$10,$1C,$00 ; $FB
       00:E461: 10 10 1C 00 
     6 00:E465: 00 00 00 00   .DB $00,$00,$00,$00,$20,$00,$00,$00 ; $FA
       00:E469: 20 00 00 00 
     7 00:E46D: 00 00 00 30   .DB $00,$00,$00,$30,$30,$00,$00,$00 ; $F9
       00:E471: 30 00 00 00 
     8 00:E475: 00 00 00 00   .DB $00,$00,$00,$00,$30,$48,$48,$30 ; $F8
       00:E479: 30 48 48 30 
     9 00:E47D: 00 00 50 28   .DB $00,$00,$50,$28,$00,$50,$28,$00 ; $F7
       00:E481: 00 50 28 00 
    10 00:E485: 00 00 10 00   .DB $00,$00,$10,$00,$7C,$00,$10,$00 ; $F6
       00:E489: 7C 00 10 00 
    11 00:E48D: 00 20 50 10   .DB $00,$20,$50,$10,$10,$10,$10,$10 ; $F5
       00:E491: 10 10 10 10 
    12 00:E495: 10 10 10 10   .DB $10,$10,$10,$10,$10,$14,$08,$00 ; $F4
       00:E499: 10 14 08 00 
    13 00:E49D: 00 78 00 08   .DB $00,$78,$00,$08,$30,$40,$30,$08 ; $F3
       00:E4A1: 30 40 30 08 
    14 00:E4A5: 00 78 00 40   .DB $00,$78,$00,$40,$30,$08,$30,$40 ; $F2
       00:E4A9: 30 08 30 40 
    15 00:E4AD: 00 00 38 00   .DB $00,$00,$38,$00,$10,$38,$10,$00 ; $F1
       00:E4B1: 10 38 10 00 
    16 00:E4B5: 00 00 78 00   .DB $00,$00,$78,$00,$78,$00,$78,$00 ; $F0
       00:E4B9: 78 00 78 00 
    17 00:E4BD: 00 00 48 48   .DB $00,$00,$48,$48,$48,$48,$30,$00 ; $EF
       00:E4C1: 48 48 30 00 
    18 00:E4C5: 00 00 38 40   .DB $00,$00,$38,$40,$78,$40,$38,$00 ; $EE
       00:E4C9: 78 40 38 00 
    19 00:E4CD: 00 10 38 54   .DB $00,$10,$38,$54,$54,$38,$10,$00 ; $ED
       00:E4D1: 54 38 10 00 
  Sun Nov 21 2021 15:13                                                                                                Page 23


    20 00:E4D5: 00 00 28 54   .DB $00,$00,$28,$54,$54,$28,$00,$00 ; $EC
       00:E4D9: 54 28 00 00 
    21 00:E4DD: 00 30 48 38   .DB $00,$30,$48,$38,$10,$20,$40,$30 ; $EB
       00:E4E1: 10 20 40 30 
    22 00:E4E5: 00 6C 28 28   .DB $00,$6C,$28,$28,$44,$44,$38,$00 ; $EA
       00:E4E9: 44 44 38 00 
    23 00:E4ED: 00 30 48 48   .DB $00,$30,$48,$48,$78,$48,$48,$30 ; $E9
       00:E4F1: 78 48 48 30 
    24 00:E4F5: 00 38 10 38   .DB $00,$38,$10,$38,$44,$38,$10,$38 ; $E8
       00:E4F9: 44 38 10 38 
    25 00:E4FD: 00 10 10 10   .DB $00,$10,$10,$10,$50,$28,$00,$00 ; $E7
       00:E501: 50 28 00 00 
    26 00:E505: 40 40 70 48   .DB $40,$40,$70,$48,$48,$48,$00,$00 ; $E6
       00:E509: 48 48 00 00 
    27 00:E50D: 00 00 30 48   .DB $00,$00,$30,$48,$48,$3C,$00,$00 ; $E5
       00:E511: 48 3C 00 00 
    28 00:E515: 00 78 48 20   .DB $00,$78,$48,$20,$10,$20,$48,$78 ; $E4
       00:E519: 10 20 48 78 
    29 00:E51D: 00 28 28 28   .DB $00,$28,$28,$28,$28,$28,$7C,$00 ; $E3
       00:E521: 28 28 7C 00 
    30 00:E525: 00 40 40 40   .DB $00,$40,$40,$40,$40,$40,$48,$78 ; $E2
       00:E529: 40 40 48 78 
    31 00:E52D: 40 70 48 48   .DB $40,$70,$48,$48,$70,$48,$70,$00 ; $E1
       00:E531: 70 48 70 00 
    32 00:E535: 00 00 34 48   .DB $00,$00,$34,$48,$48,$34,$00,$00 ; $E0
       00:E539: 48 34 00 00 
    33 00:E53D: 00 00 00 00   .DB $00,$00,$00,$00,$FC,$FC,$FC,$FC ; $DF
       00:E541: FC FC FC FC 
    34 00:E545: 1C 1C 1C 1C   .DB $1C,$1C,$1C,$1C,$1C,$1C,$1C,$1C ; $DE
       00:E549: 1C 1C 1C 1C 
    35 00:E54D: E0 E0 E0 E0   .DB $E0,$E0,$E0,$E0,$E0,$E0,$E0,$E0 ; $DD
       00:E551: E0 E0 E0 E0 
    36 00:E555: FC FC FC FC   .DB $FC,$FC,$FC,$FC,$00,$00,$00,$00 ; $DC
       00:E559: 00 00 00 00 
    37 00:E55D: FC FC FC FC   .DB $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC ; $DB
       00:E561: FC FC FC FC 
    38 00:E565: 10 10 10 10   .DB $10,$10,$10,$10,$1C,$00,$00,$00 ; $DA
       00:E569: 1C 00 00 00 
    39 00:E56D: 00 00 00 00   .DB $00,$00,$00,$00,$F0,$10,$10,$10 ; $D9
       00:E571: F0 10 10 10 
    40 00:E575: 10 10 10 10   .DB $10,$10,$10,$10,$FC,$00,$FC,$10 ; $D8
       00:E579: FC 00 FC 10 
    41 00:E57D: 50 50 50 50   .DB $50,$50,$50,$50,$DC,$50,$50,$50 ; $D7
       00:E581: DC 50 50 50 
    42 00:E585: 50 50 50 50   .DB $50,$50,$50,$50,$7C,$00,$00,$00 ; $D6
       00:E589: 7C 00 00 00 
    43 00:E58D: 10 10 10 10   .DB $10,$10,$10,$10,$1C,$10,$1C,$00 ; $D5
       00:E591: 1C 10 1C 00 
    44 00:E595: 00 00 00 00   .DB $00,$00,$00,$00,$1C,$10,$1C,$10 ; $D4
       00:E599: 1C 10 1C 10 
    45 00:E59D: 00 00 00 00   .DB $00,$00,$00,$00,$7C,$50,$50,$50 ; $D3
       00:E5A1: 7C 50 50 50 
    46 00:E5A5: 50 50 50 50   .DB $50,$50,$50,$50,$FC,$00,$00,$00 ; $D2
       00:E5A9: FC 00 00 00 
    47 00:E5AD: 10 10 10 10   .DB $10,$10,$10,$10,$FC,$00,$FC,$00 ; $D1
       00:E5B1: FC 00 FC 00 
    48 00:E5B5: 00 00 00 00   .DB $00,$00,$00,$00,$FC,$50,$50,$50 ; $D0
  Sun Nov 21 2021 15:13                                                                                                Page 24


       00:E5B9: FC 50 50 50 
    49 00:E5BD: 00 00 00 00   .DB $00,$00,$00,$00,$FC,$00,$FC,$10 ; $CF
       00:E5C1: FC 00 FC 10 
    50 00:E5C5: 50 50 50 50   .DB $50,$50,$50,$50,$DC,$00,$DC,$50 ; $CE
       00:E5C9: DC 00 DC 50 
    51 00:E5CD: 00 00 00 00   .DB $00,$00,$00,$00,$FC,$00,$FC,$00 ; $CD
       00:E5D1: FC 00 FC 00 
    52 00:E5D5: 50 50 50 50   .DB $50,$50,$50,$50,$5C,$40,$5C,$50 ; $CC
       00:E5D9: 5C 40 5C 50 
    53 00:E5DD: 50 50 50 50   .DB $50,$50,$50,$50,$DC,$00,$FC,$00 ; $CB
       00:E5E1: DC 00 FC 00 
    54 00:E5E5: 00 00 00 00   .DB $00,$00,$00,$00,$FC,$00,$DC,$50 ; $CA
       00:E5E9: FC 00 DC 50 
    55 00:E5ED: 50 50 50 50   .DB $50,$50,$50,$50,$5C,$40,$7C,$00 ; $C9
       00:E5F1: 5C 40 7C 00 
    56 00:E5F5: 00 00 00 00   .DB $00,$00,$00,$00,$7C,$40,$5C,$50 ; $C8
       00:E5F9: 7C 40 5C 50 
    57 00:E5FD: 50 50 50 50   .DB $50,$50,$50,$50,$5C,$50,$50,$50 ; $C7
       00:E601: 5C 50 50 50 
    58 00:E605: 10 10 10 10   .DB $10,$10,$10,$10,$1C,$10,$1C,$10 ; $C6
       00:E609: 1C 10 1C 10 
    59 00:E60D: 10 10 10 10   .DB $10,$10,$10,$10,$FC,$10,$10,$10 ; $C5
       00:E611: FC 10 10 10 
    60 00:E615: 00 00 00 00   .DB $00,$00,$00,$00,$FC,$00,$00,$00 ; $C4
       00:E619: FC 00 00 00 
    61 00:E61D: 10 10 10 10   .DB $10,$10,$10,$10,$1C,$10,$10,$10 ; $C3
       00:E621: 1C 10 10 10 
    62 00:E625: 10 10 10 10   .DB $10,$10,$10,$10,$FC,$00,$00,$00 ; $C2
       00:E629: FC 00 00 00 
    63 00:E62D: 00 00 00 00   .DB $00,$00,$00,$00,$FC,$10,$10,$10 ; $C1
       00:E631: FC 10 10 10 
    64 00:E635: 00 00 00 00   .DB $00,$00,$00,$00,$1C,$10,$10,$10 ; $C0
       00:E639: 1C 10 10 10 
    65 00:E63D: 10 10 10 10   .DB $10,$10,$10,$10,$F0,$00,$00,$00 ; $BF
       00:E641: F0 00 00 00 
    66 00:E645: 00 00 00 00   .DB $00,$00,$00,$00,$F0,$10,$F0,$10 ; $BE
       00:E649: F0 10 F0 10 
    67 00:E64D: 00 00 00 00   .DB $00,$00,$00,$00,$F0,$50,$50,$50 ; $BD
       00:E651: F0 50 50 50 
    68 00:E655: 00 00 00 00   .DB $00,$00,$00,$00,$F0,$10,$D0,$50 ; $BC
       00:E659: F0 10 D0 50 
    69 00:E65D: 50 50 50 50   .DB $50,$50,$50,$50,$D0,$10,$F0,$00 ; $BB
       00:E661: D0 10 F0 00 
    70 00:E665: 50 50 50 50   .DB $50,$50,$50,$50,$50,$50,$50,$50 ; $BA
       00:E669: 50 50 50 50 
    71 00:E66D: 50 50 50 50   .DB $50,$50,$50,$50,$D0,$10,$D0,$50 ; $B9
       00:E671: D0 10 D0 50 
    72 00:E675: 10 10 10 10   .DB $10,$10,$10,$10,$F0,$10,$F0,$00 ; $B8
       00:E679: F0 10 F0 00 
    73 00:E67D: 50 50 50 50   .DB $50,$50,$50,$50,$F0,$00,$00,$00 ; $B7
       00:E681: F0 00 00 00 
    74 00:E685: 50 50 50 50   .DB $50,$50,$50,$50,$D0,$50,$50,$50 ; $B6
       00:E689: D0 50 50 50 
    75 00:E68D: 10 10 10 10   .DB $10,$10,$10,$10,$F0,$10,$F0,$10 ; $B5
       00:E691: F0 10 F0 10 
    76 00:E695: 10 10 10 10   .DB $10,$10,$10,$10,$F0,$10,$10,$10 ; $B4
       00:E699: F0 10 10 10 
  Sun Nov 21 2021 15:13                                                                                                Page 25


    77 00:E69D: 10 10 10 10   .DB $10,$10,$10,$10,$10,$10,$10,$10 ; $B3
       00:E6A1: 10 10 10 10 
    78 00:E6A5: FC 54 FC A8   .DB $FC,$54,$FC,$A8,$FC,$54,$FC,$A8 ; $B2
       00:E6A9: FC 54 FC A8 
    79 00:E6AD: A8 54 A8 54   .DB $A8,$54,$A8,$54,$A8,$54,$A8,$54 ; $B1
       00:E6B1: A8 54 A8 54 
    80 00:E6B5: 00 A8 00 54   .DB $00,$A8,$00,$54,$00,$A8,$00,$54 ; $B0
       00:E6B9: 00 A8 00 54 
    81 00:E6BD: 00 00 00 48   .DB $00,$00,$00,$48,$24,$48,$00,$00 ; $AF
       00:E6C1: 24 48 00 00 
    82 00:E6C5: 00 00 00 24   .DB $00,$00,$00,$24,$48,$24,$00,$00 ; $AE
       00:E6C9: 48 24 00 00 
    83 00:E6CD: 00 10 38 38   .DB $00,$10,$38,$38,$10,$10,$00,$10 ; $AD
       00:E6D1: 10 10 00 10 
    84 00:E6D5: 00 04 1C 54   .DB $00,$04,$1C,$54,$2C,$50,$48,$40 ; $AC
       00:E6D9: 2C 50 48 40 
    85 00:E6DD: 00 1C 08 44   .DB $00,$1C,$08,$44,$38,$50,$48,$40 ; $AB
       00:E6E1: 38 50 48 40 
    86 00:E6E5: 00 00 00 04   .DB $00,$00,$00,$04,$04,$FC,$00,$00 ; $AA
       00:E6E9: 04 FC 00 00 
    87 00:E6ED: 00 00 40 40   .DB $00,$00,$40,$40,$40,$7C,$00,$00 ; $A9
       00:E6F1: 40 7C 00 00 
    88 00:E6F5: 00 38 44 40   .DB $00,$38,$44,$40,$30,$10,$00,$10 ; $A8
       00:E6F9: 30 10 00 10 
    89 00:E6FD: 00 78 48 48   .DB $00,$78,$48,$48,$48,$48,$78,$00 ; $A7
       00:E701: 48 48 78 00 
    90 00:E705: 78 FC FC FC   .DB $78,$FC,$FC,$FC,$FC,$FC,$FC,$78 ; $A6
       00:E709: FC FC FC 78 
    91 00:E70D: 00 30 78 78   .DB $00,$30,$78,$78,$78,$78,$30,$00 ; $A5
       00:E711: 78 78 30 00 
    92 00:E715: 00 30 48 48   .DB $00,$30,$48,$48,$48,$48,$30,$00 ; $A4
       00:E719: 48 48 30 00 
    93 00:E71D: 78 84 84 84   .DB $78,$84,$84,$84,$84,$84,$84,$78 ; $A3
       00:E721: 84 84 84 78 
    94 00:E725: 04 04 04 04   .DB $04,$04,$04,$04,$04,$04,$04,$04 ; $A2
       00:E729: 04 04 04 04 
    95 00:E72D: 08 08 08 08   .DB $08,$08,$08,$08,$08,$08,$08,$08 ; $A1
       00:E731: 08 08 08 08 
    96 00:E735: 20 20 20 20   .DB $20,$20,$20,$20,$20,$20,$20,$20 ; $A0
       00:E739: 20 20 20 20 
    97 00:E73D: 20 50 10 10   .DB $20,$50,$10,$10,$38,$10,$14,$08 ; $9F
       00:E741: 38 10 14 08 
    98 00:E745: 00 48 48 5C   .DB $00,$48,$48,$5C,$68,$50,$50,$60 ; $9E
       00:E749: 68 50 50 60 
    99 00:E74D: 00 10 7C 10   .DB $00,$10,$7C,$10,$7C,$10,$28,$44 ; $9D
       00:E751: 7C 10 28 44 
   100 00:E755: 00 5C 24 20   .DB $00,$5C,$24,$20,$78,$20,$24,$18 ; $9C
       00:E759: 78 20 24 18 
   101 00:E75D: 40 40 40 40   .DB $40,$40,$40,$40,$40,$40,$40,$40 ; $9B
       00:E761: 40 40 40 40 
   102 00:E765: 80 80 80 80   .DB $80,$80,$80,$80,$80,$80,$80,$80 ; $9A
       00:E769: 80 80 80 80 
   103 00:E76D: 00 00 00 00   .DB $00,$00,$00,$00,$04,$0C,$1C,$3C ; $99
       00:E771: 04 0C 1C 3C 
   104 00:E775: 00 00 00 00   .DB $00,$00,$00,$00,$80,$C0,$E0,$F0 ; $98
       00:E779: 80 C0 E0 F0 
   105 00:E77D: F0 E0 C0 80   .DB $F0,$E0,$C0,$80,$00,$00,$00,$00 ; $97
  Sun Nov 21 2021 15:13                                                                                                Page 26


       00:E781: 00 00 00 00 
   106 00:E785: 3C 1C 0C 04   .DB $3C,$1C,$0C,$04,$00,$00,$00,$00 ; $96
       00:E789: 00 00 00 00 
   107 00:E78D: 00 00 78 00   .DB $00,$00,$78,$00,$78,$00,$78,$00 ; $95
       00:E791: 78 00 78 00 
   108 00:E795: 00 00 54 54   .DB $00,$00,$54,$54,$54,$54,$54,$00 ; $94
       00:E799: 54 54 54 00 
   109 00:E79D: 00 00 00 00   .DB $00,$00,$00,$00,$00,$00,$00,$FC ; $93
       00:E7A1: 00 00 00 FC 
   110 00:E7A5: 00 00 00 00   .DB $00,$00,$00,$00,$00,$00,$FC,$00 ; $92
       00:E7A9: 00 00 FC 00 
   111 00:E7AD: 00 00 00 00   .DB $00,$00,$00,$00,$00,$FC,$00,$00 ; $91
       00:E7B1: 00 FC 00 00 
   112 00:E7B5: 00 00 00 FC   .DB $00,$00,$00,$FC,$00,$00,$00,$00 ; $90
       00:E7B9: 00 00 00 00 
   113 00:E7BD: 00 00 FC 00   .DB $00,$00,$FC,$00,$00,$00,$00,$00 ; $8F
       00:E7C1: 00 00 00 00 
   114 00:E7C5: 00 FC 00 00   .DB $00,$FC,$00,$00,$00,$00,$00,$00 ; $8E
       00:E7C9: 00 00 00 00 
   115 00:E7CD: 1C 1C 1C 1C   .DB $1C,$1C,$1C,$1C,$FC,$FC,$FC,$FC ; $8D
       00:E7D1: FC FC FC FC 
   116 00:E7D5: E0 E0 E0 E0   .DB $E0,$E0,$E0,$E0,$FC,$FC,$FC,$FC ; $8C
       00:E7D9: FC FC FC FC 
   117 00:E7DD: FC FC FC FC   .DB $FC,$FC,$FC,$FC,$E0,$E0,$E0,$E0 ; $8B
       00:E7E1: E0 E0 E0 E0 
   118 00:E7E5: FC FC FC FC   .DB $FC,$FC,$FC,$FC,$1C,$1C,$1C,$1C ; $8A
       00:E7E9: 1C 1C 1C 1C 
   119 00:E7ED: 00 00 00 00   .DB $00,$00,$00,$00,$1C,$1C,$1C,$1C ; $89
       00:E7F1: 1C 1C 1C 1C 
   120 00:E7F5: E0 E0 E0 E0   .DB $E0,$E0,$E0,$E0,$00,$00,$00,$00 ; $88
       00:E7F9: 00 00 00 00 
   121 00:E7FD: 00 00 00 00   .DB $00,$00,$00,$00,$1C,$1C,$1C,$1C ; $87
       00:E801: 1C 1C 1C 1C 
   122 00:E805: 00 00 00 00   .DB $00,$00,$00,$00,$E0,$E0,$E0,$E0 ; $86
       00:E809: E0 E0 E0 E0 
   123 00:E80D: 00 F8 FC FC   .DB $00,$F8,$FC,$FC,$FC,$FC,$F8,$00 ; $85
       00:E811: FC FC F8 00 
   124 00:E815: 00 FC FC FC   .DB $00,$FC,$FC,$FC,$FC,$FC,$FC,$00 ; $84
       00:E819: FC FC FC 00 
   125 00:E81D: 00 3C 7C 7C   .DB $00,$3C,$7C,$7C,$7C,$7C,$3C,$00 ; $83
       00:E821: 7C 7C 3C 00 
   126 00:E825: 38 7C 7C 7C   .DB $38,$7C,$7C,$7C,$7C,$7C,$7C,$7C ; $82
       00:E829: 7C 7C 7C 7C 
   127 00:E82D: 7C 7C 7C 7C   .DB $7C,$7C,$7C,$7C,$7C,$7C,$7C,$7C ; $81
       00:E831: 7C 7C 7C 7C 
   128 00:E835: 7C 7C 7C 7C   .DB $7C,$7C,$7C,$7C,$7C,$7C,$7C,$38 ; $80
       00:E839: 7C 7C 7C 38 
   129 00:E83D: 00 00 7C 44   .DB $00,$00,$7C,$44,$44,$6C,$38,$10 ; $7F
       00:E841: 44 6C 38 10 
   130 00:E845: 00 00 00 00   .DB $00,$00,$00,$00,$00,$00,$50,$28 ; $7E
       00:E849: 00 00 50 28 
   131 00:E84D: 00 30 08 08   .DB $00,$30,$08,$08,$0C,$08,$08,$30 ; $7D
       00:E851: 0C 08 08 30 
   132 00:E855: 00 10 10 10   .DB $00,$10,$10,$10,$00,$10,$10,$10 ; $7C
       00:E859: 00 10 10 10 
   133 00:E85D: 00 18 20 20   .DB $00,$18,$20,$20,$60,$20,$20,$18 ; $7B
       00:E861: 60 20 20 18 
  Sun Nov 21 2021 15:13                                                                                                Page 27


   134 00:E865: 00 78 40 30   .DB $00,$78,$40,$30,$08,$78,$00,$00 ; $7A
       00:E869: 08 78 00 00 
   135 00:E86D: 60 10 38 48   .DB $60,$10,$38,$48,$48,$48,$00,$00 ; $79
       00:E871: 48 48 00 00 
   136 00:E875: 00 48 48 30   .DB $00,$48,$48,$30,$48,$48,$00,$00 ; $78
       00:E879: 48 48 00 00 
   137 00:E87D: 00 28 7C 54   .DB $00,$28,$7C,$54,$44,$44,$00,$00 ; $77
       00:E881: 44 44 00 00 
   138 00:E885: 00 10 28 44   .DB $00,$10,$28,$44,$44,$44,$00,$00 ; $76
       00:E889: 44 44 00 00 
   139 00:E88D: 00 28 58 48   .DB $00,$28,$58,$48,$48,$48,$00,$00 ; $75
       00:E891: 48 48 00 00 
   140 00:E895: 00 10 28 20   .DB $00,$10,$28,$20,$20,$78,$20,$00 ; $74
       00:E899: 20 78 20 00 
   141 00:E89D: 00 38 04 38   .DB $00,$38,$04,$38,$40,$38,$00,$00 ; $73
       00:E8A1: 40 38 00 00 
   142 00:E8A5: 00 70 20 20   .DB $00,$70,$20,$20,$24,$58,$00,$00 ; $72
       00:E8A9: 24 58 00 00 
   143 00:E8AD: 04 3C 44 44   .DB $04,$3C,$44,$44,$44,$3C,$00,$00 ; $71
       00:E8B1: 44 3C 00 00 
   144 00:E8B5: 40 78 44 44   .DB $40,$78,$44,$44,$44,$78,$00,$00 ; $70
       00:E8B9: 44 78 00 00 
   145 00:E8BD: 00 38 44 44   .DB $00,$38,$44,$44,$44,$38,$00,$00 ; $6F
       00:E8C1: 44 38 00 00 
   146 00:E8C5: 00 48 48 48   .DB $00,$48,$48,$48,$48,$70,$00,$00 ; $6E
       00:E8C9: 48 70 00 00 
   147 00:E8CD: 00 44 44 54   .DB $00,$44,$44,$54,$54,$68,$00,$00 ; $6D
       00:E8D1: 54 68 00 00 
   148 00:E8D5: 00 18 10 10   .DB $00,$18,$10,$10,$10,$10,$10,$10 ; $6C
       00:E8D9: 10 10 10 10 
   149 00:E8DD: 00 48 50 60   .DB $00,$48,$50,$60,$50,$48,$40,$40 ; $6B
       00:E8E1: 50 48 40 40 
   150 00:E8E5: 30 48 08 08   .DB $30,$48,$08,$08,$08,$18,$00,$08 ; $6A
       00:E8E9: 08 18 00 08 
   151 00:E8ED: 00 18 10 10   .DB $00,$18,$10,$10,$10,$10,$00,$10 ; $69
       00:E8F1: 10 10 00 10 
   152 00:E8F5: 00 48 48 48   .DB $00,$48,$48,$48,$48,$70,$40,$40 ; $68
       00:E8F9: 48 70 40 40 
   153 00:E8FD: 38 04 3C 44   .DB $38,$04,$3C,$44,$44,$3C,$00,$00 ; $67
       00:E901: 44 3C 00 00 
   154 00:E905: 00 20 20 20   .DB $00,$20,$20,$20,$78,$20,$20,$18 ; $66
       00:E909: 78 20 20 18 
   155 00:E90D: 00 38 40 78   .DB $00,$38,$40,$78,$44,$38,$00,$00 ; $65
       00:E911: 44 38 00 00 
   156 00:E915: 00 3C 44 44   .DB $00,$3C,$44,$44,$44,$3C,$04,$04 ; $64
       00:E919: 44 3C 04 04 
   157 00:E91D: 00 38 44 40   .DB $00,$38,$44,$40,$44,$38,$00,$00 ; $63
       00:E921: 44 38 00 00 
   158 00:E925: 00 78 44 44   .DB $00,$78,$44,$44,$44,$78,$40,$40 ; $62
       00:E929: 44 78 40 40 
   159 00:E92D: 00 3C 44 3C   .DB $00,$3C,$44,$3C,$04,$38,$00,$00 ; $61
       00:E931: 04 38 00 00 
   160 00:E935: 00 00 00 00   .DB $00,$00,$00,$00,$00,$10,$30,$30 ; $60
       00:E939: 00 10 30 30 
   161 00:E93D: FC 00 00 00   .DB $FC,$00,$00,$00,$00,$00,$00,$00 ; $5F
       00:E941: 00 00 00 00 
   162 00:E945: 00 00 00 00   .DB $00,$00,$00,$00,$00,$44,$28,$10 ; $5E
  Sun Nov 21 2021 15:13                                                                                                Page 28


       00:E949: 00 44 28 10 
   163 00:E94D: 00 38 08 08   .DB $00,$38,$08,$08,$08,$08,$08,$38 ; $5D
       00:E951: 08 08 08 38 
   164 00:E955: 00 00 04 08   .DB $00,$00,$04,$08,$10,$20,$40,$00 ; $5C
       00:E959: 10 20 40 00 
   165 00:E95D: 00 38 20 20   .DB $00,$38,$20,$20,$20,$20,$20,$38 ; $5B
       00:E961: 20 20 20 38 
   166 00:E965: 00 78 40 40   .DB $00,$78,$40,$40,$20,$10,$08,$78 ; $5A
       00:E969: 20 10 08 78 
   167 00:E96D: 00 10 10 10   .DB $00,$10,$10,$10,$28,$44,$44,$44 ; $59
       00:E971: 28 44 44 44 
   168 00:E975: 00 44 44 28   .DB $00,$44,$44,$28,$10,$28,$44,$44 ; $58
       00:E979: 10 28 44 44 
   169 00:E97D: 00 28 54 54   .DB $00,$28,$54,$54,$54,$54,$44,$44 ; $57
       00:E981: 54 54 44 44 
   170 00:E985: 00 10 28 44   .DB $00,$10,$28,$44,$44,$44,$44,$44 ; $56
       00:E989: 44 44 44 44 
   171 00:E98D: 00 38 44 44   .DB $00,$38,$44,$44,$44,$44,$44,$44 ; $55
       00:E991: 44 44 44 44 
   172 00:E995: 00 10 10 10   .DB $00,$10,$10,$10,$10,$10,$10,$7C ; $54
       00:E999: 10 10 10 7C 
   173 00:E99D: 00 38 44 04   .DB $00,$38,$44,$04,$38,$40,$44,$38 ; $53
       00:E9A1: 38 40 44 38 
   174 00:E9A5: 00 44 44 48   .DB $00,$44,$44,$48,$78,$44,$44,$78 ; $52
       00:E9A9: 78 44 44 78 
   175 00:E9AD: 00 34 48 54   .DB $00,$34,$48,$54,$44,$44,$44,$38 ; $51
       00:E9B1: 44 44 44 38 
   176 00:E9B5: 00 40 40 40   .DB $00,$40,$40,$40,$78,$44,$44,$78 ; $50
       00:E9B9: 78 44 44 78 
   177 00:E9BD: 00 38 44 44   .DB $00,$38,$44,$44,$44,$44,$44,$38 ; $4F
       00:E9C1: 44 44 44 38 
   178 00:E9C5: 00 44 44 44   .DB $00,$44,$44,$44,$4C,$54,$64,$44 ; $4E
       00:E9C9: 4C 54 64 44 
   179 00:E9CD: 00 44 44 44   .DB $00,$44,$44,$44,$44,$54,$6C,$44 ; $4D
       00:E9D1: 44 54 6C 44 
   180 00:E9D5: 00 7C 40 40   .DB $00,$7C,$40,$40,$40,$40,$40,$40 ; $4C
       00:E9D9: 40 40 40 40 
   181 00:E9DD: 00 44 48 50   .DB $00,$44,$48,$50,$60,$50,$48,$44 ; $4B
       00:E9E1: 60 50 48 44 
   182 00:E9E5: 00 38 44 44   .DB $00,$38,$44,$44,$04,$04,$04,$04 ; $4A
       00:E9E9: 04 04 04 04 
   183 00:E9ED: 00 38 10 10   .DB $00,$38,$10,$10,$10,$10,$10,$38 ; $49
       00:E9F1: 10 10 10 38 
   184 00:E9F5: 00 44 44 44   .DB $00,$44,$44,$44,$7C,$44,$44,$44 ; $48
       00:E9F9: 7C 44 44 44 
   185 00:E9FD: 00 3C 44 44   .DB $00,$3C,$44,$44,$5C,$40,$44,$38 ; $47
       00:EA01: 5C 40 44 38 
   186 00:EA05: 00 40 40 40   .DB $00,$40,$40,$40,$78,$40,$40,$7C ; $46
       00:EA09: 78 40 40 7C 
   187 00:EA0D: 00 7C 40 40   .DB $00,$7C,$40,$40,$78,$40,$40,$7C ; $45
       00:EA11: 78 40 40 7C 
   188 00:EA15: 00 78 44 44   .DB $00,$78,$44,$44,$44,$44,$44,$78 ; $44
       00:EA19: 44 44 44 78 
   189 00:EA1D: 00 38 44 40   .DB $00,$38,$44,$40,$40,$40,$44,$38 ; $43
       00:EA21: 40 40 44 38 
   190 00:EA25: 00 78 44 44   .DB $00,$78,$44,$44,$78,$44,$44,$78 ; $42
       00:EA29: 78 44 44 78 
  Sun Nov 21 2021 15:13                                                                                                Page 29


   191 00:EA2D: 00 44 44 7C   .DB $00,$44,$44,$7C,$44,$44,$44,$38 ; $41
       00:EA31: 44 44 44 38 
   192 00:EA35: 00 38 40 5C   .DB $00,$38,$40,$5C,$54,$5C,$44,$38 ; $40
       00:EA39: 54 5C 44 38 
   193 00:EA3D: 00 10 00 10   .DB $00,$10,$00,$10,$18,$04,$44,$38 ; $3F
       00:EA41: 18 04 44 38 
   194 00:EA45: 00 20 10 08   .DB $00,$20,$10,$08,$04,$08,$10,$20 ; $3E
       00:EA49: 04 08 10 20 
   195 00:EA4D: 00 00 7C 00   .DB $00,$00,$7C,$00,$00,$7C,$00,$00 ; $3D
       00:EA51: 00 7C 00 00 
   196 00:EA55: 00 08 10 20   .DB $00,$08,$10,$20,$40,$20,$10,$08 ; $3C
       00:EA59: 40 20 10 08 
   197 00:EA5D: 20 30 30 00   .DB $20,$30,$30,$00,$30,$30,$00,$00 ; $3B
       00:EA61: 30 30 00 00 
   198 00:EA65: 00 30 30 00   .DB $00,$30,$30,$00,$30,$30,$00,$00 ; $3A
       00:EA69: 30 30 00 00 
   199 00:EA6D: 00 30 08 04   .DB $00,$30,$08,$04,$3C,$44,$44,$38 ; $39
       00:EA71: 3C 44 44 38 
   200 00:EA75: 00 38 44 44   .DB $00,$38,$44,$44,$38,$44,$44,$38 ; $38
       00:EA79: 38 44 44 38 
   201 00:EA7D: 00 20 20 20   .DB $00,$20,$20,$20,$10,$08,$04,$7C ; $37
       00:EA81: 10 08 04 7C 
   202 00:EA85: 00 38 44 44   .DB $00,$38,$44,$44,$78,$40,$20,$18 ; $36
       00:EA89: 78 40 20 18 
   203 00:EA8D: 00 38 44 04   .DB $00,$38,$44,$04,$78,$40,$40,$7C ; $35
       00:EA91: 78 40 40 7C 
   204 00:EA95: 00 08 08 7C   .DB $00,$08,$08,$7C,$48,$28,$18,$08 ; $34
       00:EA99: 48 28 18 08 
   205 00:EA9D: 00 38 44 04   .DB $00,$38,$44,$04,$38,$04,$44,$38 ; $33
       00:EAA1: 38 04 44 38 
   206 00:EAA5: 00 7C 40 20   .DB $00,$7C,$40,$20,$18,$04,$44,$38 ; $32
       00:EAA9: 18 04 44 38 
   207 00:EAAD: 00 38 10 10   .DB $00,$38,$10,$10,$10,$10,$30,$10 ; $31
       00:EAB1: 10 10 30 10 
   208 00:EAB5: 00 38 44 64   .DB $00,$38,$44,$64,$54,$4C,$44,$38 ; $30
       00:EAB9: 54 4C 44 38 
   209 00:EABD: 00 00 40 20   .DB $00,$00,$40,$20,$10,$08,$04,$00 ; $2F
       00:EAC1: 10 08 04 00 
   210 00:EAC5: 00 30 30 00   .DB $00,$30,$30,$00,$00,$00,$00,$00 ; $2E
       00:EAC9: 00 00 00 00 
   211 00:EACD: 00 00 00 00   .DB $00,$00,$00,$00,$7C,$00,$00,$00 ; $2D
       00:EAD1: 7C 00 00 00 
   212 00:EAD5: 20 30 30 00   .DB $20,$30,$30,$00,$00,$00,$00,$00 ; $2C
       00:EAD9: 00 00 00 00 
   213 00:EADD: 00 00 10 10   .DB $00,$00,$10,$10,$7C,$10,$10,$00 ; $2B
       00:EAE1: 7C 10 10 00 
   214 00:EAE5: 00 00 28 38   .DB $00,$00,$28,$38,$7C,$38,$28,$00 ; $2A
       00:EAE9: 7C 38 28 00 
   215 00:EAED: 00 20 10 10   .DB $00,$20,$10,$10,$10,$10,$10,$20 ; $29
       00:EAF1: 10 10 10 20 
   216 00:EAF5: 00 10 20 20   .DB $00,$10,$20,$20,$20,$20,$20,$10 ; $28
       00:EAF9: 20 20 20 10 
   217 00:EAFD: 00 00 00 00   .DB $00,$00,$00,$00,$00,$20,$30,$30 ; $27
       00:EB01: 00 20 30 30 
   218 00:EB05: 00 34 48 54   .DB $00,$34,$48,$54,$20,$50,$50,$20 ; $26
       00:EB09: 20 50 50 20 
   219 00:EB0D: 00 4C 4C 20   .DB $00,$4C,$4C,$20,$10,$08,$64,$64 ; $25
  Sun Nov 21 2021 15:13                                                                                                Page 30


       00:EB11: 10 08 64 64 
   220 00:EB15: 00 10 70 08   .DB $00,$10,$70,$08,$30,$40,$38,$20 ; $24
       00:EB19: 30 40 38 20 
   221 00:EB1D: 00 28 7C 28   .DB $00,$28,$7C,$28,$28,$7C,$28,$00 ; $23
       00:EB21: 28 7C 28 00 
   222 00:EB25: 00 00 00 00   .DB $00,$00,$00,$00,$00,$48,$6C,$6C ; $22
       00:EB29: 00 48 6C 6C 
   223 00:EB2D: 00 10 00 10   .DB $00,$10,$00,$10,$10,$38,$38,$10 ; $21
       00:EB31: 10 38 38 10 
   224 00:EB35: 00 00 00 00   .DB $00,$00,$00,$00,$00,$00,$00,$00 ; $20
       00:EB39: 00 00 00 00 
   225 00:EB3D: 00 00 10 10   .DB $00,$00,$10,$10,$38,$38,$7C,$7C ; $1F
       00:EB41: 38 38 7C 7C 
   226 00:EB45: 00 00 7C 7C   .DB $00,$00,$7C,$7C,$38,$38,$10,$10 ; $1E
       00:EB49: 38 38 10 10 
   227 00:EB4D: 00 00 28 28   .DB $00,$00,$28,$28,$7C,$28,$28,$00 ; $1D
       00:EB51: 7C 28 28 00 
   228 00:EB55: 00 7C 40 40   .DB $00,$7C,$40,$40,$40,$00,$00,$00 ; $1C
       00:EB59: 40 00 00 00 
   229 00:EB5D: 00 00 10 30   .DB $00,$00,$10,$30,$7C,$30,$10,$00 ; $1B
       00:EB61: 7C 30 10 00 
   230 00:EB65: 00 00 10 18   .DB $00,$00,$10,$18,$7C,$18,$10,$00 ; $1A
       00:EB69: 7C 18 10 00 
   231 00:EB6D: 00 10 38 7C   .DB $00,$10,$38,$7C,$10,$10,$10,$10 ; $19
       00:EB71: 10 10 10 10 
   232 00:EB75: 00 10 10 10   .DB $00,$10,$10,$10,$10,$7C,$38,$10 ; $18
       00:EB79: 10 7C 38 10 
   233 00:EB7D: 38 10 38 7C   .DB $38,$10,$38,$7C,$10,$7C,$38,$10 ; $17
       00:EB81: 10 7C 38 10 
   234 00:EB85: 00 78 78 00   .DB $00,$78,$78,$00,$00,$00,$00,$00 ; $16
       00:EB89: 00 00 00 00 
   235 00:EB8D: 00 38 44 18   .DB $00,$38,$44,$18,$28,$30,$44,$38 ; $15
       00:EB91: 28 30 44 38 
   236 00:EB95: 00 14 14 14   .DB $00,$14,$14,$14,$34,$54,$54,$3C ; $14
       00:EB99: 34 54 54 3C 
   237 00:EB9D: 00 28 00 28   .DB $00,$28,$00,$28,$28,$28,$28,$28 ; $13
       00:EBA1: 28 28 28 28 
   238 00:EBA5: 00 10 38 7C   .DB $00,$10,$38,$7C,$10,$7C,$38,$10 ; $12
       00:EBA9: 10 7C 38 10 
   239 00:EBAD: 00 08 18 38   .DB $00,$08,$18,$38,$78,$38,$18,$08 ; $11
       00:EBB1: 78 38 18 08 
   240 00:EBB5: 00 20 30 38   .DB $00,$20,$30,$38,$3C,$38,$30,$20 ; $10
       00:EBB9: 3C 38 30 20 
   241 00:EBBD: 00 10 54 38   .DB $00,$10,$54,$38,$10,$38,$54,$10 ; $0F
       00:EBC1: 10 38 54 10 
   242 00:EBC5: 00 60 6C 2C   .DB $00,$60,$6C,$2C,$34,$2C,$34,$0C ; $0E
       00:EBC9: 34 2C 34 0C 
   243 00:EBCD: 00 60 70 30   .DB $00,$60,$70,$30,$10,$14,$18,$10 ; $0D
       00:EBD1: 10 14 18 10 
   244 00:EBD5: 00 10 38 10   .DB $00,$10,$38,$10,$38,$44,$44,$38 ; $0C
       00:EBD9: 38 44 44 38 
   245 00:EBDD: 00 30 48 48   .DB $00,$30,$48,$48,$34,$0C,$1C,$00 ; $0B
       00:EBE1: 34 0C 1C 00 
   246 00:EBE5: FC FC 84 B4   .DB $FC,$FC,$84,$B4,$B4,$84,$FC,$FC ; $0A
       00:EBE9: B4 84 FC FC 
   247 00:EBED: 00 00 78 48   .DB $00,$00,$78,$48,$48,$78,$00,$00 ; $09
       00:EBF1: 48 78 00 00 
  Sun Nov 21 2021 15:13                                                                                                Page 31


   248 00:EBF5: FC FC FC CC   .DB $FC,$FC,$FC,$CC,$CC,$FC,$FC,$FC ; $08
       00:EBF9: CC FC FC FC 
   249 00:EBFD: 00 00 00 30   .DB $00,$00,$00,$30,$30,$00,$00,$00 ; $07
       00:EC01: 30 00 00 00 
   250 00:EC05: 00 38 10 7C   .DB $00,$38,$10,$7C,$7C,$38,$10,$00 ; $06
       00:EC09: 7C 38 10 00 
   251 00:EC0D: 00 10 7C 7C   .DB $00,$10,$7C,$7C,$10,$38,$38,$10 ; $05
       00:EC11: 10 38 38 10 
   252 00:EC15: 00 10 38 7C   .DB $00,$10,$38,$7C,$7C,$38,$10,$00 ; $04
       00:EC19: 7C 38 10 00 
   253 00:EC1D: 00 10 38 7C   .DB $00,$10,$38,$7C,$7C,$7C,$28,$00 ; $03
       00:EC21: 7C 7C 28 00 
   254 00:EC25: 00 38 7C 44   .DB $00,$38,$7C,$44,$7C,$54,$7C,$38 ; $02
       00:EC29: 7C 54 7C 38 
   255 00:EC2D: 00 38 44 54   .DB $00,$38,$44,$54,$44,$6C,$44,$38 ; $01
       00:EC31: 44 6C 44 38 
   256 00:EC35: 00 00 00 00   .DB $00,$00,$00,$00,$00,$00,$00,$00 ; $00
       00:EC39: 00 00 00 00 
   257                        FONT_TMS_END:
   643                        
   644                        
   645                        ;_________________________________________________________________________________________________
                    __
   646                        ; Initialize Keyboard
   647                        ;_________________________________________________________________________________________________
                    __
   648                        
   649                        INITKEYBOARD:
   650 00:EC3D: 08               PHP
   651 00:EC3E: E2 30            SEP #$30 				; NEED 8 bit ACCUMULATOR & INDEX
   652                            LONGA Off              	;
   653                            LONGI Off              	;
   654 00:EC40: 48               pha
   655 00:EC41: A9 F0            LDA #$F0
   656 00:EC43: 8D 32 03         STA LEDS
   657 00:EC46: A9 00            lda #00
   658 00:EC48: 8D 33 03         sta KeyLock
   659 00:EC4B: 68               pla
   660 00:EC4C: 28               plp
   661 00:EC4D: 60               RTS
   662                        
   663                        ;_________________________________________________________________________________________________
                    __
   664                        ; Get a key from Keyboard
   665                        ;
   666                        ; Returns Key in A
   667                        ;_________________________________________________________________________________________________
                    __
   668                        
   669                        GetKey:
   670 00:EC4E: 08               PHP
   671 00:EC4F: E2 30            SEP #$30 				; NEED 8 bit ACCUMULATOR & INDEX
   672                            LONGA Off              	;
   673                            LONGI Off              	;
   674 00:EC51: DA               phx
   675 00:EC52: 5A               phy
   676                        
  Sun Nov 21 2021 15:13                                                                                                Page 32


   677                        GetKey_Loop:
   678 00:EC53: 20 99 EE         jsr kbdDelay16ms
   679 00:EC56: 20 80 EC         jsr ScanKeyboard
   680 00:EC59: C9 FF            cmp #$FF
   681 00:EC5B: F0 F6            beq GetKey_Loop
   682 00:EC5D: 8D 37 03         sta TEMP+1
   683 00:EC60: 20 F7 EC         jsr ModifierKeyCheck
   684 00:EC63: 8D 34 03         sta ScannedKey
   685                        GetKey_loop1:
   686 00:EC66: 20 80 EC         jsr ScanKeyboard
   687 00:EC69: CD 37 03         cmp TEMP+1
   688 00:EC6C: F0 F8            beq GetKey_loop1
   689 00:EC6E: AD 34 03         LDA ScannedKey
   690 00:EC71: 20 33 ED         jsr DecodeKeyboard
   691                        
   692 00:EC74: C9 FF            cmp #$FF
   693 00:EC76: F0 DB            beq GetKey_Loop
   694 00:EC78: C9 00            cmp #$00
   695 00:EC7A: F0 D7            beq GetKey_Loop
   696 00:EC7C: 7A               ply
   697 00:EC7D: FA               plx
   698 00:EC7E: 28               plp
   699 00:EC7F: 60               rts
   700                        
   701                        
   702                        ;_________________________________________________________________________________________________
                    __
   703                        ; Scan Keyboard
   704                        ;
   705                        ; Returns Scancode in A
   706                        ;
   707                        ;_________________________________________________________________________________________________
                    __
   708                        ScanKeyboard:
   709 00:EC80: 08               PHP
   710 00:EC81: E2 30            SEP #$30 				; NEED 8 bit ACCUMULATOR & INDEX
   711                            LONGA Off              	;
   712                            LONGI Off              	;
   713 00:EC83: DA           	phx
   714 00:EC84: 5A           	phy
   715 00:EC85: A9 FF        	lda	#$ff		; SET OUTPUT DIRECTION
   716 00:EC87: 8D 22 FE     	sta	via2ddrb	; write value
   717 00:EC8A: A9 00        	lda	#$00		; SET INPUT DIRECTION
   718 00:EC8C: 8D 23 FE     	sta	via2ddra	; write value
   719                        
   720 00:EC8F: A0 00        	ldy	#$00		; SET ROW AND LEDS
   721                        outerScanLoop:
   722 00:EC91: C0 09            cpy #09
   723 00:EC93: F0 40            beq KeyNotFound
   724 00:EC95: 8C 36 03         sty TEMP
   725 00:EC98: AD 32 03         lda LEDS
   726 00:EC9B: 0D 36 03         ora TEMP
   727 00:EC9E: 8D 20 FE         sta	via2regb	; write value
   728                        innerScanLoop:
   729 00:ECA1: AD 21 FE         lda	via2rega	; read value
   730 00:ECA4: A2 00            ldx #$00
   731 00:ECA6: C9 FF            cmp #$FF        ;NO KEY PRESSED
  Sun Nov 21 2021 15:13                                                                                                Page 33


   732 00:ECA8: F0 27            BEQ exitInnerScanLoop
   733 00:ECAA: C9 FE            cmp #$FE        ; COL 1 key Pressed
   734 00:ECAC: F0 2D            beq keyFound
   735 00:ECAE: E8               inx
   736 00:ECAF: C9 FD            cmp #$FD        ; COL 2 key Pressed
   737 00:ECB1: F0 28            beq keyFound
   738 00:ECB3: E8               inx
   739 00:ECB4: C9 FB            cmp #$FB        ; COL 3 key Pressed
   740 00:ECB6: F0 23            beq keyFound
   741 00:ECB8: E8               inx
   742 00:ECB9: C9 F7            cmp #$F7        ; COL 4 key Pressed
   743 00:ECBB: F0 1E            beq keyFound
   744 00:ECBD: E8               inx
   745 00:ECBE: C9 EF            cmp #$EF        ; COL 5 key Pressed
   746 00:ECC0: F0 19            beq keyFound
   747 00:ECC2: E8               inx
   748 00:ECC3: C9 DF            cmp #$DF        ; COL 6 key Pressed
   749 00:ECC5: F0 14            beq keyFound
   750 00:ECC7: E8               inx
   751 00:ECC8: C9 BF            cmp #$BF        ; COL 7 key Pressed
   752 00:ECCA: F0 0F            beq keyFound
   753 00:ECCC: E8               inx
   754 00:ECCD: C9 7F            cmp #$7F        ; COL 8 key Pressed
   755 00:ECCF: F0 0A            beq keyFound
   756                        exitInnerScanLoop:
   757 00:ECD1: C8               iny
   758 00:ECD2: 4C 91 EC         jmp outerScanLoop
   759                        KeyNotFound:
   760 00:ECD5: A9 FF            lda #$FF
   761 00:ECD7: 7A               ply
   762 00:ECD8: FA               plx
   763 00:ECD9: 28               plp
   764 00:ECDA: 60               rts
   765                        keyFound:
   766 00:ECDB: 8E 36 03         stx TEMP
   767 00:ECDE: 98               tya
   768 00:ECDF: 18               CLC
   769 00:ECE0: 0A               ASL
   770 00:ECE1: 0A               ASL
   771 00:ECE2: 0A               ASL
   772 00:ECE3: 18               CLC
   773 00:ECE4: 6D 36 03         ADC TEMP
   774 00:ECE7: C9 30            cmp #48
   775 00:ECE9: F0 EA            beq KeyNotFound
   776 00:ECEB: C9 31            cmp #49
   777 00:ECED: F0 E6            beq KeyNotFound
   778 00:ECEF: C9 32            cmp #50
   779 00:ECF1: F0 E2            beq KeyNotFound
   780 00:ECF3: 7A               ply
   781 00:ECF4: FA               plx
   782 00:ECF5: 28               plp
   783 00:ECF6: 60               rts
   784                        
   785                        ;_________________________________________________________________________________________________
                    __
   786                        ; Check for Modifier keys (Shift, Control, Graph/Alt)
   787                        ; Requires Scancode in A
  Sun Nov 21 2021 15:13                                                                                                Page 34


   788                        ; Returns modified Scancode in A
   789                        ;
   790                        ;_________________________________________________________________________________________________
                    __
   791                        ModifierKeyCheck:
   792 00:ECF7: 08               PHP
   793 00:ECF8: E2 30            SEP #$30 				; NEED 8 bit ACCUMULATOR & INDEX
   794                            LONGA Off              	;
   795                            LONGI Off              	;
   796 00:ECFA: 48               pha
   797                        ; Check for Modifiers
   798 00:ECFB: AD 32 03         lda LEDS
   799 00:ECFE: 09 06            ora #06
   800 00:ED00: 8D 20 FE         sta	via2regb	; write value
   801 00:ED03: AD 21 FE         lda	via2rega	; read value
   802 00:ED06: C9 FF            cmp #$FF        	;NO KEY PRESSED
   803 00:ED08: F0 26            BEQ exit_Scan
   804 00:ED0A: C9 FE            cmp #$FE        	; COL 1 key Pressed
   805 00:ED0C: D0 06            bne check_Ctrl
   806 00:ED0E: 68               pla
   807 00:ED0F: 18               clc
   808 00:ED10: 69 48            adc #72
   809 00:ED12: 28               plp
   810 00:ED13: 60               rts
   811                        check_Ctrl:
   812 00:ED14: C9 FD            cmp #$FD        ; COL 2 key Pressed
   813 00:ED16: D0 0A            bne check_Graph
   814 00:ED18: 68               pla
   815 00:ED19: C9 30            cmp #48
   816 00:ED1B: B0 03            bcs skip_Ctrl
   817 00:ED1D: 18               clc
   818 00:ED1E: 69 90            adc #144
   819                        skip_Ctrl:
   820 00:ED20: 28               plp
   821 00:ED21: 60               rts
   822                        check_Graph:
   823 00:ED22: C9 FB            cmp #$FB        ; COL 3 key Pressed
   824 00:ED24: D0 0A            bne exit_Scan
   825                        check_Graph1:
   826 00:ED26: 68               pla
   827 00:ED27: C9 30            cmp #48
   828 00:ED29: B0 F5            bcs skip_Ctrl
   829 00:ED2B: 18               clc
   830 00:ED2C: 69 C0            adc #192
   831 00:ED2E: 28               plp
   832 00:ED2F: 60               rts
   833                        exit_Scan:
   834 00:ED30: 68               pla
   835 00:ED31: 28               plp
   836 00:ED32: 60               rts
   837                        
   838                        
   839                        ;_________________________________________________________________________________________________
                    __
   840                        ; Decode Keyboard
   841                        ;
   842                        ; Scancode in A
  Sun Nov 21 2021 15:13                                                                                                Page 35


   843                        ; Returns Decoded Ascii in A
   844                        ;
   845                        ;_________________________________________________________________________________________________
                    __
   846                        DecodeKeyboard:
   847 00:ED33: 08               PHP
   848 00:ED34: E2 30            SEP #$30 				; NEED 8 bit ACCUMULATOR & INDEX
   849                            LONGA Off              	;
   850                            LONGI Off              	;
   851 00:ED36: DA               phx
   852 00:ED37: C9 33            cmp #51     ; is CapsLock
   853 00:ED39: F0 17            beq is_CapsLock
   854 00:ED3B: C9 34            cmp #52     ; is graphLock?
   855 00:ED3D: F0 4A            beq is_GraphLock
   856 00:ED3F: C9 30            cmp #48
   857 00:ED41: B0 08            bcs skip_Lock
   858 00:ED43: C9 16            cmp #22
   859 00:ED45: 90 04            bcc skip_Lock
   860 00:ED47: 18               CLC
   861 00:ED48: 6D 33 03         ADC KeyLock
   862                        skip_Lock:
   863 00:ED4B: AA               tax
   864 00:ED4C: BD A9 ED         LDA DecodeTable,X
   865 00:ED4F: FA               plx
   866 00:ED50: 28               plp
   867 00:ED51: 60               RTS
   868                        is_CapsLock:
   869                        ; check for toggle and set LEDs
   870 00:ED52: AD 32 03         lda LEDS
   871 00:ED55: 29 10            AND #$10
   872 00:ED57: C9 00            cmp #$00
   873 00:ED59: F0 17            beq Cap_off
   874 00:ED5B: AD 32 03         lda LEDS
   875 00:ED5E: 29 C0            and #$C0
   876 00:ED60: 09 20            ora #$20
   877 00:ED62: 8D 32 03         sta LEDS
   878 00:ED65: 8D 20 FE         sta	via2regb	; write value
   879 00:ED68: A9 48            lda #72
   880 00:ED6A: 8D 33 03         sta KeyLock
   881 00:ED6D: A9 FF            lda #$FF
   882 00:ED6F: FA               plx
   883 00:ED70: 28               plp
   884 00:ED71: 60               rts
   885                        Cap_off:
   886 00:ED72: AD 32 03         lda LEDS
   887 00:ED75: 29 C0            and #$C0
   888 00:ED77: 09 30            ora #$30
   889 00:ED79: 8D 32 03         sta LEDS
   890 00:ED7C: 8D 20 FE         sta	via2regb	; write value
   891 00:ED7F: A9 00            lda #0
   892 00:ED81: 8D 33 03         sta KeyLock
   893 00:ED84: A9 FF            lda #$FF
   894 00:ED86: FA               plx
   895 00:ED87: 28               plp
   896 00:ED88: 60               rts
   897                        is_GraphLock:
   898                        ; check for toggle and set LEDs
  Sun Nov 21 2021 15:13                                                                                                Page 36


   899 00:ED89: AD 32 03         lda LEDS
   900 00:ED8C: 29 20            AND #$20
   901 00:ED8E: C9 00            cmp #$00
   902 00:ED90: F0 E0            beq Cap_off
   903 00:ED92: AD 32 03         lda LEDS
   904 00:ED95: 29 C0            and #$C0
   905 00:ED97: 09 10            ora #$10
   906 00:ED99: 8D 32 03         sta LEDS
   907 00:ED9C: 8D 20 FE         sta	via2regb	; write value
   908 00:ED9F: A9 C0            lda #192
   909 00:EDA1: 8D 33 03         sta KeyLock
   910 00:EDA4: A9 FF            lda #$FF
   911 00:EDA6: FA               plx
   912 00:EDA7: 28               plp
   913 00:EDA8: 60               rts
   914                        
   915                        DecodeTable:
   916 00:EDA9: 30 31 32 33      .DB     '0','1','2','3','4','5','6','7' ; 0
       00:EDAD: 34 35 36 37 
   917 00:EDB1: 38 39 2D 3D      .DB     '8','9','-','=','\','[',']',';' ; 8
       00:EDB5: 5C 5B 5D 3B 
   918 00:EDB9: 27 7E 2C 2E      .DB     39,'~',',','.','/',00,'a','b'   ; 16
       00:EDBD: 2F 00 61 62 
   919 00:EDC1: 63 64 65 66      .DB     'c','d','e','f','g','h','i','j' ; 24
       00:EDC5: 67 68 69 6A 
   920 00:EDC9: 6B 6C 6D 6E      .DB     'k','l','m','n','o','p','q','r' ; 32
       00:EDCD: 6F 70 71 72 
   921 00:EDD1: 73 74 75 76      .DB     's','t','u','v','w','x','y','z' ; 40
       00:EDD5: 77 78 79 7A 
   922 00:EDD9: FF FF FF FF      .DB     $FF,$FF,$FF,$FF,$FF,11,12,14       ; 48
       00:EDDD: FF 0B 0C 0E 
   923 00:EDE1: 0F 10 1B 09      .DB     15,16,27,09,03,08,17,13         ; 56
       00:EDE5: 03 08 11 0D 
   924 00:EDE9: 20 1C 1D 1E      .DB     32,28,29,30,31,01,02,04         ; 64
       00:EDED: 1F 01 02 04 
   925                        
   926 00:EDF1: 29 21 40 23      .DB     ')','!','@','#','$','%','^','&' ; 72  ; Shift
       00:EDF5: 24 25 5E 26 
   927 00:EDF9: 2A 28 5F 2B      .DB     '*','(','_','+','|','{','}',':' ; 80
       00:EDFD: 7C 7B 7D 3A 
   928 00:EE01: 22 7E 3C 3E      .DB     34,'~','<','>','?',00,'A','B'   ; 88
       00:EE05: 3F 00 41 42 
   929 00:EE09: 43 44 45 46      .DB     'C','D','E','F','G','H','I','J' ; 96
       00:EE0D: 47 48 49 4A 
   930 00:EE11: 4B 4C 4D 4E      .DB     'K','L','M','N','O','P','Q','R' ; 104
       00:EE15: 4F 50 51 52 
   931 00:EE19: 53 54 55 56      .DB     'S','T','U','V','W','X','Y','Z' ; 112
       00:EE1D: 57 58 59 5A 
   932 00:EE21: FF FF FF FF      .DB     $FF,$FF,$FF,$FF,$FF,18,19,20         ; 120
       00:EE25: FF 12 13 14 
   933 00:EE29: 15 16 1B 09      .DB     21,22,27,09,03,08,23,13         ; 128
       00:EE2D: 03 08 17 0D 
   934 00:EE31: 20 1C 1D 1E      .DB     32,28,29,30,31,01,02,04         ; 136
       00:EE35: 1F 01 02 04 
   935                        
   936 00:EE39: 30 31 32 33      .DB     '0','1','2','3','4','5','6','7' ; 144 ; Control
       00:EE3D: 34 35 36 37 
  Sun Nov 21 2021 15:13                                                                                                Page 37


   937 00:EE41: 38 39 EA E1      .DB     '8','9',234,225,224,248,249,000 ; 152
       00:EE45: E0 F8 F9 00 
   938 00:EE49: FA FB FE B0      .DB     250,251,254,176,177,00,01,02    ; 160
       00:EE4D: B1 00 01 02 
   939 00:EE51: 03 04 05 06      .DB     03,04,05,06,07,08,09,10         ; 168
       00:EE55: 07 08 09 0A 
   940 00:EE59: 0B 0C 0D 0E      .DB     11,12,13,14,15,16,17,18         ; 176
       00:EE5D: 0F 10 11 12 
   941 00:EE61: 13 14 15 16      .DB     19,20,21,22,23,24,25,26         ; 184
       00:EE65: 17 18 19 1A 
   942                        
   943 00:EE69: 00 B2 B3 B4      .DB     000,178,179,180,181,182,183,184 ; 192 ; Graph
       00:EE6D: B5 B6 B7 B8 
   944 00:EE71: B9 BA BB BC      .DB     185,186,187,188,189,190,191,192 ; 200
       00:EE75: BD BE BF C0 
   945 00:EE79: C1 C2 C3 C4      .DB     193,194,195,196,197,198,199,200 ; 208
       00:EE7D: C5 C6 C7 C8 
   946 00:EE81: C9 CA CB CC      .DB     201,202,203,204,205,206,207,208 ; 216
       00:EE85: CD CE CF D0 
   947 00:EE89: D1 D2 D3 D4      .DB     209,210,211,212,213,214,215,216 ; 224
       00:EE8D: D5 D6 D7 D8 
   948 00:EE91: D9 DA DB DC      .DB     217,218,219,220,221,222,223,167 ; 232
       00:EE95: DD DE DF A7 
   949                        
   950                        
   951                        
   952                        
   953                        ;***********************************************************************************;
   954                        ;
   955                        ; 16ms delay
   956                        kbdDelay16ms:
   957 00:EE99: 08           	php
   958 00:EE9A: E2 30            	SEP #$30 				; NEED 8 bit ACCUMULATOR & INDEX
   959                            	LONGA Off              	;
   960                            	LONGI Off              	;
   961 00:EE9C: 48           	pha
   962 00:EE9D: DA           	phx
   963 00:EE9E: A2 10        	ldx 	#16
   964 00:EEA0: A9 40        	LDA	#$40			; set for 1024 cycles (MHZ)
   965 00:EEA2: 8D 29 FE     	STA	via2t2ch		; set VIA 2 T2C_h
   966                        kbdDelay16ms_a:
   967 00:EEA5: AD 2D FE     	LDA	via2ifr		; get VIA 2 IFR
   968 00:EEA8: 29 20        	AND	#$20			; mask T2 interrupt
   969 00:EEAA: F0 F9        	BEQ	kbdDelay16ms_a		; loop until T2 interrupt
   970 00:EEAC: CA           	dex
   971 00:EEAD: D0 F6        	bne 	kbdDelay16ms_a
   972 00:EEAF: FA           	plx
   973 00:EEB0: 68           	pla
   974 00:EEB1: 28           	plp
   975 00:EEB2: 60           	RTS
   976                        ;________________________________________________________________________________________
   352                        		INCLUDE 'IEC.ASM'
     1                        ;__IEC____________________________________________________________________________________________
                    _
     2                        ;
     3                        ;	IEC SERIAL DRIVER
     4                        ;   ORIGINALLY FROM COMMODORE 64 KERNAL
  Sun Nov 21 2021 15:13                                                                                                Page 38


     5                        ;	CONVERTED FOR 65816 BY: DAN WERNER -- 4/6/2021
     6                        ;
     7                        ;_________________________________________________________________________________________________
                    _
     8                        
     9                        ;***********************************************************************************;
    10                        ;
    11                        ; set serial data out high
    12                        
    13                        LAB_E4A0
    14 00:EEB3: AD 2C FE     	LDA	via2pcr 		; get VIA 2 PCR
    15 00:EEB6: 29 DF        	AND	#$DF			; set CB2 low, serial data out high
    16 00:EEB8: 8D 2C FE     	STA	via2pcr 		; set VIA 2 PCR
    17 00:EEBB: 60           	RTS
    18                        
    19                        
    20                        ;***********************************************************************************;
    21                        ;
    22                        ; set serial data out low
    23                        
    24                        LAB_E4A9
    25 00:EEBC: AD 2C FE     	LDA	via2pcr 		; get VIA 2 PCR
    26 00:EEBF: 09 20        	ORA	#$20			; set CB2 high, serial data out low
    27 00:EEC1: 8D 2C FE     	STA	via2pcr 		; set VIA 2 PCR
    28 00:EEC4: 60           	RTS
    29                        
    30                        
    31                        ;***********************************************************************************;
    32                        ;
    33                        ; get serial clock status
    34                        
    35                        LAB_E4B2
    36 00:EEC5: AD 1F FE     	LDA	via1ora		; get VIA 1 DRA, no handshake
    37 00:EEC8: CD 1F FE     	CMP	via1ora		; compare with self
    38 00:EECB: D0 F8        	BNE	LAB_E4B2		; loop if changing
    39                        
    40 00:EECD: 4A           	LSR				; shift serial clock to Cb
    41 00:EECE: 60           	RTS
    42                        
    43                        
    44                        ;***********************************************************************************;
    45                        ;
    46                        ; command a serial bus device to TALK
    47                        
    48                        ; to use this routine the accumulator must first be loaded with a device number
    49                        ; between 4 and 30. When called this routine converts this device number to a talk
    50                        ; address. Then this data is transmitted as a command on the Serial bus.
    51                        
    52                        LAB_EE14
    53 00:EECF: 09 40        	ORA	#$40			; OR with the TALK command
    54 00:EED1: 2C           	.byte	$2C			; makes next line BIT LAB_2009
    55                        
    56                        
    57                        ;***********************************************************************************;
    58                        ;
    59                        ; command devices on the serial bus to LISTEN
    60                        
  Sun Nov 21 2021 15:13                                                                                                Page 39


    61                        ; this routine will command a device on the serial bus to receive data. The
    62                        ; accumulator must be loaded with a device number between 4 and 31 before calling
    63                        ; this routine. LISTEN convert this to a listen address then transmit this data as
    64                        ; a command on the serial bus. The specified device will then go into listen mode
    65                        ; and be ready to accept information.
    66                        
    67                        LAB_EE17
    68 00:EED2: 09 20        	ORA	#$20			; OR with the LISTEN command
    69 00:EED4: 20 0D F3     	JSR	LAB_F160		; check RS232 bus idle, setup timers
    70                        
    71                        ;***********************************************************************************;
    72                        ;
    73                        ; send control character
    74                        
    75                        LAB_EE1C
    76 00:EED7: 48           	PHA				; save device address
    77 00:EED8: 2C 12 03     	BIT	IECDCF		; test deferred character flag
    78 00:EEDB: 10 0D        	BPL	LAB_EE2B		; branch if no defered character
    79                        
    80 00:EEDD: 38           	SEC				; flag EOI
    81 00:EEDE: 6E 14 03     	ROR	IECBCI		; rotate into EOI flag byte
    82 00:EEE1: 20 09 EF     	JSR	LAB_EE49		; Tx byte on serial bus
    83                        
    84 00:EEE4: 4E 12 03     	LSR	IECDCF		; clear deferred character flag
    85 00:EEE7: 4E 14 03     	LSR	IECBCI		; clear EOI flag
    86                        LAB_EE2B
    87                        
    88 00:EEEA: 68           	PLA				; restore device address
    89 00:EEEB: 8D 13 03     	STA	IECDC		; save as serial defered character
    90 00:EEEE: 20 B3 EE     	JSR	LAB_E4A0		; set serial data out high
    91 00:EEF1: C9 3F        	CMP	#$3F			; compare read byte with $3F
    92 00:EEF3: D0 03        	BNE	LAB_EE38		; branch if not $3F, this branch will always be taken as
    93                        					; after VIA 2's PCR is read it is ANDed with $DF, so the
    94                        					; result can never be $3F
    95                        
    96 00:EEF5: 20 65 F0     	JSR	LAB_EF84		; set serial clock high
    97                        
    98                        LAB_EE38
    99 00:EEF8: AD 1F FE     	LDA	via1ora		; get VIA 1 DRA, no handshake
   100 00:EEFB: 09 80        	ORA	#$80			; set serial ATN low
   101 00:EEFD: 8D 1F FE     	STA	via1ora		; set VIA 1 DRA, no handshake
   102                        
   103                        
   104                        ;***********************************************************************************;
   105                        ;
   106                        ; if the code drops through to here the serial clock is low and the serial data has been
   107                        ; released so the following code will have no effect apart from delaying the first byte
   108                        ; by 1ms
   109                        
   110                        ;## set clk/data, wait and Tx byte on serial bus
   111                        LAB_EE40
   112 00:EF00: 20 6E F0     	JSR	LAB_EF8D		; set serial clock low
   113 00:EF03: 20 B3 EE     	JSR	LAB_E4A0		; set serial data out high
   114 00:EF06: 20 77 F0     	JSR	LAB_EF96		; 1ms delay
   115                        
   116                        ;***********************************************************************************;
   117                        ;
  Sun Nov 21 2021 15:13                                                                                                Page 40


   118                        ; Tx byte on serial bus
   119                        
   120                        LAB_EE49
   121 00:EF09: 78           	SEI				; disable interrupts
   122 00:EF0A: 20 B3 EE     	JSR	LAB_E4A0		; set serial data out high
   123 00:EF0D: 20 C5 EE     	JSR	LAB_E4B2		; get serial clock status
   124 00:EF10: 4A           	LSR				; shift serial data to Cb
   125 00:EF11: B0 6E        	BCS	LAB_EEB4		; if data high do device not present
   126 00:EF13: 20 65 F0     	JSR	LAB_EF84		; set serial clock high
   127 00:EF16: 2C 14 03     	BIT	IECBCI		; test EOI flag
   128 00:EF19: 10 0C        	BPL	LAB_EE66		; branch if not EOI
   129                        ; I think this is the EOI sequence so the serial clock has been released and the serial
   130                        ; data is being held low by the peripherals. first up wait for the serial data to rise
   131                        
   132                        LAB_EE5A
   133 00:EF1B: 20 C5 EE     	JSR	LAB_E4B2		; get serial clock status
   134 00:EF1E: 4A           	LSR				; shift serial data to Cb
   135 00:EF1F: 90 FA        	BCC	LAB_EE5A		; loop if data low
   136                        
   137                        ; now the data is high, EOI is signalled by waiting for at least 200us without pulling
   138                        ; the serial clock line low again. the listener should respond by pulling the serial
   139                        ; data line low
   140                        
   141                        LAB_EE60
   142 00:EF21: 20 C5 EE     	JSR	LAB_E4B2		; get serial clock status
   143 00:EF24: 4A           	LSR				; shift serial data to Cb
   144 00:EF25: B0 FA        	BCS	LAB_EE60		; loop if data high
   145                        
   146                        ; the serial data has gone low ending the EOI sequence, now just wait for the serial
   147                        ; data line to go high again or, if this isn't an EOI sequence, just wait for the serial
   148                        ; data to go high the first time
   149                        
   150                        LAB_EE66
   151 00:EF27: 20 C5 EE     	JSR	LAB_E4B2		; get serial clock status
   152 00:EF2A: 4A           	LSR				; shift serial data to Cb
   153 00:EF2B: 90 FA        	BCC	LAB_EE66		; loop if data low
   154                        
   155                        ; serial data is high now pull the clock low, preferably within 60us
   156                        
   157 00:EF2D: 20 6E F0     	JSR	LAB_EF8D		; set serial clock low
   158                        
   159                        ; now the Vic has to send the eight bits, LSB first. first it sets the serial data line
   160                        ; to reflect the bit in the byte, then it sets the serial clock to high. The serial
   161                        ; clock is left high for 26 cycles, 23us on a PAL Vic, before it is again pulled low
   162                        ; and the serial data is allowed high again
   163                        
   164 00:EF30: A9 08        	LDA	#$08			; eight bits to do
   165 00:EF32: 8D 15 03     	STA	IECBTC		; set serial bus bit count
   166                        LAB_EE73
   167 00:EF35: AD 1F FE     	LDA	via1ora		; get VIA 1 DRA, no handshake
   168 00:EF38: CD 1F FE     	CMP	via1ora		; compare with self
   169 00:EF3B: D0 F8        	BNE	LAB_EE73		; loop if changing
   170                        
   171 00:EF3D: 4A           	LSR				; serial clock to carry
   172 00:EF3E: 4A           	LSR				; serial data to carry
   173 00:EF3F: 90 43        	BCC	LAB_EEB7		; if data low do timeout on serial bus
   174 00:EF41: 20 79 F3     	jsr IEC_DELAY
  Sun Nov 21 2021 15:13                                                                                                Page 41


   175 00:EF44: 6E 13 03     	ROR	IECDC		; rotate transmit byte
   176 00:EF47: B0 05        	BCS	LAB_EE88		; branch if bit = 1
   177                        
   178 00:EF49: 20 BC EE     	JSR	LAB_E4A9		; else set serial data out low
   179 00:EF4C: D0 03        	BNE	LAB_EE8B		; branch always
   180                        
   181                        LAB_EE88
   182 00:EF4E: 20 B3 EE     	JSR	LAB_E4A0		; set serial data out high
   183                        LAB_EE8B
   184 00:EF51: 20 79 F3     	jsr IEC_DELAY
   185 00:EF54: 20 65 F0     	JSR	LAB_EF84		; set serial clock high
   186 00:EF57: EA           	NOP				; waste ..
   187 00:EF58: EA           	NOP				; .. a ..
   188 00:EF59: EA           	NOP				; .. cycle ..
   189 00:EF5A: EA           	NOP				; .. or two
   190 00:EF5B: 20 79 F3     	jsr IEC_DELAY
   191 00:EF5E: AD 2C FE     	LDA	via2pcr 		; get VIA 2 PCR
   192 00:EF61: 29 DF        	AND	#$DF			; set CB2 low, serial data out high
   193 00:EF63: 09 02        	ORA	#$02			; set CA2 high, serial clock out low
   194 00:EF65: 8D 2C FE     	STA	via2pcr 		; save VIA 2 PCR
   195 00:EF68: CE 15 03     	DEC	IECBTC		; decrement serial bus bit count
   196 00:EF6B: D0 C8        	BNE	LAB_EE73		; loop if not all done
   197                        
   198                        ; now all eight bits have been sent it's up to the peripheral to signal the byte was
   199                        ; received by pulling the serial data low. this should be done within one milisecond
   200                        
   201 00:EF6D: A9 40        	LDA	#$40			; wait for up to about 1ms (MHZ)
   202 00:EF6F: 8D 29 FE     	STA	via2t2ch		; set VIA 2 T2C_h
   203                        LAB_EEA5
   204 00:EF72: AD 2D FE     	LDA	via2ifr		; get VIA 2 IFR
   205 00:EF75: 29 20        	AND	#$20			; mask T2 interrupt
   206 00:EF77: D0 0B        	BNE	LAB_EEB7		; if T2 interrupt do timeout on serial bus
   207                        
   208 00:EF79: 20 C5 EE     	JSR	LAB_E4B2		; get serial clock status
   209 00:EF7C: 4A           	LSR		  			; shift serial data to Cb
   210 00:EF7D: B0 F3        	BCS	LAB_EEA5		; if data high go wait some more
   211                        
   212 00:EF7F: 58           	CLI				; enable interrupts
   213 00:EF80: 60           	RTS
   214                        
   215                        
   216                        ;***********************************************************************************;
   217                        ;
   218                        ; device not present
   219                        
   220                        LAB_EEB4
   221 00:EF81: A9 80        	LDA	#$80			; error $80, device not present
   222 00:EF83: 2C           	.byte	$2C			; makes next line BIT LAB_03A9
   223                        
   224                        
   225                        ;***********************************************************************************;
   226                        ;
   227                        ; timeout on serial bus
   228                        
   229                        LAB_EEB7
   230 00:EF84: A9 03        	LDA	#$03			; error $03, write timeout
   231                        LAB_EEB9
  Sun Nov 21 2021 15:13                                                                                                Page 42


   232 00:EF86: 20 84 F0     	JSR	LAB_FE6A		; OR into serial status byte
   233 00:EF89: 58           	CLI				; enable interrupts
   234 00:EF8A: 18           	CLC				; clear for branch
   235 00:EF8B: 90 55        	BCC	LAB_EF09		; ATN high, delay, clock high then data high, branch always
   236                        
   237                        
   238                        ;***********************************************************************************;
   239                        ;
   240                        ; send secondary address after LISTEN
   241                        
   242                        ; this routine is used to send a secondary address to an I/O device after a call to
   243                        ; the LISTEN routine is made and the device commanded to LISTEN. The routine cannot
   244                        ; be used to send a secondary address after a call to the TALK routine.
   245                        
   246                        ; A secondary address is usually used to give set-up information to a device before
   247                        ; I/O operations begin.
   248                        
   249                        ; When a secondary address is to be sent to a device on the serial bus the address
   250                        ; must first be ORed with $60.
   251                        
   252                        LAB_EEC0
   253 00:EF8D: 8D 13 03     	STA	IECDC		; save defered byte
   254 00:EF90: 20 00 EF     	JSR	LAB_EE40		; set clk/data, wait and Tx byte on serial bus
   255                        ; set serial ATN high
   256                        
   257                        LAB_EEC5
   258 00:EF93: AD 1F FE     	LDA	via1ora		; get VIA 1 DRA, no handshake
   259 00:EF96: 29 7F        	AND	#$7F			; set serial ATN high
   260 00:EF98: 8D 1F FE     	STA	via1ora		; set VIA 1 DRA, no handshake
   261 00:EF9B: 60           	RTS
   262                        
   263                        
   264                        ;***********************************************************************************;
   265                        ;
   266                        ; send secondary address after TALK
   267                        
   268                        ; this routine transmits a secondary address on the serial bus for a TALK device.
   269                        ; This routine must be called with a number between 4 and 31 in the accumulator.
   270                        ; The routine will send this number as a secondary address command over the serial
   271                        ; bus. This routine can only be called after a call to the TALK routine. It will
   272                        ; not work after a LISTEN.
   273                        
   274                        LAB_EECE
   275 00:EF9C: 8D 13 03     	STA	IECDC		; save the secondary address byte to transmit
   276 00:EF9F: 20 00 EF     	JSR	LAB_EE40		; set clk/data, wait and Tx byte on serial bus
   277                        
   278 00:EFA2: 2C 17 03     	BIT	IECSTW			; test serial status byte
   279 00:EFA5: 10 02        	BPL	LAB_EED3		; if device present
   280 00:EFA7: 38           	SEC
   281 00:EFA8: 60           	RTS
   282                        
   283                        ;***********************************************************************************;
   284                        ;
   285                        ; wait for bus end after send
   286                        
   287                        LAB_EED3
   288 00:EFA9: 78           	SEI				; disable interrupts
  Sun Nov 21 2021 15:13                                                                                                Page 43


   289 00:EFAA: 20 BC EE     	JSR	LAB_E4A9		; set serial data out low
   290 00:EFAD: 20 93 EF     	JSR	LAB_EEC5		; set serial ATN high
   291 00:EFB0: 20 65 F0     	JSR	LAB_EF84		; set serial clock high
   292                        LAB_EEDD
   293 00:EFB3: 20 C5 EE     	JSR	LAB_E4B2		; get serial clock status
   294 00:EFB6: B0 FB        	BCS	LAB_EEDD		; branch if clock high
   295                        
   296 00:EFB8: 58           	CLI				; enable interrupts
   297 00:EFB9: 60           	RTS
   298                        
   299                        
   300                        ;***********************************************************************************;
   301                        ;
   302                        ; output a byte to the serial bus
   303                        
   304                        ; this routine is used to send information to devices on the serial bus. A call to
   305                        ; this routine will put a data byte onto the serial bus using full handshaking.
   306                        ; Before this routine is called the LISTEN routine, LAB_FFB1, must be used to
   307                        ; command a device on the serial bus to get ready to receive data.
   308                        
   309                        ; the accumulator is loaded with a byte to output as data on the serial bus. A
   310                        ; device must be listening or the status word will return a timeout. This routine
   311                        ; always buffers one character. So when a call to the UNLISTEN routine, LAB_FFAE,
   312                        ; is made to end the data transmission, the buffered character is sent with EOI
   313                        ; set. Then the UNLISTEN command is sent to the device.
   314                        
   315                        LAB_EEE4
   316 00:EFBA: 2C 12 03     	BIT IECDCF		; test deferred character flag
   317 00:EFBD: 30 06        	BMI	LAB_EEED		; branch if defered character
   318                        
   319 00:EFBF: 38           	SEC				; set carry
   320 00:EFC0: 6E 12 03     	ROR	IECDCF		; shift into deferred character flag
   321 00:EFC3: D0 05        	BNE	LAB_EEF2		; save byte and exit, branch always
   322                        
   323                        LAB_EEED
   324 00:EFC5: 48           	PHA				; save byte
   325 00:EFC6: 20 09 EF     	JSR	LAB_EE49		; Tx byte on serial bus
   326 00:EFC9: 68           	PLA				; restore byte
   327                        LAB_EEF2
   328 00:EFCA: 8D 13 03     	STA	IECDC		; save defered byte
   329 00:EFCD: 18           	CLC				; flag ok
   330 00:EFCE: 60           	RTS
   331                        
   332                        
   333                        ;***********************************************************************************;
   334                        ;
   335                        ; command the serial bus to UNTALK
   336                        
   337                        ; this routine will transmit an UNTALK command on the serial bus. All devices
   338                        ; previously set to TALK will stop sending data when this command is received.
   339                        
   340                        LAB_EEF6
   341 00:EFCF: 20 6E F0     	JSR	LAB_EF8D		; set serial clock low
   342 00:EFD2: AD 1F FE     	LDA	via1ora		; get VIA 1 DRA, no handshake
   343 00:EFD5: 09 80        	ORA	#$80			; set serial ATN low
   344 00:EFD7: 8D 1F FE     	STA	via1ora		; set VIA 1 DRA, no handshake
   345                        
  Sun Nov 21 2021 15:13                                                                                                Page 44


   346 00:EFDA: A9 5F        	LDA	#$5F			; set the UNTALK command
   347 00:EFDC: 2C           	.byte	$2C			; makes next line BIT LAB_3FA9
   348                        
   349                        
   350                        ;***********************************************************************************;
   351                        ;
   352                        ; command the serial bus to UNLISTEN
   353                        
   354                        ; this routine commands all devices on the serial bus to stop receiving data from
   355                        ; the computer. Calling this routine results in an UNLISTEN command being transmitted
   356                        ; on the serial bus. Only devices previously commanded to listen will be affected.
   357                        
   358                        ; This routine is normally used after the computer is finished sending data to
   359                        ; external devices. Sending the UNLISTEN will command the listening devices to get
   360                        ; off the serial bus so it can be used for other purposes.
   361                        
   362                        LAB_EF04
   363 00:EFDD: A9 3F        	LDA	#$3F			; set the UNLISTEN command
   364 00:EFDF: 20 D7 EE     	JSR	LAB_EE1C		; send control character
   365                        
   366                        ; ATN high, delay, clock high then data high
   367                        
   368                        LAB_EF09
   369 00:EFE2: 20 93 EF     	JSR	LAB_EEC5		; set serial ATN high
   370                        
   371                        ; 1ms delay, clock high then data high
   372                        
   373                        LAB_EF0C
   374 00:EFE5: 8A           	TXA				; save device number
   375 00:EFE6: A2 0B        	LDX	#$0B			; short delay
   376                        LAB_EF0F
   377 00:EFE8: CA           	DEX				; decrement count
   378 00:EFE9: D0 FD        	BNE	LAB_EF0F		; loop if not all done
   379                        
   380 00:EFEB: AA           	TAX				; restore device number
   381 00:EFEC: 20 65 F0     	JSR	LAB_EF84		; set serial clock high
   382 00:EFEF: 4C B3 EE     	JMP	LAB_E4A0		; set serial data out high and return
   383                        
   384                        
   385                        ;***********************************************************************************;
   386                        ;
   387                        ; input a byte from the serial bus
   388                        
   389                        ; this routine reads a byte of data from the serial bus using full handshaking. the
   390                        ; data is returned in the accumulator. before using this routine the TALK routine,
   391                        ; LAB_FFB4, must have been called first to command the device on the serial bus to
   392                        ; send data on the bus. if the input device needs a secondary command it must be sent
   393                        ; by using the TKSA routine, LAB_FF96, before calling this routine.
   394                        
   395                        ; errors are returned in the status word which can be read by calling the READST
   396                        ; routine, LAB_FFB7.
   397                        
   398                        LAB_EF19
   399 00:EFF2: 78           	SEI				; disable interrupts
   400 00:EFF3: A9 00        	LDA	#$00			; clear A
   401 00:EFF5: 8D 15 03     	STA	IECBTC		; clear serial bus bit count
   402 00:EFF8: 20 65 F0     	JSR	LAB_EF84		; set serial clock high
  Sun Nov 21 2021 15:13                                                                                                Page 45


   403                        LAB_EF21
   404 00:EFFB: 20 C5 EE     	JSR	LAB_E4B2		; get serial clock status
   405 00:EFFE: 90 FB        	BCC	LAB_EF21		; loop while clock low
   406                        
   407 00:F000: 20 B3 EE     	JSR	LAB_E4A0		; set serial data out high
   408                        LAB_EF29
   409 00:F003: A9 10        	LDA	#$10			; set timeout count high byte (MHZ DEPENDENT)
   410 00:F005: 8D 29 FE     	STA	via2t2ch		; set VIA 2 T2C_h
   411                        LAB_EF2E
   412 00:F008: AD 2D FE     	LDA	via2ifr		; get VIA 2 IFR
   413 00:F00B: 29 20        	AND	#$20			; mask T2 interrupt
   414 00:F00D: D0 07        	BNE	LAB_EF3C		; branch if T2 interrupt
   415                        
   416 00:F00F: 20 C5 EE     	JSR	LAB_E4B2		; get serial clock status
   417 00:F012: B0 F4        	BCS	LAB_EF2E		; loop if clock high
   418                        
   419 00:F014: 90 1A        	BCC	LAB_EF54		; else go se 8 bits to do, branch always
   420                        
   421                        					; T2 timed out
   422                        LAB_EF3C
   423 00:F016: AD 15 03     	LDA	IECBTC		; get serial bus bit count
   424 00:F019: F0 05        	BEQ	LAB_EF45		; if not already EOI then go flag EOI
   425                        
   426 00:F01B: A9 02        	LDA	#$02			; error $02, read timeour
   427 00:F01D: 4C 86 EF     	JMP	LAB_EEB9		; set serial status and exit
   428                        
   429                        LAB_EF45
   430 00:F020: 20 BC EE     	JSR	LAB_E4A9		; set serial data out low
   431 00:F023: 20 E5 EF     	JSR	LAB_EF0C		; 1ms delay, clock high then data high
   432 00:F026: A9 40        	LDA	#$40			; set EOI
   433 00:F028: 20 84 F0     	JSR	LAB_FE6A		; OR into serial status byte
   434 00:F02B: EE 15 03     	INC	IECBTC		; increment serial bus bit count, do error on next timeout
   435 00:F02E: D0 D3        	BNE	LAB_EF29		; go try again
   436                        
   437                        LAB_EF54
   438 00:F030: A9 08        	LDA	#$08			; 8 bits to do
   439 00:F032: 8D 15 03     	STA	IECBTC		; set serial bus bit count
   440                        LAB_EF58
   441                        
   442                        	; STICKS HERE IF NO DATA TO READ
   443                        
   444 00:F035: AD 1F FE     	LDA	via1ora		; get VIA 1 DRA, no handshake
   445 00:F038: CD 1F FE     	CMP	via1ora		; compare with self
   446 00:F03B: D0 F8        	BNE	LAB_EF58		; loop if changing
   447                        ; OR HERE?
   448 00:F03D: 4A           	LSR				; serial clock into carry
   449 00:F03E: 90 F5        	BCC	LAB_EF58		; loop while serial clock low
   450                        
   451 00:F040: 4A           	LSR				; serial data into carry
   452 00:F041: 6E 16 03     	ROR	IECCYC		; shift data bit into receive byte
   453                        LAB_EF66
   454                        
   455 00:F044: AD 1F FE     	LDA	via1ora		; get VIA 1 DRA, no handshake
   456 00:F047: CD 1F FE     	CMP	via1ora		; compare with self
   457 00:F04A: D0 F8        	BNE	LAB_EF66		; loop if changing
   458                        
   459 00:F04C: 4A           	LSR				; serial clock into carry
  Sun Nov 21 2021 15:13                                                                                                Page 46


   460 00:F04D: B0 F5        	BCS	LAB_EF66		; loop while serial clock high
   461                        
   462 00:F04F: CE 15 03     	DEC	IECBTC		; decrement serial bus bit count
   463 00:F052: D0 E1        	BNE	LAB_EF58		; loop if not all done
   464                        
   465 00:F054: 20 BC EE     	JSR	LAB_E4A9		; set serial data out low
   466 00:F057: AD 17 03     	LDA	IECSTW		; get serial status byte
   467 00:F05A: F0 03        	BEQ	LAB_EF7F		; branch if no error
   468                        
   469 00:F05C: 20 E5 EF     	JSR	LAB_EF0C		; 1ms delay, clock high then data high
   470                        LAB_EF7F
   471 00:F05F: AD 16 03     	LDA	IECCYC		; get receive byte
   472 00:F062: 58           	CLI				; enable interrupts
   473 00:F063: 18           	CLC
   474 00:F064: 60           	RTS
   475                        
   476                        
   477                        ;***********************************************************************************;
   478                        ;
   479                        ; set serial clock high
   480                        
   481                        LAB_EF84
   482 00:F065: AD 2C FE     	LDA	via2pcr 		; get VIA 2 PCR
   483 00:F068: 29 FD        	AND	#$FD			; set CA2 low, serial clock out high
   484 00:F06A: 8D 2C FE     	STA	via2pcr 		; set VIA 2 PCR
   485 00:F06D: 60           	RTS
   486                        
   487                        
   488                        ;***********************************************************************************;
   489                        ;
   490                        ; set serial clock low
   491                        
   492                        LAB_EF8D
   493 00:F06E: AD 2C FE     	LDA	via2pcr 		; get VIA 2 PCR
   494 00:F071: 09 02        	ORA	#$02			; set CA2 high, serial clock out low
   495 00:F073: 8D 2C FE     	STA	via2pcr 		; set VIA 2 PCR
   496 00:F076: 60           	RTS
   497                        
   498                        
   499                        ;***********************************************************************************;
   500                        ;
   501                        ; 1ms delay
   502                        
   503                        LAB_EF96
   504 00:F077: A9 40        	LDA	#$40			; set for 1024 cycles (MHZ)
   505 00:F079: 8D 29 FE     	STA	via2t2ch		; set VIA 2 T2C_h
   506                        LAB_EF9B
   507 00:F07C: AD 2D FE     	LDA	via2ifr		; get VIA 2 IFR
   508 00:F07F: 29 20        	AND	#$20			; mask T2 interrupt
   509 00:F081: F0 F9        	BEQ	LAB_EF9B		; loop until T2 interrupt
   510                        
   511 00:F083: 60           	RTS
   512                        
   513                        ; OR into serial status byte
   514                        
   515                        LAB_FE6A
   516 00:F084: 0D 17 03     	ORA	IECSTW		; OR with serial status byte
  Sun Nov 21 2021 15:13                                                                                                Page 47


   517 00:F087: 8D 17 03     	STA	IECSTW		; save serial status byte
   518 00:F08A: 60           	RTS
   519                        
   520                        
   521                        ;***********************************************************************************;
   522                        ;
   523                        ; load RAM from a device
   524                        
   525                        ; this routine will load data bytes from any input device directly into the memory
   526                        ; of the computer.
   527                        ; If the input device was OPENed with a secondary address of 0 the header information from
   528                        ; device will be ignored. In this case Location LOADBUF must contain the starting address for the
   529                        ; load. LOADBANK must also be specified with the appropriate bank number.  If the device was addre
                    ssed with a secondary address of 1 or 2 the data will
   530                        ; load into memory starting at the location specified by the header. This routine
   531                        ; returns the address of the highest RAM location which was loaded.
   532                        
   533                        ; Before this routine can be called,
   534                        ;		the SETLFS
   535                        ;		LAB_FFBA(set logical, first and second addresses)
   536                        ;		SETNAM
   537                        ;		LAB_FFBD(clear filename)
   538                        ; 	routines must be called.
   539                        LOADTORAM:
   540                        LAB_F549
   541 00:F08B: A9 00        	LDA	#$00			; clear A
   542 00:F08D: 8D 17 03     	STA	IECSTW		; clear serial status byte
   543 00:F090: AC 18 03     	LDY	IECFNLN		; get file name length
   544 00:F093: D0 03        	BNE	LAB_F563		; branch if not null name
   545 00:F095: 4C A3 F1     	JMP	LAB_F793		; else do missing file name error and return
   546                        LAB_F563
   547 00:F098: 20 C0 F1     	JSR	LAB_E4BC		; get seconday address and print "Searching..."
   548 00:F09B: A9 60        	LDA	#$60			;.
   549 00:F09D: 8D 19 03     	STA	IECSECAD		; save the secondary address
   550 00:F0A0: 20 C6 F1     	JSR	LAB_F495		; send secondary address and filename
   551 00:F0A3: AD 1C 03     	LDA	IECDEVN			; get device number
   552 00:F0A6: 20 CF EE     	JSR	LAB_EE14		; command a serial bus device to TALK
   553 00:F0A9: AD 19 03     	LDA	IECSECAD		; get secondary address
   554 00:F0AC: 20 9C EF     	JSR	LAB_EECE		; send secondary address after TALK
   555 00:F0AF: 20 F2 EF     	JSR	LAB_EF19		; input a byte from the serial bus
   556                        
   557 00:F0B2: 8D 1A 03     	STA	IECBUFFL		; save program start address low byte
   558 00:F0B5: AD 17 03     	LDA	IECSTW		; get serial status byte
   559 00:F0B8: 4A           	LSR				; shift time out read ..
   560 00:F0B9: 4A           	LSR				; .. into carry bit
   561 00:F0BA: B0 4B        	BCS	LAB_F5C7		; if timed out go do file not found error and return
   562 00:F0BC: 20 F2 EF     	JSR	LAB_EF19		; input a byte from the serial bus
   563 00:F0BF: 8D 1B 03     	STA	IECBUFFH		; save program start address high byte
   564 00:F0C2: 20 10 F2     	JSR	LAB_E4C1		; set LOAD address if secondary address = 0
   565                        LAB_F58A
   566 00:F0C5: A9 FD        	LDA	#$FD			; mask xxxx xx0x, clear time out read bit
   567 00:F0C7: 2D 17 03     	AND	IECSTW		; mask serial status byte
   568 00:F0CA: 8D 17 03     	STA	IECSTW		; set serial status byte
   569 00:F0CD: 20 92 F3     	JSR	LAB_FFE1		; scan stop key, return Zb = 1 = [STOP]
   570 00:F0D0: D0 03        	BNE	LAB_F598		; branch if not [STOP]
   571 00:F0D2: 4C 65 F1     	JMP	LAB_F6CB		; else close the serial bus device and flag stop
   572                        
  Sun Nov 21 2021 15:13                                                                                                Page 48


   573                        LAB_F598
   574 00:F0D5: 20 F2 EF     	JSR	LAB_EF19		; input a byte from the serial bus
   575 00:F0D8: AA           	TAX				; copy byte
   576 00:F0D9: AD 17 03     	LDA	IECSTW		; get serial status byte
   577 00:F0DC: 4A           	LSR				; shift time out read ..
   578 00:F0DD: 4A           	LSR				; .. into carry bit
   579 00:F0DE: B0 E5        	BCS	LAB_F58A		; if timed out go ??
   580                        
   581 00:F0E0: AD 24 03     	lda LOADBANK	; set load bank
   582 00:F0E3: 8B           	phb
   583 00:F0E4: 48           	pha
   584 00:F0E5: 8A           	TXA				; copy received byte back
   585                        	Index16
+  585 00:F0E6: C2 10        		REP #$10 		; 16 bit Index registers 
+  585                        		LONGI ON
   586 00:F0E8: AE 22 03     	ldx LOADBUFL
   587 00:F0EB: AB           	plb
   588 00:F0EC: 9D 00 00     	STA	0,x			; save byte to memory
   589 00:F0EF: AB           	plb 			; restore bank
   590                        	index8
+  590 00:F0F0: E2 10        		SEP #$10 		; 8 bit Index registers 
+  590                        		LONGI OFF
   591                        
   592                        LAB_F5B5
   593 00:F0F2: EE 22 03     	INC	LOADBUFL		; increment save pointer low byte
   594 00:F0F5: D0 03        	BNE	LAB_F5BB		; if no rollover skip the high byte increment
   595                        
   596 00:F0F7: EE 23 03     	INC	LOADBUFH		; else increment save pointer high byte
   597                        LAB_F5BB
   598 00:F0FA: 2C 17 03     	BIT	IECSTW		; test serial status byte
   599 00:F0FD: 50 C6        	BVC	LAB_F58A		; loop if not end of file
   600                        
   601 00:F0FF: 20 CF EF     	JSR	LAB_EEF6		; command the serial bus to UNTALK
   602 00:F102: 20 74 F1     	JSR	LAB_F6DA		; close serial bus device
   603 00:F105: 90 03        	BCC	LAB_F641		; if ?? go flag ok and exit
   604                        
   605                        LAB_F5C7
   606 00:F107: 4C 97 F1     	JMP	LAB_F787		; do file not found error and return
   607                        
   608                        LAB_F641
   609 00:F10A: 18           	CLC				; flag ok
   610 00:F10B: AE 1A 03     	LDX	IECBUFFL		; get the LOAD end pointer low byte
   611 00:F10E: AC 1B 03     	LDY	IECBUFFH		; get the LOAD end pointer high byte
   612                        LAB_F646
   613 00:F111: 60           	RTS
   614                        
   615                        ;***********************************************************************************;
   616                        ;
   617                        ; save RAM to a device
   618                        ; this routine saves a section of memory.
   619                        ; Start Address in IECSTRT
   620                        ; End Address in LOADBUF
   621                        ; LOADBANK must also be specified with the appropriate bank number.
   622                        
   623                        ; Before this routine can be called,
   624                        ;		the SETLFS
   625                        ;		LAB_FFBA(set logical, first and second addresses)
  Sun Nov 21 2021 15:13                                                                                                Page 49


   626                        ;		SETNAM
   627                        ;		LAB_FFBD(clear filename)
   628                        ; 	routines must be called.
   629                        ;***********************************************************************************;
   630                        ;
   631                        ; save RAM to device, A = index to start address, XY = end address low/high
   632                        
   633                        IECSAVERAM:
   634                        ;***********************************************************************************;
   635                        ;
   636                        ; save
   637                        
   638                        LAB_F685
   639 00:F112: A9 00        	LDA	#$00			; clear A
   640 00:F114: 8D 17 03     	STA	IECSTW		; clear serial status byte
   641 00:F117: A9 61        	LDA	#$61			; set secondary address to $01
   642                        					; when a secondary address is to be sent to a device on
   643                        					; the serial bus the address must first be ORed with $60
   644 00:F119: 8D 19 03     	STA	IECSECAD		; save secondary address
   645 00:F11C: AC 18 03     	LDY	IECFNLN		; get file name length
   646 00:F11F: D0 03        	BNE	LAB_F69D		; branch if filename not null
   647 00:F121: 4C A3 F1     	JMP	LAB_F793		; else do missing file name error and return
   648                        
   649                        LAB_F69D
   650 00:F124: 20 C6 F1     	JSR	LAB_F495		; send secondary address and filename
   651 00:F127: 20 22 F2     	JSR	LAB_F728		; print saving [file name]
   652 00:F12A: AD 1C 03     	LDA	IECDEVN		; get device number
   653 00:F12D: 20 D2 EE     	JSR	LAB_EE17		; command devices on the serial bus to LISTEN
   654 00:F130: AD 19 03     	LDA	IECSECAD		; get secondary address
   655 00:F133: 20 8D EF     	JSR	LAB_EEC0		; send secondary address after LISTEN
   656 00:F136: A0 00        	LDY	#$00			; clear index
   657 00:F138: 20 30 F2     	JSR	LAB_FBD2		; copy I/O start address to buffer address
   658 00:F13B: AD 1A 03     	LDA	IECBUFFL		; get buffer address low byte
   659 00:F13E: 20 BA EF     	JSR	LAB_EEE4		; output a byte to the serial bus
   660 00:F141: AD 1B 03     	LDA	IECBUFFH		; get buffer address high byte
   661 00:F144: 20 BA EF     	JSR	LAB_EEE4		; output a byte to the serial bus
   662                        LAB_F6BC
   663                        
   664 00:F147: 20 3D F2     	JSR	LAB_FD11		; check read/write pointer, return Cb = 1 if pointer >= end
   665 00:F14A: B0 25        	BCS	LAB_F6D7		; go do UNLISTEN if at end
   666                        
   667 00:F14C: AD 24 03      	lda LOADBANK	; set load bank
   668 00:F14F: 8B           	phb
   669 00:F150: 48           	pha
   670                        	Index16
+  670 00:F151: C2 10        		REP #$10 		; 16 bit Index registers 
+  670                        		LONGI ON
   671 00:F153: AE 1A 03     	ldx IECBUFFL
   672 00:F156: AB           	plb
   673 00:F157: BD 00 00     	LDA	0,x			; load byte from memory
   674 00:F15A: AB           	plb 			; restore bank
   675                        	index8
+  675 00:F15B: E2 10        		SEP #$10 		; 8 bit Index registers 
+  675                        		LONGI OFF
   676                        
   677 00:F15D: 20 BA EF     	JSR	LAB_EEE4		; output a byte to the serial bus
   678 00:F160: 20 92 F3     	JSR	LAB_FFE1		; scan stop key
  Sun Nov 21 2021 15:13                                                                                                Page 50


   679 00:F163: D0 07        	BNE	LAB_F6D2		; if stop not pressed go increment pointer and loop for next
   680                        
   681                        					; else ..
   682                        
   683                        ; close the serial bus device and flag stop
   684                        
   685                        LAB_F6CB
   686 00:F165: 20 74 F1     	JSR	LAB_F6DA		; close serial bus device
   687 00:F168: A9 00        	LDA	#$00			;.
   688 00:F16A: 38           	SEC				; flag stop
   689 00:F16B: 60           	RTS
   690                        
   691                        LAB_F6D2
   692 00:F16C: 20 4B F2     	JSR	LAB_FD1B		; increment read/write pointer
   693 00:F16F: D0 D6        	BNE	LAB_F6BC		; loop, branch always
   694                        
   695                        ;***********************************************************************************;
   696                        ;
   697                        ; ??
   698                        
   699                        LAB_F6D7
   700 00:F171: 20 DD EF     	JSR	LAB_EF04		; command the serial bus to UNLISTEN
   701                        
   702                        ; close the serial bus device
   703                        
   704                        LAB_F6DA
   705 00:F174: 2C 19 03     	BIT	IECSECAD		; test the secondary address
   706 00:F177: 30 13        	BMI	LAB_F6EF		; if already closed just exit
   707                        
   708 00:F179: AD 1C 03     	LDA	IECDEVN		; get the device number
   709 00:F17C: 20 D2 EE     	JSR	LAB_EE17		; command devices on the serial bus to LISTEN
   710 00:F17F: AD 19 03     	LDA	IECSECAD		; get secondary address
   711 00:F182: 29 EF        	AND	#$EF			; mask the channel number
   712 00:F184: 09 E0        	ORA	#$E0			; OR with the CLOSE command
   713 00:F186: 20 8D EF     	JSR	LAB_EEC0		; send secondary address after LISTEN
   714 00:F189: 20 DD EF     	JSR	LAB_EF04		; command the serial bus to UNLISTEN
   715                        LAB_F6EF
   716 00:F18C: 18           	CLC				; flag ok
   717 00:F18D: 60           	RTS
   718                        
   719                        ;***********************************************************************************;
   720                        ;
   721                        ; file error messages
   722                        LAB_F77E
   723 00:F18E: A9 01        	LDA	#$01			; too many files
   724 00:F190: 2C           	.byte	$2C			; makes next line BIT LAB_02A9
   725                        LAB_F781
   726 00:F191: A9 02        	LDA	#$02			; file already open
   727 00:F193: 2C           	.byte	$2C			; makes next line BIT LAB_03A9
   728                        LAB_F784
   729 00:F194: A9 03        	LDA	#$03			; file not open
   730 00:F196: 2C           	.byte	$2C			; makes next line BIT LAB_04A9
   731                        LAB_F787
   732 00:F197: A9 04        	LDA	#$04			; file not found
   733 00:F199: 2C           	.byte	$2C			; makes next line BIT LAB_05A9
   734                        LAB_F78A
   735 00:F19A: A9 05        	LDA	#$05			; device not present
  Sun Nov 21 2021 15:13                                                                                                Page 51


   736 00:F19C: 2C           	.byte	$2C			; makes next line BIT LAB_06A9
   737                        LAB_F78D
   738 00:F19D: A9 06        	LDA	#$06			; not input file
   739 00:F19F: 2C           	.byte	$2C			; makes next line BIT LAB_07A9
   740                        LAB_F790
   741 00:F1A0: A9 07        	LDA	#$07			; not output file
   742 00:F1A2: 2C           	.byte	$2C			; makes next line BIT LAB_08A9
   743                        LAB_F793
   744 00:F1A3: A9 08        	LDA	#$08			; missing file name
   745 00:F1A5: 2C           	.byte	$2C			; makes next line BIT LAB_09A9
   746                        LAB_F796
   747 00:F1A6: A9 09        	LDA	#$09			; illegal device number
   748                        
   749 00:F1A8: 48           	PHA				; save error #
   750 00:F1A9: 20 54 F2     	JSR	LAB_FFCC		; close input and output channels
   751 00:F1AC: A0 00        	LDY	#LAB_F174-LAB_F174
   752                        					; index to "I/O ERROR #"
   753 00:F1AE: 2C 1F 03     	BIT	IECMSGM		; test message mode flag
   754 00:F1B1: 50 0A        	BVC	LAB_F7AC		; exit if kernal messages off
   755                        
   756 00:F1B3: 20 AE F2     	JSR	LAB_F1E6		; display kernel I/O message
   757 00:F1B6: 68           	PLA				; restore error #
   758 00:F1B7: 48           	PHA				; copy error #
   759 00:F1B8: 09 30        	ORA	#'0'			; convert to ASCII
   760 00:F1BA: 20 75 E0     	JSR	OUTCH		; output character to channel
   761                        LAB_F7AC
   762 00:F1BD: 68           	PLA				; pull error number
   763 00:F1BE: 38           	SEC				; flag error
   764 00:F1BF: 60           	RTS
   765                        
   766                        
   767                        ;***********************************************************************************;
   768                        ;
   769                        ; get seconday address and print "Searching..."
   770                        
   771                        LAB_E4BC
   772 00:F1C0: AE 19 03     	LDX	IECSECAD		; get secondary address
   773 00:F1C3: 4C BD F2     	JMP	LAB_F647		; print "Searching..." and return
   774                        
   775                        
   776                        
   777                        ;***********************************************************************************;
   778                        ;
   779                        ; send secondary address and filename
   780                        
   781                        LAB_F495
   782 00:F1C6: AD 19 03     	LDA	IECSECAD		; get secondary address
   783 00:F1C9: 30 43        	BMI	LAB_F4C5		; ok exit if -ve
   784                        
   785 00:F1CB: AC 18 03     	LDY	IECFNLN		; get file name length
   786 00:F1CE: F0 3E        	BEQ	LAB_F4C5		; ok exit if null
   787                        
   788 00:F1D0: AD 1C 03     	LDA	IECDEVN		; get device number
   789 00:F1D3: 20 D2 EE     	JSR	LAB_EE17		; command devices on the serial bus to LISTEN
   790                        
   791 00:F1D6: AD 19 03     	LDA	IECSECAD		; get the secondary address
   792 00:F1D9: 09 F0        	ORA	#$F0			; OR with the OPEN command
  Sun Nov 21 2021 15:13                                                                                                Page 52


   793 00:F1DB: 20 8D EF     	JSR	LAB_EEC0		; send secondary address after LISTEN
   794 00:F1DE: AD 17 03     	LDA	IECSTW			; get serial status byte
   795 00:F1E1: 10 05        	BPL	LAB_F4B2		; branch if device present
   796 00:F1E3: 68           	PLA				; else dump calling address low byte
   797 00:F1E4: 68           	PLA				; dump calling address high byte
   798 00:F1E5: 4C 9A F1     	JMP	LAB_F78A		; do device not present error and return
   799                        LAB_F4B2
   800 00:F1E8: AD 18 03     	LDA	IECFNLN		; get file name length
   801 00:F1EB: F0 1E        	BEQ	LAB_F4C2		; branch if null name
   802 00:F1ED: A8           	tay
   803 00:F1EE: DA           	phx
   804                        	Index16
+  804 00:F1EF: C2 10        		REP #$10 		; 16 bit Index registers 
+  804                        		LONGI ON
   805 00:F1F1: AE 20 03     	ldx IECFNPL
   806 00:F1F4: DA           	phx
   807                        LAB_F4B8
   808                        	Index16
+  808 00:F1F5: C2 10        		REP #$10 		; 16 bit Index registers 
+  808                        		LONGI ON
   809 00:F1F7: FA           	plx
   810 00:F1F8: BD 00 00     	LDA	0,X			; get file name byte
   811 00:F1FB: E8           	inx
   812 00:F1FC: DA           	phx
   813                        	Index8
+  813 00:F1FD: E2 10        		SEP #$10 		; 8 bit Index registers 
+  813                        		LONGI OFF
   814 00:F1FF: 20 BA EF     	JSR	LAB_EEE4		; output a byte to the serial bus
   815 00:F202: 88           	dey
   816 00:F203: D0 F0        	BNE	LAB_F4B8		; loop if not all done
   817                        	Index16
+  817 00:F205: C2 10        		REP #$10 		; 16 bit Index registers 
+  817                        		LONGI ON
   818 00:F207: FA           	plx
   819                        	Index8
+  819 00:F208: E2 10        		SEP #$10 		; 8 bit Index registers 
+  819                        		LONGI OFF
   820 00:F20A: FA           	plx
   821                        LAB_F4C2
   822 00:F20B: 20 DD EF     	JSR	LAB_EF04		; command the serial bus to UNLISTEN
   823                        LAB_F4C5
   824 00:F20E: 18           	CLC				; flag ok
   825 00:F20F: 60           	RTS
   826                        
   827                        ;***********************************************************************************;
   828                        ;
   829                        ; set LOAD address if secondary address = 0
   830                        
   831                        LAB_E4C1
   832 00:F210: 8A           	TXA				; copy secondary address
   833 00:F211: D0 0C        	BNE	LAB_E4CC		; load location not set in LOAD call, so
   834                        					; continue with load
   835 00:F213: AD 1B 03     	LDA	IECBUFFH		; get load address high byte
   836 00:F216: 8D 23 03     	STA	LOADBUFH		; save program start address high byte
   837 00:F219: AD 1A 03     	LDA	IECBUFFL		; get load address low byte
   838 00:F21C: 8D 22 03     	STA	LOADBUFL		; save program start address low byte
   839                        
  Sun Nov 21 2021 15:13                                                                                                Page 53


   840                        LAB_E4CC
   841 00:F21F: 4C F4 F2     	JMP	LAB_F66A		; display "LOADING" or "VERIFYING" and return
   842                        
   843                        
   844                        ;***********************************************************************************;
   845                        ;
   846                        ; print saving [file name]
   847                        
   848                        LAB_F728
   849 00:F222: AD 1F 03     	LDA	IECMSGM		; get message mode flag
   850 00:F225: 10 08        	BPL	LAB_F727		; exit if control messages off
   851                        
   852 00:F227: A0 2A        	LDY	#LAB_F1C5-LAB_F174
   853                        					; index to "SAVING "
   854 00:F229: 20 AE F2     	JSR	LAB_F1E6		; display kernel I/O message
   855 00:F22C: 4C D1 F2     	JMP	LAB_F659		; print file name and return
   856                        LAB_F727
   857 00:F22F: 60           	RTS
   858                        
   859                        ;***********************************************************************************;
   860                        ;
   861                        ; copy I/O start address to buffer address
   862                        
   863                        LAB_FBD2
   864 00:F230: AD 1E 03     	LDA	IECSTRTH		; get I/O start address high byte
   865 00:F233: 8D 1B 03     	STA	IECBUFFH		; set buffer address high byte
   866 00:F236: AD 1D 03     	LDA	IECSTRTL		; get I/O start address low byte
   867 00:F239: 8D 1A 03     	STA	IECBUFFL		; set buffer address low byte
   868 00:F23C: 60           	RTS
   869                        
   870                        
   871                        
   872                        ;***********************************************************************************;
   873                        ;
   874                        ; check read/write pointer
   875                        ; return Cb = 1 if pointer >= end
   876                        
   877                        LAB_FD11
   878 00:F23D: 38           	SEC				; set carry for subtract
   879 00:F23E: AD 1A 03     	LDA	IECBUFFL		; get buffer address low byte
   880 00:F241: ED 22 03     	SBC	LOADBUFL		; subtract buffer end low byte
   881 00:F244: AD 1B 03     	LDA	IECBUFFH		; get buffer address high byte
   882 00:F247: ED 23 03     	SBC	LOADBUFH		; subtract buffer end high byte
   883 00:F24A: 60           	RTS
   884                        
   885                        ;***********************************************************************************;
   886                        ;
   887                        ; increment read/write pointer
   888                        
   889                        LAB_FD1B
   890 00:F24B: EE 1A 03     	INC	IECBUFFL		; increment buffer address low byte
   891 00:F24E: D0 03        	BNE	LAB_FD21		; if no overflow skip the high byte increment
   892                        
   893 00:F250: EE 1B 03     	INC	IECBUFFH		; increment buffer address high byte
   894                        LAB_FD21
   895 00:F253: 60           	RTS
   896                        
  Sun Nov 21 2021 15:13                                                                                                Page 54


   897                        ;***********************************************************************************;
   898                        ;
   899                        ; close input and output channels
   900                        
   901                        ; this routine is called to clear all open channels and restore the I/O channels to
   902                        ; their original default values. It is usually called after opening other I/O
   903                        ; channels and using them for input/output operations. The default input device is
   904                        ; 0, the keyboard. The default output device is 3, the screen.
   905                        
   906                        ; If one of the channels to be closed is to the serial port, an UNTALK signal is sent
   907                        ; first to clear the input channel or an UNLISTEN is sent to clear the output channel.
   908                        ; By not calling this routine and leaving listener(s) active on the serial bus,
   909                        ; several devices can receive the same data from the VIC at the same time. One way to
   910                        ; take advantage of this would be to command the printer to TALK and the disk to
   911                        ; LISTEN. This would allow direct printing of a disk file.
   912                        
   913                        LAB_FFCC
   914 00:F254: 20 DD EF     	JSR	LAB_EF04		; command the serial bus to UNLISTEN
   915                        LAB_F3FC
   916 00:F257: 20 CF EF     	JSR	LAB_EEF6		; command the serial bus to UNTALK
   917                        LAB_F403
   918 00:F25A: 60           	RTS
   919                        
   920                        ;***********************************************************************************;
   921                        ;
   922                        ; kernel I/O messages
   923                        
   924                        LAB_F174
   925 00:F25B: 0A 0D 49 2F  	.byte	$0A,$0D,"I/O ERROR #",0
       00:F25F: 4F 20 45 52 
       00:F263: 52 4F 52 20 
       00:F267: 23 00 
   926                        LAB_F180
   927 00:F269: 0A 0D 53 45  	.byte	$0A,$0D,"SEARCHING ",0
       00:F26D: 41 52 43 48 
       00:F271: 49 4E 47 20 
       00:F275: 00 
   928                        LAB_F18B
   929 00:F276: 46 4F 52 20  	.byte	"FOR ",0
       00:F27A: 00 
   930                        LAB_F1BD
   931 00:F27B: 0A 0D 4C 4F  	.byte	$0A,$0D,"LOADING",0
       00:F27F: 41 44 49 4E 
       00:F283: 47 00 
   932                        LAB_F1C5
   933 00:F285: 0A 0D 53 41  	.byte	$0A,$0D,"SAVING ",0
       00:F289: 56 49 4E 47 
       00:F28D: 20 00 
   934                        LAB_F1CD
   935 00:F28F: 0A 0D 56 45  	.byte	$0A,$0D,"VERIFYING",0
       00:F293: 52 49 46 59 
       00:F297: 49 4E 47 00 
   936                        LAB_F1D7
   937 00:F29B: 0A 0D 46 4F  	.byte	$0A,$0D,"FOUND ",0
       00:F29F: 55 4E 44 20 
       00:F2A3: 00 
   938                        LAB_F1DE
  Sun Nov 21 2021 15:13                                                                                                Page 55


   939 00:F2A4: 0A 0D 4F 4B  	.byte	$0A,$0D,"OK",0
       00:F2A8: 00 
   940                        
   941                        
   942                        ;***********************************************************************************;
   943                        ;
   944                        ; display control I/O message if in direct mode
   945                        
   946                        LAB_F1E2
   947 00:F2A9: 2C 1F 03     	BIT	IECMSGM		; test message mode flag
   948 00:F2AC: 10 0D        	BPL	LAB_F1F3		; exit if control messages off
   949                        
   950                        ; display kernel I/O message
   951                        
   952                        LAB_F1E6
   953 00:F2AE: B9 5B F2     	LDA	LAB_F174,Y		; get byte from message table
   954 00:F2B1: F0 08        	Beq	LAB_F1F3		; loop if not end of message
   955 00:F2B3: 08           	PHP				; save status
   956 00:F2B4: 20 75 E0     	jsr	OUTCH		; output character to channel
   957 00:F2B7: C8           	INY				; increment index
   958 00:F2B8: 28           	PLP				; restore status
   959 00:F2B9: 80 F3        	BRA	LAB_F1E6		; loop if not end of message
   960                        
   961                        LAB_F1F3
   962 00:F2BB: 18           	CLC				;.
   963 00:F2BC: 60           	RTS
   964                        
   965                        ;***********************************************************************************;
   966                        ;
   967                        ; print "searching"
   968                        
   969                        LAB_F647
   970 00:F2BD: AD 1F 03     	LDA	IECMSGM		; get message mode flag
   971 00:F2C0: 10 31        	BPL	LAB_F669		; exit if control messages off
   972                        
   973 00:F2C2: A0 0E        	LDY	#LAB_F180-LAB_F174
   974                        					; index to "SEARCHING "
   975 00:F2C4: 20 AE F2     	JSR	LAB_F1E6		; display kernel I/O message
   976 00:F2C7: AD 18 03     	LDA	IECFNLN		; get file name length
   977 00:F2CA: F0 27        	BEQ	LAB_F669		; exit if null name
   978                        
   979 00:F2CC: A0 1B        	LDY	#LAB_F18B-LAB_F174
   980                        					; else index to "FOR "
   981 00:F2CE: 20 AE F2     	JSR	LAB_F1E6		; display kernel I/O message
   982                        
   983                        ; print file name
   984                        
   985                        LAB_F659
   986 00:F2D1: AC 18 03     	LDY	IECFNLN		; get file name length
   987 00:F2D4: F0 1D        	BEQ	LAB_F669		; exit if null file name
   988                        
   989 00:F2D6: DA           	phx
   990                        	Index16
+  990 00:F2D7: C2 10        		REP #$10 		; 16 bit Index registers 
+  990                        		LONGI ON
   991 00:F2D9: AE 20 03     	ldx IECFNPL
   992 00:F2DC: DA           	phx
  Sun Nov 21 2021 15:13                                                                                                Page 56


   993                        LAB_F65F
   994                        	Index16
+  994 00:F2DD: C2 10        		REP #$10 		; 16 bit Index registers 
+  994                        		LONGI ON
   995 00:F2DF: FA           	plx
   996 00:F2E0: BD 00 00     	LDA	0,X			; get file name byte
   997 00:F2E3: E8           	inx
   998 00:F2E4: DA           	phx
   999                        	Index8
+  999 00:F2E5: E2 10        		SEP #$10 		; 8 bit Index registers 
+  999                        		LONGI OFF
  1000 00:F2E7: 20 75 E0     	JSR	OUTCH		; output character to channel
  1001 00:F2EA: 88           	dey
  1002 00:F2EB: D0 F0        	BNE	LAB_F65F		; loop if more to do
  1003                        	Index16
+ 1003 00:F2ED: C2 10        		REP #$10 		; 16 bit Index registers 
+ 1003                        		LONGI ON
  1004 00:F2EF: FA           	plx
  1005                        	Index8
+ 1005 00:F2F0: E2 10        		SEP #$10 		; 8 bit Index registers 
+ 1005                        		LONGI OFF
  1006 00:F2F2: FA           	plx
  1007                        LAB_F669
  1008 00:F2F3: 60           	RTS
  1009                        
  1010                        ; display "LOADING" or "VERIFYING"
  1011                        
  1012                        LAB_F66A
  1013 00:F2F4: A0 20        	LDY	#LAB_F1BD-LAB_F174
  1014                        					; point to "LOADING"
  1015                        LAB_F672
  1016 00:F2F6: 4C A9 F2     	JMP	LAB_F1E2		; display kernel I/O message if in direct mode and return
  1017                        
  1018                        LAB_FE49
  1019 00:F2F9: 8D 18 03     	STA	IECFNLN		; set file name length
  1020 00:F2FC: 8E 20 03     	STX	IECFNPL		; set file name pointer low byte
  1021 00:F2FF: 8C 21 03     	STY	IECFNPH		; set file name pointer high byte
  1022 00:F302: 60           	RTS
  1023                        
  1024                        LAB_FE50
  1025 00:F303: 8D 26 03         STA IECLFN 		; SET LOGICAL FILE NUMBER
  1026 00:F306: 8E 1C 03     	STX	IECDEVN		; set device number
  1027 00:F309: 8C 19 03     	STY	IECSECAD	; set secondary address or command
  1028 00:F30C: 60           	RTS
  1029                        
  1030                        
  1031                        
  1032                        LAB_F160
  1033 00:F30D: 48           	PHA				; save A
  1034 00:F30E: AD 1E FE     	LDA	via1ier		; get VIA 1 IER
  1035 00:F311: F0 0C        	BEQ	LAB_F172		; branch if no interrupts enabled. this branch will
  1036                        					; never be taken as b7 of IER always reads as 1
  1037                        					; according to the 6522 data sheet
  1038                        LAB_F166
  1039 00:F313: AD 1E FE     	LDA	via1ier		; get VIA 1 IER
  1040 00:F316: 29 60        	AND	#$60			; mask 0xx0 0000, T1 and T2 interrupts
  1041 00:F318: D0 F9        	BNE	LAB_F166		; loop if T1 or T2 active
  Sun Nov 21 2021 15:13                                                                                                Page 57


  1042                        
  1043 00:F31A: A9 10        	LDA	#$10			; disable CB1 interrupt
  1044 00:F31C: 8D 1E FE     	STA	via1ier		; set VIA 1 IER
  1045                        LAB_F172
  1046 00:F31F: 68           	PLA				; restore A
  1047 00:F320: 60           	RTS
  1048                        
  1049                        
  1050                        ;***********************************************************************************;
  1051                        ;
  1052                        ; initialize I/O registers
  1053                        
  1054                        INITIEC
  1055 00:F321: A9 7F        	LDA	#$7F			; disable all interrupts
  1056 00:F323: 8D 1E FE     	STA	via1ier			; on VIA 1 IER ..
  1057 00:F326: 8D 2E FE     	STA	via2ier			; .. and VIA 2 IER
  1058                        
  1059 00:F329: A9 40        	LDA	#$40			; set T1 free run, T2 clock �2,
  1060                        						; SR disabled, latches disabled
  1061 00:F32B: 8D 2B FE     	STA	via2acr		; set VIA 2 ACR
  1062                        
  1063 00:F32E: A9 40        	LDA	#$40			; set T1 free run, T2 clock �2,
  1064                        					; SR disabled, latches disabled
  1065 00:F330: 8D 1B FE     	STA	via1acr		; set VIA 1 ACR
  1066                        
  1067 00:F333: A9 FE        	LDA	#$FE			; CB2 high, RS232 Tx
  1068                        					; CB1 +ve edge,
  1069                        					; CA2 high, tape motor off
  1070                        					; CA1 -ve edge
  1071 00:F335: 8D 1C FE     	STA	via1pcr		; set VIA 1 PCR
  1072                        
  1073 00:F338: A9 DE        	LDA	#$DE			; CB2 low, serial data out high
  1074                        					; CB1 +ve edge,
  1075                        					; CA2 high, serial clock out low
  1076                        					; CA1 -ve edge
  1077 00:F33A: 8D 2C FE     	STA	via2pcr		; set VIA 2 PCR
  1078                        
  1079 00:F33D: A2 00        	LDX	#$00			; all inputs, RS232 interface or parallel user port
  1080 00:F33F: 8E 12 FE     	STX	via1ddrb		; set VIA 1 DDRB
  1081                        
  1082 00:F342: A2 FF        	LDX	#$FF			; all outputs, keyboard column
  1083 00:F344: 8E 22 FE     	STX	via2ddrb		; set VIA 2 DDRB
  1084                        
  1085 00:F347: A2 00        	LDX	#$00			; all inputs, keyboard row
  1086 00:F349: 8E 23 FE     	STX	via2ddra		; set VIA 2 DDRA
  1087                        
  1088 00:F34C: A2 C0        	LDX	#$C0			; OIII IIII, ATN out, light pen, joystick, serial data
  1089                        					; in, serial clk in
  1090 00:F34E: 8E 13 FE     	STX	via1ddra		; set VIA 1 DDRA
  1091                        
  1092 00:F351: A2 00        	LDX	#$00			; ATN out low, set ATN high
  1093 00:F353: 8E 1F FE     	STX	via1ora			; set VIA 1 DRA, no handshake
  1094                        
  1095 00:F356: A2 40        	LDX	#$40			; assert CS on DS1302
  1096 00:F358: 8E 1F FE     	STX	via1ora			; set VIA 1 DRA, no handshake
  1097                        
  1098 00:F35B: 20 65 F0     	JSR	LAB_EF84		; set serial clock high
  Sun Nov 21 2021 15:13                                                                                                Page 58


  1099 00:F35E: 20 6E F0     	JSR	LAB_EF8D		; set serial clock low
  1100                        
  1101                        
  1102                        ;***********************************************************************************;
  1103                        ;
  1104                        ; set 60Hz and enable timer
  1105 00:F361: A9 C0        	LDA	#$C0			; enable T1 interrupt
  1106 00:F363: 8D 2E FE     	STA	via2ier		; set VIA 2 IER
  1107                        ;	LDA	#$26			; set timer constant low byte [PAL]
  1108                        ;	LDA	#$89			; set timer constant low byte [NTSC]
  1109 00:F366: A9 FF        	LDA	#$FF			; set timer constant low byte [4MHz]
  1110 00:F368: 8D 24 FE     	STA	via2t1cl		; set VIA 2 T1C_l
  1111                        ;	LDA	#$48			; set timer constant high byte [PAL]
  1112                        ;	LDA	#$42			; set timer constant high byte [NTSC]
  1113 00:F36B: A9 FF        	LDA	#$FF			; set timer constant high byte [4MHz]
  1114 00:F36D: 8D 25 FE     	STA	via2t1ch		; set VIA 2 T1C_h
  1115                        
  1116 00:F370: A9 00        	lda #$00
  1117 00:F372: 8D 14 03     	sta IECBCI
  1118 00:F375: 8D 25 03     	STA IECOPENF
  1119 00:F378: 60           	RTS
  1120                        
  1121                        
  1122                        IEC_DELAY:
  1123 00:F379: 48           	pha
  1124 00:F37A: 68           	pla
  1125 00:F37B: 48           	pha
  1126 00:F37C: 68           	pla
  1127 00:F37D: 48           	pha
  1128 00:F37E: 68           	pla
  1129 00:F37F: 48           	pha
  1130 00:F380: 68           	pla
  1131                        
  1132 00:F381: 48           	pha
  1133 00:F382: 68           	pla
  1134 00:F383: 48           	pha
  1135 00:F384: 68           	pla
  1136 00:F385: 48           	pha
  1137 00:F386: 68           	pla
  1138 00:F387: 48           	pha
  1139 00:F388: 68           	pla
  1140 00:F389: 48           	pha
  1141 00:F38A: 68           	pla
  1142 00:F38B: 48           	pha
  1143 00:F38C: 68           	pla
  1144 00:F38D: 48           	pha
  1145 00:F38E: 68           	pla
  1146 00:F38F: 48           	pha
  1147 00:F390: 68           	pla
  1148 00:F391: 60           	rts
  1149                        
  1150                        LAB_FFE1
  1151 00:F392: 20 74 FF     	jsr	INPVEC
  1152 00:F395: C9 03        	cmp #$03
  1153 00:F397: 60           	rts
  1154                        
  1155                        
  Sun Nov 21 2021 15:13                                                                                                Page 59


  1156                        ;***********************************************************************************;
  1157                        ;
  1158                        ; close a specified logical file
  1159                        
  1160                        ; this routine is used to close a logical file after all I/O operations have been
  1161                        ; completed on that file. This routine is called after the accumulator is loaded
  1162                        ; with the logical file number to be closed, the same number used when the file was
  1163                        ; opened using the OPEN routine.
  1164                        
  1165                        LAB_F34A
  1166 00:F398: 20 65 F4     	JSR	LAB_F3D4		; find file A
  1167 00:F39B: F0 02        	BEQ	LAB_F351		; if the file is found go close it
  1168                        
  1169 00:F39D: 18           	CLC				; else thr file was closed so just flag ok
  1170 00:F39E: 60           	RTS
  1171                        
  1172                        ; found the file so close it
  1173                        LAB_F351
  1174 00:F39F: 20 71 F4     	JSR	LAB_F3DF		; set file details from table,X
  1175 00:F3A2: 8A           	TXA				; copy file index to A
  1176 00:F3A3: 48           	PHA				; save file index
  1177 00:F3A4: AD 1C 03     	LDA	IECDEVN		; get device number
  1178                        ; do serial bus device file close
  1179                        
  1180                        LAB_F3AE
  1181 00:F3A7: 20 74 F1     	JSR	LAB_F6DA		; close serial bus device
  1182                        LAB_F3B1
  1183 00:F3AA: 68           	PLA				; restore file index
  1184                        ;
  1185                        ; close file index X
  1186                        
  1187                        LAB_F3B2
  1188 00:F3AB: AA           	TAX				; copy index to file to close
  1189 00:F3AC: CE 25 03     	DEC	IECOPENF		; decrement open file count
  1190 00:F3AF: EC 25 03     	CPX	IECOPENF		; compare index with open file count
  1191 00:F3B2: F0 15        	BEQ	LAB_F3CD		; exit if equal, last entry was closing file
  1192                        
  1193                        					; else entry was not last in list so copy last table entry
  1194                        					; file details over the details of the closing one
  1195 00:F3B4: AC 25 03     	LDY	IECOPENF		; get open file count as index
  1196 00:F3B7: B9 B0 03     	LDA	PTRLFT,Y		; get last+1 logical file number from logical file table
  1197 00:F3BA: 9D B0 03     	STA	PTRLFT,X		; save logical file number over closed file
  1198 00:F3BD: B9 BA 03     	LDA	PTRDNT,Y		; get last+1 device number from device number table
  1199 00:F3C0: 9D BA 03     	STA	PTRDNT,X		; save device number over closed file
  1200 00:F3C3: B9 C4 03     	LDA	PTRSAT,Y		; get last+1 secondary address from secondary address table
  1201 00:F3C6: 9D C4 03     	STA	PTRSAT,X		; save secondary address over closed file
  1202                        LAB_F3CD
  1203 00:F3C9: 18           	CLC				;.
  1204                        LAB_F3CE
  1205 00:F3CA: 60           	RTS
  1206                        
  1207                        ;***********************************************************************************;
  1208                        ;
  1209                        ; open a logical file
  1210                        
  1211                        ; this routine is used to open a logical file. Once the logical file is set up it
  1212                        ; can be used for input/output operations. Most of the I/O KERNAL routines call on
  Sun Nov 21 2021 15:13                                                                                                Page 60


  1213                        ; this routine to create the logical files to operate on. No arguments need to be
  1214                        ; set up to use this routine, but both the SETLFS, LAB_FFBA, and SETNAM, LAB_FFBD,
  1215                        ; KERNAL routines must be called before using this routine.
  1216                        
  1217                        LAB_F40A
  1218 00:F3CB: AE 26 03     	LDX	IECLFN		; get logical file number
  1219 00:F3CE: D0 03        	BNE	LAB_F411		; branch if there is a file
  1220                        
  1221 00:F3D0: 4C 9D F1     	JMP	LAB_F78D		; else do not input file error and return
  1222                        
  1223                        LAB_F411
  1224 00:F3D3: 20 5F F4     	JSR	LAB_F3CF		; find file
  1225 00:F3D6: D0 03        	BNE	LAB_F419		; branch if file not found
  1226                        
  1227 00:F3D8: 4C 91 F1     	JMP	LAB_F781		; else do file already open error and return
  1228                        
  1229                        LAB_F419
  1230 00:F3DB: AE 25 03     	LDX	IECOPENF		; get open file count
  1231 00:F3DE: E0 0A        	CPX	#$0A			; compare with max
  1232 00:F3E0: 90 03        	BCC	LAB_F422		; branch if less
  1233                        
  1234 00:F3E2: 4C 8E F1     	JMP	LAB_F77E		; else do too many files error and return
  1235                        
  1236                        LAB_F422
  1237 00:F3E5: EE 25 03     	INC	IECOPENF		; increment open file count
  1238 00:F3E8: AD 26 03     	LDA	IECLFN		; get logical file number
  1239 00:F3EB: 9D B0 03     	STA	PTRLFT,X		; save to logical file table
  1240 00:F3EE: AD 19 03     	LDA	IECSECAD		; get secondary address
  1241 00:F3F1: 09 60        	ORA	#$60			; OR with the OPEN CHANNEL command
  1242 00:F3F3: 8D 19 03     	STA	IECSECAD		; set secondary address
  1243 00:F3F6: 9D C4 03     	STA	PTRSAT,X		; save to secondary address table
  1244 00:F3F9: AD 1C 03     	LDA	IECDEVN		; get device number
  1245 00:F3FC: 9D BA 03     	STA	PTRDNT,X		; save to device number table
  1246                        					; serial bus device
  1247 00:F3FF: 20 C6 F1     	JSR	LAB_F495		; send secondary address and filename
  1248 00:F402: 18           	CLC				; flag ok
  1249                        LAB_F494
  1250 00:F403: 60           	RTS
  1251                        
  1252                        ;***********************************************************************************;
  1253                        ;
  1254                        ; open a channel for input
  1255                        
  1256                        ; any logical file that has already been opened by the OPEN routine, LAB_FFC0, can be
  1257                        ; defined as an input channel by this routine. the device on the channel must be an
  1258                        ; input device or an error will occur and the routine will abort.
  1259                        
  1260                        ; if you are getting data from anywhere other than the keyboard, this routine must be
  1261                        ; called before using either the CHRIN routine, LAB_FFCF, or the GETIN routine,
  1262                        ; LAB_FFE4. if you are getting data from the keyboard and no other input channels are
  1263                        ; open then the calls to this routine and to the OPEN routine, LAB_FFC0, are not needed.
  1264                        
  1265                        ; when used with a device on the serial bus this routine will automatically send the
  1266                        ; listen address specified by the OPEN routine, LAB_FFC0, and any secondary address.
  1267                        
  1268                        ; possible errors are:
  1269                        ;
  Sun Nov 21 2021 15:13                                                                                                Page 61


  1270                        ;	3 : file not open
  1271                        ;	5 : device not present
  1272                        ;	6 : file is not an input file
  1273                        
  1274                        LAB_F2C7
  1275 00:F404: 20 5F F4     	JSR	LAB_F3CF		; find file
  1276 00:F407: F0 03        	BEQ	LAB_F2CF		; branch if file opened
  1277 00:F409: 4C 94 F1     	JMP	LAB_F784		; do file not open error and return
  1278                        
  1279                        LAB_F2CF
  1280 00:F40C: 20 71 F4     	JSR	LAB_F3DF		; set file details from table,X
  1281 00:F40F: AD 1C 03     	LDA	IECDEVN		; get device number
  1282                        					; device was serial bus device
  1283                        LAB_F2F0
  1284 00:F412: AA           	TAX				; copy device number to X
  1285 00:F413: 20 CF EE     	JSR	LAB_EE14		; command a serial bus device to TALK
  1286 00:F416: AD 19 03     	LDA	IECSECAD		; get secondary address
  1287 00:F419: 10 06        	BPL	LAB_F2FE		;.
  1288                        
  1289 00:F41B: 20 A9 EF     	JSR	LAB_EED3		; wait for bus end after send
  1290 00:F41E: 4C 24 F4     	JMP	LAB_F301		;.
  1291                        
  1292                        LAB_F2FE
  1293 00:F421: 20 9C EF     	JSR	LAB_EECE		; send secondary address after TALK
  1294                        LAB_F301
  1295 00:F424: 8A           	TXA				; copy device back to A
  1296 00:F425: 2C 17 03     	BIT	IECSTW			; test serial status byte
  1297 00:F428: 10 03        	BPL	LAB_F2EC		; if device present save device number and exit
  1298                        
  1299 00:F42A: 4C 9A F1     	JMP	LAB_F78A		; do device not present error and return
  1300                        
  1301                        LAB_F2EC
  1302 00:F42D: 8D 27 03     	STA	IECIDN		; save input device number
  1303 00:F430: 18           	CLC				; flag ok
  1304 00:F431: 60           	RTS
  1305                        
  1306                        ;***********************************************************************************;
  1307                        ;
  1308                        ; open a channel for output
  1309                        
  1310                        ; any logical file that has already been opened by the OPEN routine, LAB_FFC0, can be
  1311                        ; defined as an output channel by this routine the device on the channel must be an
  1312                        ; output device or an error will occur and the routine will abort.
  1313                        
  1314                        ; if you are sending data to anywhere other than the screen this routine must be
  1315                        ; called before using the CHROUT routine, LAB_FFD2. if you are sending data to the
  1316                        ; screen and no other output channels are open then the calls to this routine and to
  1317                        ; the OPEN routine, LAB_FFC0, are not needed.
  1318                        
  1319                        ; when used with a device on the serial bus this routine will automatically send the
  1320                        ; listen address specified by the OPEN routine, LAB_FFC0, and any secondary address.
  1321                        
  1322                        ; possible errors are:
  1323                        ;
  1324                        ;	3 : file not open
  1325                        ;	5 : device not present
  1326                        ;	7 : file is not an output file
  Sun Nov 21 2021 15:13                                                                                                Page 62


  1327                        
  1328                        LAB_F309
  1329 00:F432: 20 5F F4     	JSR	LAB_F3CF		; find file
  1330 00:F435: F0 03        	BEQ	LAB_F311		; branch if file found
  1331                        
  1332 00:F437: 4C 94 F1     	JMP	LAB_F784		; do file not open error and return
  1333                        
  1334                        LAB_F311
  1335 00:F43A: 20 71 F4     	JSR	LAB_F3DF		; set file details from table,X
  1336 00:F43D: AD 1C 03     	LDA	IECDEVN		; get device number
  1337 00:F440: AA           	TAX				; copy device number
  1338 00:F441: 20 D2 EE     	JSR	LAB_EE17		; command devices on the serial bus to LISTEN
  1339 00:F444: AD 19 03     	LDA	IECSECAD		; get secondary address
  1340 00:F447: 10 05        	BPL	LAB_F33F		; branch if address to send
  1341                        
  1342 00:F449: 20 93 EF     	JSR	LAB_EEC5		; else set serial ATN high
  1343 00:F44C: D0 03        	BNE	LAB_F342		; branch always
  1344                        LAB_F33F
  1345 00:F44E: 20 8D EF     	JSR	LAB_EEC0		; send secondary address after LISTEN
  1346                        LAB_F342
  1347 00:F451: 8A           	TXA				; copy device number back to A
  1348 00:F452: 2C 17 03     	BIT	IECSTW		; test serial status byte
  1349 00:F455: 10 03        	BPL	LAB_F32E		; if device present save output device number and exit
  1350 00:F457: 4C 9A F1     	JMP	LAB_F78A		; else do device not present error and return
  1351                        
  1352                        LAB_F32E
  1353 00:F45A: 8D 28 03     	STA	IECODN		; save output device number
  1354 00:F45D: 18           	CLC				; flag ok
  1355 00:F45E: 60           	RTS
  1356                        
  1357                        ;***********************************************************************************;
  1358                        ;
  1359                        ; find file
  1360                        
  1361                        LAB_F3CF
  1362 00:F45F: A9 00        	LDA	#$00			; clear A
  1363 00:F461: 8D 17 03     	STA	IECSTW		; clear serial status byte
  1364 00:F464: 8A           	TXA				; copy logical file number to A
  1365                        
  1366                        ; find file A
  1367                        
  1368                        LAB_F3D4
  1369 00:F465: AE 25 03     	LDX	IECOPENF		; get open file count
  1370                        LAB_F3D6
  1371 00:F468: CA           	DEX				; decrememnt count to give index
  1372 00:F469: 30 18        	BMI	LAB_F3EE		; exit if no files
  1373                        
  1374 00:F46B: DD B0 03     	CMP	PTRLFT,X		; compare logical file number with table logical file number
  1375 00:F46E: D0 F8        	BNE	LAB_F3D6		; loop if no match
  1376                        
  1377 00:F470: 60           	RTS
  1378                        
  1379                        
  1380                        ;***********************************************************************************;
  1381                        ;
  1382                        ; set file details from table,X
  1383                        
  Sun Nov 21 2021 15:13                                                                                                Page 63


  1384                        LAB_F3DF
  1385 00:F471: BD B0 03     	LDA	PTRLFT,X		; get logical file from logical file table
  1386 00:F474: 8D 26 03     	STA	IECLFN		; set logical file
  1387 00:F477: BD BA 03     	LDA	PTRDNT,X		; get device number from device number table
  1388 00:F47A: 8D 1C 03     	STA	IECDEVN		; set device number
  1389 00:F47D: BD C4 03     	LDA	PTRSAT,X		; get secondary address from secondary address table
  1390 00:F480: 8D 19 03     	STA	IECSECAD		; set secondary address
  1391                        LAB_F3EE
  1392 00:F483: 60           	RTS
  1393                        
  1394                        ;***********************************************************************************;
  1395                        ;
  1396                        ; close input and output channels
  1397                        
  1398                        ; this routine is called to clear all open channels and restore the I/O channels to
  1399                        ; their original default values. It is usually called after opening other I/O
  1400                        ; channels and using them for input/output operations. The default input device is
  1401                        ; 0, the keyboard. The default output device is 3, the screen.
  1402                        
  1403                        ; If one of the channels to be closed is to the serial port, an UNTALK signal is sent
  1404                        ; first to clear the input channel or an UNLISTEN is sent to clear the output channel.
  1405                        ; By not calling this routine and leaving listener(s) active on the serial bus,
  1406                        ; several devices can receive the same data from the VIC at the same time. One way to
  1407                        ; take advantage of this would be to command the printer to TALK and the disk to
  1408                        ; LISTEN. This would allow direct printing of a disk file.
  1409                        
  1410                        LAB_F3F3
  1411 00:F484: 20 DD EF     	JSR	LAB_EF04		; command the serial bus to UNLISTEN
  1412 00:F487: 20 CF EF     	JSR	LAB_EEF6		; command the serial bus to UNTALK
  1413 00:F48A: A9 00        	LDA	#$00			; set for keyboard
  1414 00:F48C: 8D 28 03     	STA	IECODN		; set output device number to NULL
  1415 00:F48F: 8D 27 03     	STA	IECIDN		; set input device number to NULL
  1416 00:F492: 60           	RTS
   353                        
   354                        
   355                        
   356                        ;______________________________________________________________
   357                                INCLUDE 'RTC.ASM'
     1                        
     2                        ;__RTC___________________________________________________________
     3                        ;
     4                        ;	DS1302 DRIVERS FOR THE RBC 65c816 SBC
     5                        ;
     6                        ;	WRITTEN BY: DAN WERNER -- 10/8/2017
     7                        ;
     8                        ;________________________________________________________________
     9                        ;
    10                        ; DATA CONSTANTS
    11                        ;________________________________________________________________
    12                        
    13             00000080   mask_data:  .EQU    $80     ; RTC data line
    14             00000040   mask_clk:   .EQU    $40     ; RTC Serial Clock line
    15             00000020   mask_rd:    .EQU    $20     ; Enable data read from RTC
    16             00000010   mask_rst:   .EQU    $10     ; De-activate RTC reset line
    17                        
    18                        
    19                        
  Sun Nov 21 2021 15:13                                                                                                Page 64


    20                        ;__RTC_WRITE____________________________________________________
    21                        ;
    22                        ; WRITE DATA TO RTC REGISTER OR NVRAM
    23                        ;
    24                        ; input address in X
    25                        ; input value in A
    26                        ;
    27                        ;_______________________________________________________________
    28                        RTC_WRITE:
    29 00:F493: DA               PHX
    30 00:F494: 5A               PHY
    31 00:F495: 08               PHP
    32 00:F496: E2 30            SEP #$30            ; 8 bit REGISTERS
    33                            LONGA OFF
    34                            LONGI OFF
    35 00:F498: 78               SEI
    36 00:F499: 20 42 F5         JSR RTC_RESET_OFF   ; turn off RTC reset
    37 00:F49C: A8               TAY
    38 00:F49D: 8A               TXA                 ; bring into A the address from D
    39 00:F49E: 29 3F            AND #%00111111      ; keep only bits 6 LSBs, discard 2 MSBs
    40 00:F4A0: 0A               ASL A               ; rotate address bits to the left
    41 00:F4A1: 09 80            ORA #%10000000      ; set MSB to one for DS1302 COMMAND BYTE (WRITE)
    42 00:F4A3: 20 CD F4         JSR RTC_WR          ; write address to DS1302
    43 00:F4A6: 98               TYA                 ; start processing value
    44 00:F4A7: 20 CD F4         JSR RTC_WR          ; write address to DS1302
    45 00:F4AA: 20 37 F5         JSR RTC_RESET_ON    ; turn on RTC reset
    46 00:F4AD: 58               CLI
    47 00:F4AE: 28               PLP
    48 00:F4AF: 7A               PLY
    49 00:F4B0: FA               PLX
    50 00:F4B1: 60               RET
    51                        
    52                        
    53                        ;__RTC_READ_____________________________________________________
    54                        ;
    55                        ; read DATA FROM RTC REGISTER OR NVRAM
    56                        ;
    57                        ; input address in X
    58                        ; output value in A
    59                        ;
    60                        ;_______________________________________________________________
    61                        RTC_READ:
    62 00:F4B2: DA               PHX
    63 00:F4B3: 08               PHP
    64 00:F4B4: E2 30            SEP #$30            ; 8 bit REGISTERS
    65                            LONGA OFF
    66                            LONGI OFF
    67 00:F4B6: 78               SEI
    68 00:F4B7: 20 42 F5         JSR RTC_RESET_OFF   ; turn off RTC reset
    69 00:F4BA: 8A               TXA
    70 00:F4BB: 29 3F            AND #%00111111      ; keep only bits 6 LSBs, discard 2 MSBs
    71 00:F4BD: 0A               ASL A               ; rotate address bits to the left
    72 00:F4BE: 09 81            ORA #%10000001      ; set MSB to one for DS1302 COMMAND BYTE (READ)
    73 00:F4C0: 20 CD F4         JSR RTC_WR          ; write address to DS1302
    74 00:F4C3: 20 04 F5         JSR RTC_RD          ; read value from DS1302 (value is in reg C)
    75 00:F4C6: 20 37 F5         JSR RTC_RESET_ON    ; turn on RTC reset
    76 00:F4C9: 58               CLI
  Sun Nov 21 2021 15:13                                                                                                Page 65


    77 00:F4CA: 28               PLP
    78 00:F4CB: FA               PLX
    79 00:F4CC: 60               RTS
    80                        
    81                        
    82                        
    83                        ; function RTC_WR
    84                        ; input value in A
    85                        
    86                        RTC_WR:
    87 00:F4CD: DA               PHX
    88 00:F4CE: 08               PHP
    89 00:F4CF: E2 30            SEP #$30            ; 8 bit REGISTERS
    90                            LONGA OFF
    91                            LONGI OFF
    92 00:F4D1: A2 00            LDX #$00
    93                        
    94                        RTC_WR1:
    95 00:F4D3: 4A               LSR A
    96 00:F4D4: 90 12            BCC RTC_WR2         ; LSB is a 0, handle it AT RTC_WR2
    97                                                ; LSB is a 1, handle it below
    98                                                ; setup RTC latch with RST and DATA high, SCLK low
    99 00:F4D6: 48               PHA
   100 00:F4D7: 20 37 F5         JSR RTC_RESET_ON
   101 00:F4DA: 20 5E F5         JSR RTC_DTA_ON
   102 00:F4DD: 20 8F F5         JSR RTC_CLK_OFF
   103 00:F4E0: 20 9C F5         JSR RTC_BIT_DELAY   ; let it settle a while
   104                                                ; setup RTC with RST, DATA, and SCLK high
   105 00:F4E3: 20 84 F5         JSR RTC_CLK_ON
   106 00:F4E6: 80 10            BRA RTC_WR3         ; exit loop
   107                        
   108                        RTC_WR2:
   109 00:F4E8: 48               PHA
   110                                                ; LSB is a 0, handle it below
   111                                                ; setup RTC latch with RST high, SCLK and DATA low
   112 00:F4E9: 20 37 F5         JSR RTC_RESET_ON
   113 00:F4EC: 20 71 F5         JSR RTC_DTA_OFF
   114 00:F4EF: 20 8F F5         JSR RTC_CLK_OFF
   115 00:F4F2: 20 9C F5         JSR RTC_BIT_DELAY   ; let it settle a while
   116                                                ; setup RTC with RST and SCLK high, DATA low
   117 00:F4F5: 20 84 F5         JSR RTC_CLK_ON
   118                        RTC_WR3:
   119 00:F4F8: 20 9C F5         JSR RTC_BIT_DELAY   ; let it settle a while
   120 00:F4FB: 68               PLA
   121 00:F4FC: E8               INX                 ; increment COUNTER
   122 00:F4FD: E0 08            CPX  #$08           ; is < $08
   123 00:F4FF: D0 D2            BNE  RTC_WR1        ; No, do Loop again
   124 00:F501: 28               PLP
   125 00:F502: FA               PLX
   126 00:F503: 60               RTS                 ; Yes, end function and return
   127                        
   128                        
   129                        ; function RTC_RD
   130                        ; output value in A
   131                        RTC_RD:
   132 00:F504: DA               PHX
   133 00:F505: 5A               PHY
  Sun Nov 21 2021 15:13                                                                                                Page 66


   134 00:F506: 08               PHP
   135 00:F507: E2 30            SEP #$30            ; 8 bit REGISTERS
   136                            LONGA OFF
   137                            LONGI OFF
   138 00:F509: A2 00            LDX #$00
   139 00:F50B: A0 00            LDY #$00
   140                        
   141                        RTC_RD1:
   142                                                ; setup RTC with RST and RD high, SCLK low
   143 00:F50D: 20 37 F5         JSR RTC_RESET_ON
   144 00:F510: 20 8F F5         JSR RTC_CLK_OFF
   145 00:F513: 20 9C F5         JSR RTC_BIT_DELAY   ; let it settle a while
   146 00:F516: 20 4D F5         JSR RTC_GET_DTA     ; input from RTC latch
   147 00:F519: C9 00            CMP #$00
   148 00:F51B: D0 06            BNE RTC_RD2         ; if LSB is a 1, handle it below
   149 00:F51D: 98               TYA
   150 00:F51E: 18               ClC
   151 00:F51F: 6A               ROR
   152 00:F520: A8               TAY
   153 00:F521: 80 04            BRA RTC_RD3
   154                        RTC_RD2:
   155 00:F523: 98               TYA
   156 00:F524: 38               SEC
   157 00:F525: 6A               ROR
   158 00:F526: A8               TAY
   159                        RTC_RD3:
   160 00:F527: 20 84 F5         JSR RTC_CLK_ON
   161 00:F52A: 20 9C F5         JSR RTC_BIT_DELAY   ; let it settle
   162 00:F52D: E8               INX
   163 00:F52E: E0 08            CPX #$08            ; is < $08 ?
   164 00:F530: D0 DB            BNE RTC_RD1         ; No, do FOR loop again
   165 00:F532: 98               TYA
   166 00:F533: 28               PLP
   167 00:F534: 7A               PLY
   168 00:F535: FA               PLX
   169 00:F536: 60               RTS                 ; Yes, end function and return.  Read RTC value is in C
   170                        
   171                        
   172                        
   173                        RTC_RESET_ON:
   174 00:F537: 48               PHA
   175 00:F538: AD 11 FE         lda via1rega
   176 00:F53B: 09 40            ora #%01000000
   177 00:F53D: 8D 11 FE         STA via1rega
   178 00:F540: 68               PLA
   179 00:F541: 60               RTS
   180                        
   181                        RTC_RESET_OFF:
   182 00:F542: 48               PHA
   183 00:F543: AD 11 FE         lda via1rega
   184 00:F546: 29 BF            And #%10111111
   185 00:F548: 8D 11 FE         STA via1rega
   186 00:F54B: 68               PLA
   187 00:F54C: 60               RTS
   188                        
   189                        RTC_GET_DTA:
   190 00:F54D: AD 13 FE         lda via1ddra
  Sun Nov 21 2021 15:13                                                                                                Page 67


   191 00:F550: 29 DF            AND #%11011111
   192 00:F552: 8D 13 FE         STA via1ddra
   193 00:F555: AD 11 FE         lda via1rega
   194 00:F558: 29 20            AND #%00100000
   195 00:F55A: 8D 11 FE         STA via1rega
   196 00:F55D: 60               RTS
   197                        
   198                        RTC_DTA_ON:
   199 00:F55E: 48               PHA
   200 00:F55F: AD 13 FE         lda via1ddra
   201 00:F562: 09 20            ora #%00100000
   202 00:F564: 8D 13 FE         STA via1ddra
   203 00:F567: AD 11 FE         lda via1rega
   204 00:F56A: 09 20            ora #%00100000
   205 00:F56C: 8D 11 FE         STA via1rega
   206 00:F56F: 68               PLA
   207 00:F570: 60               RTS
   208                        
   209                        RTC_DTA_OFF:
   210 00:F571: 48               PHA
   211 00:F572: AD 13 FE         lda via1ddra
   212 00:F575: 09 20            ora #%00100000
   213 00:F577: 8D 13 FE         STA via1ddra
   214 00:F57A: AD 11 FE         lda via1rega
   215 00:F57D: 29 DF            AND #%11011111
   216 00:F57F: 8D 11 FE         STA via1rega
   217 00:F582: 68               PLA
   218 00:F583: 60               RTS
   219                        
   220                        RTC_CLK_ON:
   221 00:F584: 48               PHA
   222 00:F585: AD 1C FE         lda via1pcr
   223 00:F588: 09 0E            ora #%00001110
   224 00:F58A: 8D 1C FE         STA via1pcr
   225 00:F58D: 68               PLA
   226 00:F58E: 60               RTS
   227                        
   228                        RTC_CLK_OFF:
   229 00:F58F: 48               PHA
   230 00:F590: AD 1C FE         lda via1pcr
   231 00:F593: 09 0C            ora #%00001100
   232 00:F595: 29 FD            AND #%11111101
   233 00:F597: 8D 1C FE         STA via1pcr
   234 00:F59A: 68               PLA
   235 00:F59B: 60               RTS
   236                        
   237                        
   238                        RTC_BIT_DELAY:
   239 00:F59C: 48               PHA
   240 00:F59D: 68               PLA
   241 00:F59E: 48               PHA
   242 00:F59F: 68               PLA
   243 00:F5A0: 48               PHA
   244 00:F5A1: 68               PLA
   245 00:F5A2: 48               PHA
   246 00:F5A3: 68               PLA
   247 00:F5A4: 48               PHA
  Sun Nov 21 2021 15:13                                                                                                Page 68


   248 00:F5A5: 68               PLA
   249 00:F5A6: 48               PHA
   250 00:F5A7: 68               PLA
   251 00:F5A8: 48               PHA
   252 00:F5A9: 68               PLA
   253 00:F5AA: 48               PHA
   254 00:F5AB: 68               PLA
   255 00:F5AC: 48               PHA
   256 00:F5AD: 68               PLA
   257 00:F5AE: 48               PHA
   258 00:F5AF: 68               PLA
   259 00:F5B0: 60               RTS
   358                        ;______________________________________________________________
   359                        
   360                        
   361 00:F5B1: 00 00 00     	.BYTE 00,00,00
   362                        
   363                        
   364                        ; BIOS JUMP TABLE (NATIVE)
   365                        		.ORG 	$FD00
   366 00:FD00: 20 75 E0     LPRINTVEC	JSR	OUTCH
   367 00:FD03: 6B           			RTL
   368 00:FD04: 20 AC E0     LINPVEC		JSR	INCH
   369 00:FD07: 6B           			RTL
   370 00:FD08: 20 92 E0     LINPWVEC	JSR	INCHW
   371 00:FD0B: 6B           			RTL
   372 00:FD0C: 20 8E E2     LSetXYVEC	JSR SetXY
   373 00:FD0F: 6B           			RTL
   374 00:FD10: 20 57 E3     LCPYVVEC	JSR CopyVideoMem
   375 00:FD13: 6B           			RTL
   376 00:FD14: 20 FE E2     LSrlUpVEC 	JSR ScrollUp
   377 00:FD17: 6B           			RTL
   378                        LSetColorVEC:
   379 00:FD18: 20 81 E2     			JSR SetColor
   380 00:FD1B: 6B           			RTL
   381 00:FD1C: 20 B8 E1     LCURSORVEC	JSR CURSOR
   382 00:FD1F: 6B           			RTL
   383                        LUNCURSORVEC:
   384 00:FD20: 20 F5 E1     			JSR UNCURSOR
   385 00:FD23: 6B           			RTL
   386 00:FD24: 20 93 F4     LWRITERTC	JSR RTC_WRITE
   387 00:FD27: 6B           			RTL
   388 00:FD28: 20 B2 F4     LREADRTC	JSR RTC_READ
   389 00:FD2B: 6B           			RTL
   390 00:FD2C: 20 F2 EF     LIECIN		JSR LAB_EF19 ;. Read byte from serial bus. (Must call TALK and TALKSA beforehand
                    s.)
   391 00:FD2F: 6B           			RTL
   392 00:FD30: 20 BA EF     LIECOUT		JSR LAB_EEE4 ;. Write byte to serial bus. (Must call LISTEN and LSTNSA beforehan
                    ds.)
   393 00:FD33: 6B           			RTL
   394 00:FD34: 20 CF EF     LUNTALK		JSR LAB_EEF6 ;. Send UNTALK command to serial bus.
   395 00:FD37: 6B           			RTL
   396 00:FD38: 20 DD EF     LUNLSTN		JSR LAB_EF04 ;. Send UNLISTEN command to serial bus.
   397 00:FD3B: 6B           			RTL
   398 00:FD3C: 20 D2 EE     LLISTEN		JSR LAB_EE17 ;. Send LISTEN command to serial bus.
   399 00:FD3F: 6B           			RTL
   400 00:FD40: 20 CF EE     LTALK		JSR LAB_EE14 ;. Send TALK command to serial bus.
  Sun Nov 21 2021 15:13                                                                                                Page 69


   401 00:FD43: 6B           			RTL
   402 00:FD44: 20 03 F3     LSETLFS		JSR LAB_FE50 ;. Set file parameters.
   403 00:FD47: 6B           			RTL
   404 00:FD48: 20 F9 F2     LSETNAM		JSR LAB_FE49 ;. Set file name parameters.
   405 00:FD4B: 6B           			RTL
   406 00:FD4C: 20 8B F0     LLOAD		JSR LOADTORAM ;. Load or verify file. (Must call SETLFS and SETNAM beforehands.)
   407 00:FD4F: 6B           			RTL
   408 00:FD50: 20 12 F1     LSAVE		JSR IECSAVERAM ;. Save file. (Must call SETLFS and SETNAM beforehands.)
   409 00:FD53: 6B           			RTL
   410 00:FD54: 20 21 F3     LIECINIT	JSR INITIEC	   ; INIT IEC
   411 00:FD57: 6B           			RTL
   412 00:FD58: 20 84 F4     LIECCLCH    JSR LAB_F3F3        ; close input and output channels
   413 00:FD5B: 6B           			RTL
   414 00:FD5C: 20 32 F4     LIECOUTC    JSR LAB_F309        ; open a channel for output
   415 00:FD5F: 6B           			RTL
   416 00:FD60: 20 04 F4     LIECINPC    JSR LAB_F2C7        ; open a channel for input
   417 00:FD63: 6B           			RTL
   418 00:FD64: 20 CB F3     LIECOPNLF   JSR LAB_F40A        ; open a logical file
   419 00:FD67: 6B           			RTL
   420 00:FD68: 20 98 F3     LIECCLSLF   JSR LAB_F34A        ; close a specified logical file
   421 00:FD6B: 6B           			RTL
   422 00:FD6C: 20 CE E3     LClearScrVec JSR ClearScreen     ; clear the 9918 Screen
   423 00:FD6F: 6B           			RTL
   424 00:FD70: 20 0E E4     LLOADFONTVec JSR LoadFont     ; LOAD THE FONT
   425 00:FD73: 6B           			RTL
   426                        
   427                        ; BIOS JUMP TABLE (Emulation)
   428                        		.ORG 	$FF71
   429 00:FF71: 4C 75 E0     PRINTVEC	JMP	OUTCH
   430 00:FF74: 4C AC E0     INPVEC		JMP	INCH
   431 00:FF77: 4C 92 E0     INPWVEC		JMP	INCHW
   432 00:FF7A: 4C 8E E2     SetXYVEC	JMP SetXY
   433 00:FF7D: 4C 57 E3     CPYVVEC		JMP CopyVideoMem
   434 00:FF80: 4C FE E2     SrlUpVEC 	JMP ScrollUp
   435 00:FF83: 4C 81 E2     SetColorVEC JMP SetColor
   436 00:FF86: 4C B8 E1     CURSORVEC	JMP CURSOR
   437 00:FF89: 4C F5 E1     UNCURSORVEC	JMP UNCURSOR
   438 00:FF8C: 4C 93 F4     WRITERTC	JMP RTC_WRITE
   439 00:FF8F: 4C B2 F4     READRTC		JMP RTC_READ
   440 00:FF92: 4C F2 EF     IECIN		JMP LAB_EF19 		; Read byte from serial bus. (Must call TALK and TALKSA 
                    beforehands.)
   441 00:FF95: 4C BA EF     IECOUT		JMP LAB_EEE4 		; Write byte to serial bus. (Must call LISTEN and LSTNSA
                     beforehands.)
   442 00:FF98: 4C CF EF     UNTALK		JMP LAB_EEF6 		; Send UNTALK command to serial bus.
   443 00:FF9B: 4C DD EF     UNLSTN		JMP LAB_EF04 		; Send UNLISTEN command to serial bus.
   444 00:FF9E: 4C D2 EE     LISTEN		JMP LAB_EE17 		; Send LISTEN command to serial bus.
   445 00:FFA1: 4C CF EE     TALK		JMP LAB_EE14 		; Send TALK command to serial bus.
   446 00:FFA4: 4C 03 F3     SETLFS		JMP LAB_FE50	 	; Set file parameters.
   447 00:FFA7: 4C F9 F2     SETNAM		JMP LAB_FE49 		; Set file name parameters.
   448 00:FFAA: 4C 8B F0     LOAD		JMP LOADTORAM 		; Load or verify file. (Must call SETLFS and SETNAM befo
                    rehands.)
   449 00:FFAD: 4C 12 F1     SAVE		JMP IECSAVERAM 		; Save file. (Must call SETLFS and SETNAM beforehands.)
   450 00:FFB0: 4C 21 F3     IECINIT		JMP INITIEC	   		; INIT IEC
   451 00:FFB3: 4C 84 F4     IECCLCH     JMP LAB_F3F3        ; close input and output channels
   452 00:FFB6: 4C 32 F4     IECOUTC     JMP LAB_F309        ; open a channel for output
   453 00:FFB9: 4C 04 F4     IECINPC     JMP LAB_F2C7        ; open a channel for input
   454 00:FFBC: 4C CB F3     IECOPNLF    JMP LAB_F40A        ; open a logical file
  Sun Nov 21 2021 15:13                                                                                                Page 70


   455 00:FFBF: 4C 98 F3     IECCLSLF    JMP LAB_F34A        ; close a specified logical file
   456 00:FFC2: 4C CE E3     ClearScrVec JMP ClearScreen     ; clear the 9918 Screen
   457 00:FFC5: 4C 0E E4     LOADFONTVec JMP LoadFont 	; LOAD THE FONT
   458                        
   459                        
   460                        ; 65c816 Native Vectors
   461                        		.ORG     $FFE4
   462 00:FFE4: 3A E0        COPVECTOR	.DW   RCOPVECTOR
   463 00:FFE6: 3D E0        BRKVECTOR	.DW   RBRKVECTOR
   464 00:FFE8: 40 E0        ABTVECTOR	.DW   RABTVECTOR
   465 00:FFEA: 43 E0        NMIVECTOR   .DW   RNMIVECTOR
   466 00:FFEC: 00 00        resv1		.DW   $0000		;
   467 00:FFEE: 46 E0        IRQVECTOR 	.DW   RIRQVECTOR	; ROM VECTOR FOR IRQ
   468                        
   469                        
   470                        ; 6502 Emulation Vectors
   471                        		.ORG     $FFF4
   472 00:FFF4: 49 E0        ECOPVECTOR	.DW   RECOPVECTOR
   473 00:FFF6: 00 00        resv2		.DW   $0000
   474 00:FFF8: 4C E0        EABTVECTOR	.DW   REABTVECTOR
   475 00:FFFA: 4F E0        ENMIVECTOR  .DW   RENMIVECTOR
   476 00:FFFC: 00 E0        RSTVECTOR   .DW   COLD_START	;
   477 00:FFFE: 52 E0        EINTVECTOR 	.DW   REINTVECTOR	; ROM VECTOR FOR IRQ
   478                        
   479                        	.END


      Lines assembled: 3622
      Errors: 0
