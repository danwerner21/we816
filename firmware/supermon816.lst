  Sat Jan 22 2022 12:11                                                                                                Page 1


                                             ***************************************
                                             **      WDC 65C816 Macro Assembler   **
                                             **                                   **
                                             **     Version 3.49.1- Feb  6 2006    **
                                             ***************************************

     1                        
     2                        		CHIP	65816		; SET CHIP
     3                        		LONGA	OFF		; ASSUME EMULATION MODE
     4                        		LONGI	OFF		;
     5                        		PW	128
     6                        		PL 	60
     7                        		INCLIST ON
     8                        
     9                        ;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    10                        ;*                                                                                 *
    11                        ;*      SUPERMON 816 MACHINE LANGUAGE MONITOR FOR THE W65C816S MICROPROCESSOR      *
    12                        ;* ------------------------------------------------------------------------------- *
    13                        ;*      Copyright Â©1991-2014 by BCS Technology Limited.  All rights reserved.      *
    14                        ;*                                                                                 *
    15                        ;* Permission is hereby granted to use, copy, modify and distribute this software, *
    16                        ;* provided this copyright notice remains in the source code and  proper  attribu- *
    17                        ;* tion is given.  Redistribution, regardless of form, must be at no charge to the *
    18                        ;* end  user.  This code or any part thereof, including any derivation, MAY NOT be *
    19                        ;* incorporated into any package intended for sale,  unless written permission has *
    20                        ;* been given by the copyright holder.                                             *
    21                        ;*                                                                                 *
    22                        ;* THERE IS NO WARRANTY OF ANY KIND WITH THIS SOFTWARE.  The user assumes all risk *
    23                        ;* in connection with the incorporation of this software into any system.          *
    24                        ;* ------------------------------------------------------------------------------- *
    25                        ;* Supermon 816 is a salute to Jim Butterfield, who passed away on June 29, 2007.  *
    26                        ;*                                                                                 *
    27                        ;* Jim, who was the unofficial  spokesman for  Commodore  International during the *
    28                        ;* heyday of the company's 8 bit supremacy, scratch-developed the Supermon machine *
    29                        ;* language monitor for the PET & CBM computers.   When the best-selling Commodore *
    30                        ;* 64 was introduced, Jim adapted his software to the new machine & gave the adap- *
    31                        ;* tation the name Supermon 64.   Commodore  subsequently  integrated a customized *
    32                        ;* version of Supermon 64 into the C-128 to act as the resident M/L monitor.       *
    33                        ;*                                                                                 *
    34                        ;* Although Supermon 816 is not an adaptation of Supermon 64,  it was  decided  to *
    35                        ;* keep the Supermon name alive, since Supermon 816's general operation & user in- *
    36                        ;* terface is similar to that of Supermon 64.   Supermon 816 is 100 percent native *
    37                        ;* mode 65C816 code & was developed from a blank canvas.                           *
    38                        ;* ------------------------------------------------------------------------------- *
    39                        ;* Supermon 816 is a full featured monitor and supports the following operations:  *
    40                        ;*                                                                                 *
    41                        ;*     A - Assemble code                                                           *
    42                        ;*     C - Compare memory regions                                                  *
    43                        ;*     D - Disassemble code                                                        *
    44                        ;*     F - Fill memory region (cannot span banks)                                  *
    45                        ;*     G - Execute code (stops at BRK)                                             *
    46                        ;*     H - Search (hunt) memory region                                             *
    47                        ;*     J - Execute code as a subroutine (stops at BRK or RTS)                      *
    48                        ;*     M - Dump & display memory range                                             *
    49                        ;*     R - Dump & display 65C816 registers                                         *
    50                        ;*     T - Copy (transfer) memory region                                           *
    51                        ;*     X - Exit Supermon 816 & return to operating environment                     *
  Sat Jan 22 2022 12:11                                                                                                Page 2


    52                        ;*     > - Modify up to 32 bytes of memory                                         *
    53                        ;*     ; - Modify 65C816 registers                                                 *
    54                        ;*                                                                                 *
    55                        ;* Supermon 816 accepts binary (%), octal (%), decimal (+) and hexadecimal ($) as  *
    56                        ;* input for numeric parameters.  Additionally, the H and > operations accept an   *
    57                        ;* ASCII string in place of numeric values by preceding the string with ', e.g.:   *
    58                        ;*                                                                                 *
    59                        ;*     h 042000 042FFF 'BCS Technology Limited                                     *
    60                        ;*                                                                                 *
    61                        ;* If no radix symbol is entered hex is assumed.                                   *
    62                        ;*                                                                                 *
    63                        ;* Numeric conversion is also available.  For example, typing:                     *
    64                        ;*                                                                                 *
    65                        ;*     +1234567 <CR>                                                               *
    66                        ;*                                                                                 *
    67                        ;* will display:                                                                   *
    68                        ;*                                                                                 *
    69                        ;*         $12D687                                                                 *
    70                        ;*         +1234567                                                                *
    71                        ;*         %04553207                                                               *
    72                        ;*         %100101101011010000111                                                  *
    73                        ;*                                                                                 *
    74                        ;* In the above example, <CR> means the console keyboard's return or enter key.    *
    75                        ;*                                                                                 *
    76                        ;* All numeric values are internally processed as 32 bit unsigned integers.  Addr- *
    77                        ;* esses may be entered as 8, 16 or 24 bit values.  During instruction assembly,   *
    78                        ;* immediate mode operands may be forced to 16 bits by preceding the operand with  *
    79                        ;* an exclamation point if the instruction can accept a 16 bit operand, e.g.:      *
    80                        ;*                                                                                 *
    81                        ;*     a 1f2000 lda !#4                                                            *
    82                        ;*                                                                                 *
    83                        ;* The above will assemble as:                                                     *
    84                        ;*                                                                                 *
    85                        ;*     A 1F2000  A9 04 00     LDA #$0004                                           *
    86                        ;*                                                                                 *
    87                        ;* Entering:                                                                       *
    88                        ;*                                                                                 *
    89                        ;*     a 1f2000 ldx !#+157                                                         *
    90                        ;*                                                                                 *
    91                        ;* will assemble as:                                                               *
    92                        ;*                                                                                 *
    93                        ;*     A 1F2000  A2 9D 00     LDX #$009D                                           *
    94                        ;*                                                                                 *
    95                        ;* Absent the ! in the operand field, the above would have been assembled as:      *
    96                        ;*                                                                                 *
    97                        ;*     A 1F2000  A2 9D        LDX #$9D                                             *
    98                        ;*                                                                                 *
    99                        ;* If an immediate mode operand is greater than $FF assembly of a 16 bit operand   *
   100                        ;* is implied.                                                                     *
   101                        ;* ------------------------------------------------------------------------------- *
   102                        ;* A Note on the PEA & PEI Instructions                                            *
   103                        ;* ------------------------------------                                            *
   104                        ;*                                                                                 *
   105                        ;* The Eyes and Lichty programming manual uses the following syntax for the PEA    *
   106                        ;* and PEI instructions:                                                           *
   107                        ;*                                                                                 *
   108                        ;*     PEA <operand>                                                               *
  Sat Jan 22 2022 12:11                                                                                                Page 3


   109                        ;*     PEI (<operand>)                                                             *
   110                        ;*                                                                                 *
   111                        ;* The WDC data sheet that was published at the time of the 65C816's release in    *
   112                        ;* 1984 does not indicate a recommended or preferred syntax for any of the above   *
   113                        ;* instructions.  PEA pushes its operand to the stack and hence operates like any  *
   114                        ;* other immediate mode instruction, in that the operand is the data (however, PEA *
   115                        ;* doesn't affect the status register).  Similarly, PEI pushes the 16 bit value    *
   116                        ;* stored at <operand> and <operand>+1, and hence operates like any other direct   *
   117                        ;* (zero) page instruction, again without affecting the status register.           *
   118                        ;*                                                                                 *
   119                        ;* BCS Technology Limited is of the opinion that the developer of the ORCA/M as-   *
   120                        ;* sembler, which is the assembler referred to in the Eyes and Lichty manual, mis- *
   121                        ;* understood how PEA and PEI behave during runtime, and hence chose an incorrect  *
   122                        ;* syntax for these two instructions.  This error was subsequently carried forward *
   123                        ;* by Eyes and Lichty.                                                             *
   124                        ;*                                                                                 *
   125                        ;* Supermon 816's assembler uses the following syntax for PEA and PEI:             *
   126                        ;*                                                                                 *
   127                        ;*     PEA #<operand>                                                              *
   128                        ;*     PEI <operand>                                                               *
   129                        ;*                                                                                 *
   130                        ;* The operand for PEA is treated as a 16 bit value, even if entered as an 8 bit   *
   131                        ;* value.  The operand for PEI must be 8 bits.                                     *
   132                        ;*                                                                                 *
   133                        ;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
   134                        ;
   135                        ;	* * * * * * * * * * * *
   136                        ;	* VERSION INFORMATION *
   137                        ;	* * * * * * * * * * * *
   138                        ;
   139                        softvers .macro                ;software version - change with each revision...
   140                                 .db "1"             ;major
   141                                 .db "."
   142                                 .db "0"             ;minor
   143                                 .db "."
   144                                 .db "2"             ;revision
   145                                 .endm
   146                        ;
   147                        ;REVISION TABLE
   148                        ;
   149                        ;Ver  Rev Date    Description
   150                        ;-------------------------------------------------------------------------------
   151                        ;1.0  2013/11/01  A) Original derived from the POC V1.1 single-board computer
   152                        ;                    firmware.
   153                        ;     2013/11/04  A) Fixed a problem where the B-accumulator wasn't always being
   154                        ;                    be copied to shadow storage after return from execution of
   155                        ;                    a J command.
   156                        ;     2017/10/07  A) Converted to use WDC's 65816 assembler (D.WERNER)
   157                        ;		  B) Adapt for the RBC 65c816 SBC
   158                        ;		  C) Disable X command
   159                        ;-------------------------------------------------------------------------------
   160                        ;
   161                        ;
   162                        ;	        COMMENT ABBREVIATIONS
   163                        ;	----------------------------------------------------
   164                        ;	  BCD   binary-coded decimal
   165                        ;	   DP   direct page or page zero
  Sat Jan 22 2022 12:11                                                                                                Page 4


   166                        ;	  EOF   end-of-field
   167                        ;	  EOI   end-of-input
   168                        ;	  LSB   least significant byte/bit
   169                        ;	  LSD   least significant digit
   170                        ;	  LSN   least significant nybble
   171                        ;	  LSW   least significant word
   172                        ;	  MPU   microprocessor
   173                        ;	  MSB   most significant byte/bit
   174                        ;	  MSD   most significant digit
   175                        ;	  MSN   most significant nybble
   176                        ;	  MSW   most-significant word
   177                        ;	  RAM   random access memory
   178                        ;	   WS   whitespace, i.e., blanks & horizontal tabs
   179                        ;	----------------------------------------------------
   180                        ;	A word is defined as 16 bits.
   181                        ;
   182                        ;	   MPU REGISTER SYMBOLS
   183                        ;	--------------------------
   184                        ;	   .A   accumulator LSB
   185                        ;	   .B   accumulator MSB
   186                        ;	   .C   16 bit accumulator
   187                        ;	   .X   X-index
   188                        ;	   .Y   Y-index
   189                        ;	   DB   data bank
   190                        ;	   DP   direct page
   191                        ;	   PB   program bank
   192                        ;	   PC   program counter
   193                        ;	   SP   stack pointer
   194                        ;	   SR   MPU status
   195                        ;	----------------------------
   196                        ;
   197                        ;	  MPU STATUS REGISTER SYMBOLS
   198                        ;	-------------------------------
   199                        ;	    C   carry
   200                        ;	    D   decimal mode
   201                        ;	    I   maskable interrupts
   202                        ;	    m   accumulator/memory size
   203                        ;	    N   result negative
   204                        ;	    V   sign overflow
   205                        ;	    x   index registers size
   206                        ;	    Z   result zero
   207                        ;	-------------------------------
   208                        ;
   209                        ;================================================================================
   210                        ;
   211                        ;SYSTEM INTERFACE DEFINITIONS
   212                        ;
   213                        ;	------------------------------------------------------------------
   214                        ;	This section defines the interface between Supermon 816 & the host
   215                        ;	system.   Change these definitions to suit your system, but do not
   216                        ;	change any label names.  All definitions must have valid values in
   217                        ;	order to assemble Supermon 816.
   218                        ;	------------------------------------------------------------------
   219                        ;
   220                        ;	--------------------------------------------------------
   221                        	;.org  $008000              ;assembly address...
   222                        SUPERMON 	SECTION 	OFFSET $8000
  Sat Jan 22 2022 12:11                                                                                                Page 5


   223                        ;
   224                        ;	Set _ORIGIN_ to Supermon 816's desired assembly address.
   225                        ;	--------------------------------------------------------
   226                        ;
   227                        ;	------------------------------------------------------------------------
   228                        ;vecexit  .EQU $002000              ;exit to environment address...
   229                        ;
   230                        ;	Set VECEXIT to where Supermon 816 should go when it exits.  Supermon 816
   231                        ;	will do a JML (long jump) to this address, which means VECEXIT must be a
   232                        ;	24 bit address.
   233                        ;	------------------------------------------------------------------------
   234                        ;
   235                        ;	------------------------------------------------------------------------
   236                        ;
   237                        ;getcha                  ;get keystroke from console...
   238                        ;
   239                        ;	GETCHA refers to an operating system API call that returns a keystroke
   240                        ;	in the 8 bit accumulator.  Supermon 816  assumes that GETCHA is a non-
   241                        ;	blocking subroutine & returns with carry clear to indicate that a key-
   242                        ;	stroke is in .A, or with carry set to indicate that no keystroke was
   243                        ;	available.  GETCHA will be called with a JSR instruction.
   244                        ;
   245                        ;	Supermon 816 expects .X & .Y to be preserved upon return from GETCHA.
   246                        ;	You may have to modify Supermon 816 at all calls to GETCHA if your "get
   247                        ;	keystroke" routine works differently than described.
   248                        ;	------------------------------------------------------------------------
   249             0000FF74   getcha 		.equ $FF74
   250             0000FF86   CURSOR          .equ $FF86
   251             0000FF89   UNCURSOR        .equ $FF89
   252                        ;------------------------------------------------------------------------
   253                        ;putcha   print character on console...
   254                        ;
   255                        ;	PUTCHA refers to an operating system API call that prints a character to
   256                        ;	the console screen.  The character to be printed will be in .A, which
   257                        ;	will be set to 8-bit width.  Supermon 816 assumes that PUTCHA will block
   258                        ;	until the character can be processed.  PUTCHA will be called with a JSR
   259                        ;	instructions.
   260                        ;
   261                        ;	Supermon 816 expects .X & .Y to be preserved upon return from PUTCHA.
   262                        ;	You may have to modify Supermon 816 at all calls to PUTCHA if your "put
   263                        ;	character" routine works differently than described.
   264                        ;
   265             0000FF71   putcha 		.equ $FF71
   266                        ;
   267                        ;	------------------------------------------------------------------------
   268                        ;
   269                        ;	------------------------------------------------------------------------
   270             00000302   vecbrki  .EQU  $0302                ;BRK handler indirect vector...
   271                        ;
   272                        ;	Supermon 816 will modify this vector so that execution of a BRK instruc-
   273                        ;	tion is intercepted & the registers  are  captured.   Your BRK front end
   274                        ;	should jump through this vector after pushing the registers as follows:
   275                        ;
   276                        ;	         phb                   ;save DB
   277                        ;	         phd                   ;save DP
   278                        ;	         rep #%00110000        ;16 bit registers
   279                        ;	         pha
  Sat Jan 22 2022 12:11                                                                                                Page 6


   280                        ;	         phx
   281                        ;	         phy
   282                        ;	         jmp (vecbrki)         ;indirect vector
   283                        ;
   284                        ;	When a G or J command is issued, the above sequence will be reversed be-
   285                        ;	fore a jump is made to the code to be executed.  Upon exit from Supermon
   286                        ;	816, the original address at VECBRKI will be restored.
   287                        ;
   288                        ;	If your BRK front end doesn't conform to the above you will have to mod-
   289                        ;	ify Supermon 816 to accommodate the differences.  The most likely needed
   290                        ;	changes will be in the order in which registers are pushed to the stack.
   291                        ;	------------------------------------------------------------------------
   292                        ;
   293                        ;	------------------------------------------------------------------------
   294             00007FFF   hwstack  .EQU $7FFF                ;top of hardware stack...
   295                        ;
   296                        ;	Supermon 816 initializes the stack pointer to this address when the cold
   297                        ;	start at MONCOLD is called to enter the monitor.  The stack pointer will
   298                        ;	be undisturbed when entry into Supermon 816 is through JMONBRK (see jump
   299                        ;	table definitions).
   300                        ;	------------------------------------------------------------------------
   301                        ;
   302                        ;	------------------------------------------------------------------------
   303             00000010   zeropage .EQU $10                  ;Supermon 816's direct page...
   304                        ;
   305                        ;	Supermon 816 uses direct page starting at this address.  Be sure that no
   306                        ;	conflict occurs with other software.
   307                        ;	------------------------------------------------------------------------
   308                        ;
   309                        ;	------------------------------------------------------------------------
   310             00000003   stopkey  .EQU $03                  ;display abort key...
   311                        ;
   312                        ;	Supermon 816 will poll for a "stop key" during display operations, such
   313                        ;	as code disassembly & memory dumps, so as to abort further processing &
   314                        ;	return to the command prompt.  STOPKEY must be defined with the ASCII
   315                        ;	value that the "stop key" will emit when typed.  The polling is via a
   316                        ;	call to GETCHA (described above).  The default STOPKEY definition of $03
   317                        ;	is for ASCII <ETX> or [Ctrl-C].
   318                        ;	------------------------------------------------------------------------
   319                        ;
   320             00000200   ibuffer  .EQU $000200               ;input buffer &...
   321             00000246   auxbuf   .EQU ibuffer+s_ibuf+s_byte ;auxiliary buffer...
   322                        ;
   323                        ;	------------------------------------------------------------------------
   324                        ;	Supermon 816 will use the above definitions for input buffers.  These
   325                        ;	buffers may be located anywhere in RAM that is convenient.  The buffers
   326                        ;	are stateless, which means that unless Supermon 816 has control of your
   327                        ;	system, they may be overwritten without consequence.
   328                        ;	------------------------------------------------------------------------
   329                        ;
   330                        ;================================================================================
   331                        ;
   332                        ;W65C816S INSTRUCTION SYNTHESIS MACROS -- !!!!! DO NOT EDIT !!!!!
   333                        ;
   334                        
   335                        
   336                        _asm24_  .macro _ad
  Sat Jan 22 2022 12:11                                                                                                Page 7


   337                                 .db <_ad,>_ad,_ad>>16
   338                                 .endm
   339                        
   340                        ;brl      .macro _ad
   341                        ;_ba      =*+3
   342                        ;         .db $82
   343                        ;         .dw _ad-_ba
   344                        ;         .endm
   345                        ;
   346                        ;jml      .macro _ad
   347                        ;         .db $5c
   348                        ;         _asm24_ _ad
   349                        ;         .endm
   350                        ;
   351                        ;mvn      .macro _s,_d
   352                        ;         .db $54,_d,_s
   353                        ;         .endm
   354                        ;
   355                        ;mvp      .macro _s,_d
   356                        ;         .db $44,_d,_s
   357                        ;         .endm
   358                        ;
   359                        ;pea      .macro _op
   360                        ;         .db $f4
   361                        ;         .dw _op
   362                        ;         .endm
   363                        ;
   364                        ;phb      .macro
   365                        ;         .db $8b
   366                        ;         .endm
   367                        ;
   368                        ;phk      .macro
   369                        ;         .db $4b
   370                        ;         .endm
   371                        ;
   372                        ;plb      .macro
   373                        ;         .db $ab
   374                        ;         .endm
   375                        ;
   376                        ;rep      .macro _op
   377                        ;         .db $c2,_op
   378                        ;         .endm
   379                        ;
   380                        ;sep      .macro _op
   381                        ;         .db $e2,_op
   382                        ;         .endm
   383                        ;
   384                        ;tcd      .macro
   385                        ;         .db $5b
   386                        ;         .endm
   387                        ;
   388                        ;tcs      .macro
   389                        ;         .db $1b
   390                        ;         .endm
   391                        ;
   392                        ;tdc      .macro
   393                        ;         .db $7b
  Sat Jan 22 2022 12:11                                                                                                Page 8


   394                        ;         .endm
   395                        ;
   396                        ;tsc      .macro
   397                        ;         .db $3b
   398                        ;         .endm
   399                        ;
   400                        ;txy      .macro
   401                        ;         .db $9b
   402                        ;         .endm
   403                        ;
   404                        ;tyx      .macro
   405                        ;         .db $bb
   406                        ;         .endm
   407                        ;
   408                        ;wai      .macro
   409                        ;         .db $cb
   410                        ;        .endm
   411                        ;
   412                        ;xba      .macro
   413                        ;         .db $eb
   414                        ;         .endm
   415                        ;
   416                        adcw     .macro _op
   417                                 adc #<_op
   418                                 .db >_op
   419                                 .endm
   420                        ;
   421                        andw     .macro _op
   422                                 and #<_op
   423                                 .db >_op
   424                                 .endm
   425                        ;
   426                        bitw     .macro _op
   427                                 bit #<_op
   428                                 .db >_op
   429                                 .endm
   430                        ;
   431                        cmpw     .macro _op
   432                                 cmp #<_op
   433                                 .db >_op
   434                                 .endm
   435                        ;
   436                        cpxw     .macro _op
   437                                 cpx #<_op
   438                                 .db >_op
   439                                 .endm
   440                        ;
   441                        cpyw     .macro _op
   442                                 cpy #<_op
   443                                 .db >_op
   444                                 .endm
   445                        ;
   446                        eorw     .macro _op
   447                                 eor #<_op
   448                                 .db >_op
   449                                 .endm
   450                        ;
  Sat Jan 22 2022 12:11                                                                                                Page 9


   451                        ldaw     .macro _op
   452                                 lda #<_op
   453                                 .db >_op
   454                                 .endm
   455                        ;
   456                        ldxw     .macro _op
   457                                 ldx #<_op
   458                                 .db >_op
   459                                 .endm
   460                        ;
   461                        ldyw     .macro _op
   462                                 ldy #<_op
   463                                 .db >_op
   464                                 .endm
   465                        ;
   466                        oraw     .macro _op
   467                                 ora #<_op
   468                                 .db >_op
   469                                 .endm
   470                        ;
   471                        sbcw     .macro _op
   472                                 sbc #<_op
   473                                 .db >_op
   474                                 .endm
   475                        ;
   476                        ldalx    .macro _ad
   477                                 .db $bf
   478                                 _asm24_ _ad
   479                                 .endm
   480                        ;
   481                        adcil    .macro _ad
   482                                 .db $67,_ad
   483                                 .endm
   484                        ;
   485                        adcily   .macro _ad
   486                                 .db $77,_ad
   487                                 .endm
   488                        ;
   489                        andil    .macro _ad
   490                                 .db $27,_ad
   491                                 .endm
   492                        ;
   493                        andily   .macro _ad
   494                                 .db $37,_ad
   495                                 .endm
   496                        ;
   497                        cmpil    .macro _ad
   498                                 .db $c7,_ad
   499                                 .endm
   500                        ;
   501                        cmpily   .macro _ad
   502                                 .db $d7,_ad
   503                                 .endm
   504                        ;
   505                        eoril    .macro _ad
   506                                 .db $47,_ad
   507                                 .endm
  Sat Jan 22 2022 12:11                                                                                                Page 10


   508                        ;
   509                        eorily   .macro _ad
   510                                 .db $57,_ad
   511                                 .endm
   512                        ;
   513                        ldail    .macro _ad
   514                                 .db $a7,_ad
   515                                 .endm
   516                        ;
   517                        ldaily   .macro _ad
   518                                 .db $b7,_ad
   519                                 .endm
   520                        ;
   521                        orail    .macro _ad
   522                                 .db $07,_ad
   523                                 .endm
   524                        ;
   525                        oraily   .macro _ad
   526                                 .db $17,_ad
   527                                 .endm
   528                        ;
   529                        sbcil    .macro _ad
   530                                 .db $e7,_ad
   531                                 .endm
   532                        ;
   533                        sbcily   .macro _ad
   534                                 .db $f7,_ad
   535                                 .endm
   536                        ;
   537                        stail    .macro _ad
   538                                 .db $87,_ad
   539                                 .endm
   540                        ;
   541                        staily   .macro _ad
   542                                 .db $97,_ad
   543                                 .endm
   544                        ;
   545                        adcs     .macro _of
   546                                 .db $63,_of
   547                                 .endm
   548                        ;
   549                        adcsi    .macro _of
   550                                 .db $73,_of
   551                                 .endm
   552                        ;
   553                        ands     .macro _of
   554                                 .db $23,_of
   555                                 .endm
   556                        ;
   557                        andsi    .macro _of
   558                                 .db $33,_of
   559                                 .endm
   560                        ;
   561                        cmps     .macro _of
   562                                 .db $c3,_of
   563                                 .endm
   564                        ;
  Sat Jan 22 2022 12:11                                                                                                Page 11


   565                        cmpsi    .macro _of
   566                                 .db $d3,_of
   567                                 .endm
   568                        ;
   569                        eors     .macro _of
   570                                 .db $43,_of
   571                                 .endm
   572                        ;
   573                        eorsi    .macro _of
   574                                 .db $53,_of
   575                                 .endm
   576                        ;
   577                        ldas     .macro _of
   578                                 .db $a3,_of
   579                                 .endm
   580                        ;
   581                        ldasi    .macro _of
   582                                 .db $b3,_of
   583                                 .endm
   584                        ;
   585                        oras     .macro _of
   586                                 .db $03,_of
   587                                 .endm
   588                        ;
   589                        orasi    .macro _of
   590                                 .db $13,_of
   591                                 .endm
   592                        ;
   593                        sbcs     .macro _of
   594                                 .db $e3,_of
   595                                 .endm
   596                        ;
   597                        sbcsi    .macro _of
   598                                 .db $f3,_of
   599                                 .endm
   600                        ;
   601                        stas     .macro _of
   602                                 .db $83,_of
   603                                 .endm
   604                        ;
   605                        stasi    .macro _of
   606                                 .db $93,_of
   607                                 .endm
   608                        ;
   609                        slonga    .macro
   610                                 .db $c2,$20
   611                                 .endm
   612                        ;
   613                        longr    .macro
   614                                 .db $c2,$30
   615                                 .endm
   616                        ;
   617                        longx    .macro
   618                                 .db $c2,$10
   619                                 .endm
   620                        ;
   621                        shorta   .macro
  Sat Jan 22 2022 12:11                                                                                                Page 12


   622                                 .db $e2,$20
   623                                 .endm
   624                        ;
   625                        shorti   .macro
   626                                 .db $e2,$10
   627                                 .endm
   628                        ;
   629                        shortr   .macro
   630                                 .db $e2,$30
   631                                 .endm
   632                        ;
   633                        shortx   .macro
   634                                 .db $e2,$10
   635                                 .endm
   636                        ;
   637                        ;================================================================================
   638                        ;
   639                        ;CONSOLE DISPLAY CONTROL MACROS
   640                        ;
   641                        ;	------------------------------------------------------------------------
   642                        ;	The following macros execute terminal  control procedures  that  perform
   643                        ;	such tasks as clearing the screen,  switching  between  normal & reverse
   644                        ;	video, etc.  These macros are for WYSE 60 & compatible displays, such as
   645                        ;	the WYSE 150, WYSE 160, WYSE 325 & WYSE GPT.   Only the functions needed
   646                        ;	by Supermon 816 are included.
   647                        ;
   648                        ;	If your console is not WYSE 60 compatible, you will need to  edit  these
   649                        ;	macros as required to control your particular console or terminal.  Note
   650                        ;	that in some cases one macro may call another.  Exercise caution in your
   651                        ;	edits to avoid introducing display bugs.
   652                        ;
   653                        ;	If your console display cannot execute one of these procedures,  such as
   654                        ;	'CL' (clear to end of line), you will have to develop an alternative.
   655                        ;	------------------------------------------------------------------------
   656                        ;
   657                        ;
   658                        ;
   659                        ;	cursor control...
   660                        ;
   661                        cr       .macro                ;carriage return
   662                                 .db a_cr
   663                                 .endm
   664                        ;
   665                        lf       .macro                ;carriage return/line feed
   666                                 cr
   667                                 .db a_lf
   668                                 .endm
   669                        ;
   670                        ;	miscellaneous control...
   671                        ;
   672                        rb       .macro                ;ring "bell"
   673                                 .db a_bel
   674                                 .endm
   675                        ;
   676                        ;
   677                        ;================================================================================
   678                        ;
  Sat Jan 22 2022 12:11                                                                                                Page 13


   679                        ;ASCII CONTROL DEFINITIONS (menmonic order)
   680                        ;
   681             00000007   a_bel    .equ $07                  ;<BEL> alert/ring bell
   682             00000008   a_bs     .equ $08                  ;<BS>  backspace
   683             0000000D   a_cr     .equ $0d                  ;<CR>  carriage return
   684             0000007F   a_del    .equ $7f                  ;<DEL> delete
   685             0000001B   a_esc    .equ $1b                  ;<ESC> escape
   686             00000009   a_ht     .equ $09                  ;<HT>  horizontal tabulation
   687             0000000A   a_lf     .equ $0a                  ;<LF>  linefeed
   688                        ;
   689                        ;
   690                        ;	miscellaneous (description order)...
   691                        ;
   692             00000020   a_blank  .equ ' '                  ;blank (whitespace)
   693             0000007A   a_asclch .equ 'z'                  ;end of lowercase ASCII
   694             0000005F   a_lctouc .equ $5f                  ;LC to UC conversion mask
   695             00000061   a_asclcl .equ 'a'                  ;start of lowercase ASCII
   696                        ;
   697                        ;================================================================================
   698                        ;
   699                        ;GLOBAL ATOMIC CONSTANTS
   700                        ;
   701                        ;
   702                        ;	data type sizes...
   703                        ;
   704             00000001   s_byte   .equ 1                    ;byte
   705             00000002   s_word   .equ 2                    ;word (16 bits)
   706             00000003   s_xword  .equ 3                    ;extended word (24 bits)
   707             00000004   s_dword  .equ 4                    ;double word (32 bits)
   708             00000100   s_rampag .equ $0100                ;65xx RAM page
   709                        ;
   710                        ;
   711                        ;	data type sizes in bits...
   712                        ;
   713             00000008   s_bibyte .equ 8                    ;byte
   714             00000004   s_bnybbl .equ 4                    ;nybble
   715                        ;
   716                        ;
   717                        ;	miscellaneous...
   718                        ;
   719             0000002C   bitabs   .equ $2c                  ;absolute BIT opcode
   720             00000024   bitzp    .equ $24                  ;zero page BIT opcode
   721                        ;
   722                        ;================================================================================
   723                        ;
   724                        ;W65C816S NATIVE MODE STATUS REGISTER DEFINITIONS
   725                        ;
   726             00000001   s_mpudbx .equ s_byte               ;data bank size
   727             00000002   s_mpudpx .equ s_word               ;direct page size
   728             00000001   s_mpupbx .equ s_byte               ;program bank size
   729             00000002   s_mpupcx .equ s_word               ;program counter size
   730             00000002   s_mpuspx .equ s_word               ;stack pointer size
   731             00000001   s_mpusrx .equ s_byte               ;status size
   732                        ;
   733                        ;
   734                        ;	status register flags...
   735                        ;
  Sat Jan 22 2022 12:11                                                                                                Page 14


   736             00000001   sr_car   .equ %00000001            ;C
   737             00000002   sr_zer   .equ sr_car<<1          ;Z
   738             00000004   sr_irq   .equ sr_zer<<1          ;I
   739             00000008   sr_bdm   .equ sr_irq<<1          ;D
   740             00000010   sr_ixw   .equ sr_bdm<<1          ;x
   741             00000020   sr_amw   .equ sr_ixw<<1          ;m
   742             00000040   sr_ovl   .equ sr_amw<<1          ;V
   743             00000080   sr_neg   .equ sr_ovl<<1          ;N
   744                        ;
   745                        ;	NVmxDIZC
   746                        ;	xxxxxxxx
   747                        ;	||||||||
   748                        ;	|||||||+---> 1 = carry set/generated
   749                        ;	||||||+----> 1 = result = zero
   750                        ;	|||||+-----> 1 = IRQs ignored
   751                        ;	||||+------> 0 = binary arithmetic mode
   752                        ;	||||         1 = decimal arithmetic mode
   753                        ;	|||+-------> 0 = 16 bit index
   754                        ;	|||          1 = 8 bit index
   755                        ;	||+--------> 0 = 16 bit .A & memory
   756                        ;	||           1 = 8 bit .A & memory
   757                        ;	|+---------> 1 = sign overflow
   758                        ;	+----------> 1 = result = negative
   759                        ;
   760                        ;================================================================================
   761                        ;
   762                        ;"SIZE-OF" CONSTANTS
   763                        ;
   764             00000003   s_addr   .equ s_xword              ;24 bit address
   765             00000020   s_auxbuf .equ 32                   ;auxiliary buffer
   766             00000045   s_ibuf   .equ 69                   ;input buffer
   767             00000003   s_mnemon .equ 3                    ;MPU ASCII mnemonic
   768             00000002   s_mnepck .equ 2                    ;MPU encoded mnemonic
   769             00000003   s_mvinst .equ 3                    ;MVN/MVP instruction
   770             00000001   s_opcode .equ s_byte               ;MPU opcode
   771             00000003   s_oper   .equ s_xword              ;operand
   772             00000004   s_pfac   .equ s_dword              ;primary math accumulator
   773             00000006   s_sfac   .equ s_dword+s_word       ;secondary math accumulators
   774                        ;
   775                        ;================================================================================
   776                        ;
   777                        ;"NUMBER-OF" CONSTANTS
   778                        ;
   779             00000015   n_dbytes .equ 21                   ;default disassembly bytes
   780             00000008   n_dump   .equ 8                    ;bytes per memory dump line
   781             000000FF   n_mbytes .equ s_rampag-1           ;default memory dump bytes
   782             0000000A   n_hccols .equ 10                   ;compare/hunt display columns
   783             00000009   n_opcols .equ 3*s_oper             ;disassembly operand columns
   784             00000004   n_opslsr .equ 4                    ;LSRs to extract instruction size
   785             00000005   n_shfenc .equ 5                    ;shifts to encode/decode mnemonic
   786                        ;
   787                        ;================================================================================
   788                        ;
   789                        ;NUMERIC CONVERSION CONSTANTS
   790                        ;
   791             00000006   a_hexdec .equ 'A'-'9'-2            ;hex to decimal difference
   792             00000025   c_bin    .equ '%'                  ;binary prefix
  Sat Jan 22 2022 12:11                                                                                                Page 15


   793             0000002B   c_dec    .equ '+'                  ;decimal prefix
   794             00000024   c_hex    .equ '$'                  ;hexadecimal prefix
   795             00000040   c_oct    .equ '@'                  ;octal prefix
   796             00000066   k_hex    .equ 'f'                  ;hex ASCII conversion
   797             00000020   m_bits   .equ s_pfac*s_bibyte      ;operand bit size
   798             00000030   m_cbits  .equ s_sfac*s_bibyte      ;workspace bit size
   799             0000000F   bcdumask .equ %00001111            ;isolate BCD units mask
   800             00000030   btoamask .equ %00110000            ;binary to ASCII mask
   801                        ;
   802                        ;================================================================================
   803                        ;
   804                        ;ASSEMBLER/DISASSEMBLER CONSTANTS
   805                        ;
   806             0000003F   a_mnecvt .equ '?'                  ;encoded mnemonic conversion base
   807             0000001F   aimmaska .equ %00011111            ;.A immediate opcode test #1
   808             00000009   aimmaskb .equ %00001001            ;.A immediate opcode test #2
   809             00000041   asmprfx  .equ 'A'                  ;assemble code prefix
   810             00000009   ascprmct .equ 9                    ;assembler prompt "size-of"
   811             0000002E   disprfx  .equ '.'                  ;disassemble code prefix
   812             000000C0   flimmask .equ %11000000            ;force long immediate flag
   813             000000E0   opc_cpxi .equ $e0                  ;CPX # opcode
   814             000000C0   opc_cpyi .equ $c0                  ;CPY # opcode
   815             000000A2   opc_ldxi .equ $a2                  ;LDX # opcode
   816             000000A0   opc_ldyi .equ $a0                  ;LDY # opcode
   817             00000054   opc_mvn  .equ $54                  ;MVN opcode
   818             00000044   opc_mvp  .equ $44                  ;MVP opcode
   819             000000C2   opc_rep  .equ $c2                  ;REP opcode
   820             000000E2   opc_sep  .equ $e2                  ;SEP opcode
   821             00000030   pfmxmask .equ sr_amw|sr_ixw      ;MPU m & x flag bits mask
   822                        ;
   823                        ;
   824                        ;	assembler prompt buffer offsets...
   825                        ;
   826             00000002   apadrbkh .equ s_word               ;instruction address bank MSN
   827             00000003   apadrbkl .equ apadrbkh+s_byte      ;instruction address bank LSN
   828             00000004   apadrmbh .equ apadrbkl+s_byte      ;instruction address MSB MSN
   829             00000005   apadrmbl .equ apadrmbh+s_byte      ;instruction address MSB LSN
   830             00000006   apadrlbh .equ apadrmbl+s_byte      ;instruction address LSB MSN
   831             00000007   apadrlbl .equ apadrlbh+s_byte      ;instruction address LSB LSN
   832                        ;
   833                        ;
   834                        ;	addressing mode preamble symbols...
   835                        ;
   836             00000021   amp_flim .equ '!'                  ;force long immediate
   837             00000023   amp_imm  .equ '#'                  ;immediate
   838             00000028   amp_ind  .equ '('                  ;indirect
   839             0000005B   amp_indl .equ '['                  ;indirect long
   840                        ;
   841                        ;
   842                        ;	addressing mode symbolic translation indices...
   843                        ;
   844             00000000   am_nam   .equ %0000                ;no symbol
   845             00000001   am_imm   .equ %0001                ;#
   846             00000002   am_adrx  .equ %0010                ;<addr>,X
   847             00000003   am_adry  .equ %0011                ;<addr>,Y
   848             00000004   am_ind   .equ %0100                ;(<addr>)
   849             00000005   am_indl  .equ %0101                ;[<dp>]
  Sat Jan 22 2022 12:11                                                                                                Page 16


   850             00000006   am_indly .equ %0110                ;[<dp>],Y
   851             00000007   am_indx  .equ %0111                ;(<addr>,X)
   852             00000008   am_indy  .equ %1000                ;(<dp>),Y
   853             00000009   am_stk   .equ %1001                ;<offset>,S
   854             0000000A   am_stky  .equ %1010                ;(<offset>,S),Y
   855             0000000B   am_move  .equ %1011                ;<sbnk>,<dbnk>
   856                        ;
   857                        ;
   858                        ;	operand size translation indices...
   859                        ;
   860             00000000   ops0     .equ %0000<<4           ;no operand
   861             00000010   ops1     .equ %0001<<4           ;8 bit operand
   862             00000020   ops2     .equ %0010<<4           ;16 bit operand
   863             00000030   ops3     .equ %0011<<4           ;24 bit operand
   864             00000050   bop1     .equ %0101<<4           ;8 bit relative branch
   865             00000060   bop2     .equ %0110<<4           ;16 bit relative branch
   866             00000090   vops     .equ %1001<<4           ;8 or 16 bit operand
   867                        ;
   868                        ;
   869                        ;	operand size & addressing mode extraction masks...
   870                        ;
   871             0000000F   amodmask .equ %00001111            ;addressing mode index
   872             00000030   opsmask  .equ %00110000            ;operand size
   873             000000C0   vopsmask .equ %11000000            ;BOPx & VOPS flag bits
   874                        ;
   875                        ;
   876                        ;	instruction mnemonic encoding...
   877                        ;
   878             00002144   mne_adc  .equ $2144                ;ADC
   879             00002BC4   mne_and  .equ $2bc4                ;AND
   880             00006D04   mne_asl  .equ $6d04                ;ASL
   881             00002106   mne_bcc  .equ $2106                ;BCC
   882             0000A106   mne_bcs  .equ $a106                ;BCS
   883             00009186   mne_beq  .equ $9186                ;BEQ
   884             0000AA86   mne_bit  .equ $aa86                ;BIT
   885             00005386   mne_bmi  .equ $5386                ;BMI
   886             000033C6   mne_bne  .equ $33c6                ;BNE
   887             00006C46   mne_bpl  .equ $6c46                ;BPL
   888             000014C6   mne_bra  .equ $14c6                ;BRA
   889             000064C6   mne_brk  .equ $64c6                ;BRK
   890             00006CC6   mne_brl  .equ $6cc6                ;BRL
   891             000025C6   mne_bvc  .equ $25c6                ;BVC
   892             0000A5C6   mne_bvs  .equ $a5c6                ;BVS
   893             00002348   mne_clc  .equ $2348                ;CLC
   894             00002B48   mne_cld  .equ $2b48                ;CLD
   895             00005348   mne_cli  .equ $5348                ;CLI
   896             0000BB48   mne_clv  .equ $bb48                ;CLV
   897             00008B88   mne_cmp  .equ $8b88                ;CMP
   898             00008C08   mne_cop  .equ $8c08                ;COP
   899             0000CC48   mne_cpx  .equ $cc48                ;CPX
   900             0000D448   mne_cpy  .equ $d448                ;CPY
   901             0000218A   mne_dec  .equ $218a                ;DEC
   902             0000C98A   mne_dex  .equ $c98a                ;DEX
   903             0000D18A   mne_dey  .equ $d18a                ;DEY
   904             00009C0C   mne_eor  .equ $9c0c                ;EOR
   905             000023D4   mne_inc  .equ $23d4                ;INC
   906             0000CBD4   mne_inx  .equ $cbd4                ;INX
  Sat Jan 22 2022 12:11                                                                                                Page 17


   907             0000D3D4   mne_iny  .equ $d3d4                ;INY
   908             00006B96   mne_jml  .equ $6b96                ;JML
   909             00008B96   mne_jmp  .equ $8b96                ;JMP
   910             00006D16   mne_jsl  .equ $6d16                ;JSL
   911             00009D16   mne_jsr  .equ $9d16                ;JSR
   912             0000115A   mne_lda  .equ $115a                ;LDA
   913             0000C95A   mne_ldx  .equ $c95a                ;LDX
   914             0000D15A   mne_ldy  .equ $d15a                ;LDY
   915             00009D1A   mne_lsr  .equ $9d1a                ;LSR
   916             00007DDC   mne_mvn  .equ $7ddc                ;MVN
   917             00008DDC   mne_mvp  .equ $8ddc                ;MVP
   918             00008C1E   mne_nop  .equ $8c1e                ;NOP
   919             000014E0   mne_ora  .equ $14e0                ;ORA
   920             000011A2   mne_pea  .equ $11a2                ;PEA
   921             000051A2   mne_pei  .equ $51a2                ;PEI
   922             000099A2   mne_per  .equ $99a2                ;PER
   923             00001262   mne_pha  .equ $1262                ;PHA
   924             00001A62   mne_phb  .equ $1a62                ;PHB
   925             00002A62   mne_phd  .equ $2a62                ;PHD
   926             00006262   mne_phk  .equ $6262                ;PHK
   927             00008A62   mne_php  .equ $8a62                ;PHP
   928             0000CA62   mne_phx  .equ $ca62                ;PHX
   929             0000D262   mne_phy  .equ $d262                ;PHY
   930             00001362   mne_pla  .equ $1362                ;PLA
   931             00001B62   mne_plb  .equ $1b62                ;PLB
   932             00002B62   mne_pld  .equ $2b62                ;PLD
   933             00008B62   mne_plp  .equ $8b62                ;PLP
   934             0000CB62   mne_plx  .equ $cb62                ;PLX
   935             0000D362   mne_ply  .equ $d362                ;PLY
   936             000089A6   mne_rep  .equ $89a6                ;REP
   937             00006C26   mne_rol  .equ $6c26                ;ROL
   938             00009C26   mne_ror  .equ $9c26                ;ROR
   939             00005566   mne_rti  .equ $5566                ;RTI
   940             00006D66   mne_rtl  .equ $6d66                ;RTL
   941             0000A566   mne_rts  .equ $a566                ;RTS
   942             000020E8   mne_sbc  .equ $20e8                ;SBC
   943             000021A8   mne_sec  .equ $21a8                ;SEC
   944             000029A8   mne_sed  .equ $29a8                ;SED
   945             000051A8   mne_sei  .equ $51a8                ;SEI
   946             000089A8   mne_sep  .equ $89a8                ;SEP
   947             00001568   mne_sta  .equ $1568                ;STA
   948             00008D68   mne_stp  .equ $8d68                ;STP
   949             0000CD68   mne_stx  .equ $cd68                ;STX
   950             0000D568   mne_sty  .equ $d568                ;STY
   951             0000DD68   mne_stz  .equ $dd68                ;STZ
   952             0000C8AA   mne_tax  .equ $c8aa                ;TAX
   953             0000D0AA   mne_tay  .equ $d0aa                ;TAY
   954             0000292A   mne_tcd  .equ $292a                ;TCD
   955             0000A12A   mne_tcs  .equ $a12a                ;TCS
   956             0000216A   mne_tdc  .equ $216a                ;TDC
   957             00001CEA   mne_trb  .equ $1cea                ;TRB
   958             00001D2A   mne_tsb  .equ $1d2a                ;TSB
   959             0000252A   mne_tsc  .equ $252a                ;TSC
   960             0000CD2A   mne_tsx  .equ $cd2a                ;TSX
   961             0000166A   mne_txa  .equ $166a                ;TXA
   962             0000A66A   mne_txs  .equ $a66a                ;TXS
   963             0000D66A   mne_txy  .equ $d66a                ;TXY
  Sat Jan 22 2022 12:11                                                                                                Page 18


   964             000016AA   mne_tya  .equ $16aa                ;TYA
   965             0000CEAA   mne_tyx  .equ $ceaa                ;TYX
   966             000050B0   mne_wai  .equ $50b0                ;WAI
   967             00007170   mne_wdm  .equ $7170                ;WDM
   968             000010F2   mne_xba  .equ $10f2                ;XBA
   969             00003132   mne_xce  .equ $3132                ;XCE
   970                        ;
   971                        ;
   972                        ;	encoded instruction mnemonic indices...
   973                        ;
   974             00000010   mne_adcx .equ 16                   ;ADC
   975             0000001D   mne_andx .equ 29                   ;AND
   976             0000002C   mne_aslx .equ 44                   ;ASL
   977             0000000F   mne_bccx .equ 15                   ;BCC
   978             00000041   mne_bcsx .equ 65                   ;BCS
   979             0000003B   mne_beqx .equ 59                   ;BEQ
   980             00000046   mne_bitx .equ 70                   ;BIT
   981             00000024   mne_bmix .equ 36                   ;BMI
   982             0000001F   mne_bnex .equ 31                   ;BNE
   983             0000002A   mne_bplx .equ 42                   ;BPL
   984             00000005   mne_brax .equ 5                    ;BRA
   985             00000027   mne_brkx .equ 39                   ;BRK
   986             0000002B   mne_brlx .equ 43                   ;BRL
   987             00000017   mne_bvcx .equ 23                   ;BVC
   988             00000044   mne_bvsx .equ 68                   ;BVS
   989             00000014   mne_clcx .equ 20                   ;CLC
   990             0000001B   mne_cldx .equ 27                   ;CLD
   991             00000023   mne_clix .equ 35                   ;CLI
   992             00000047   mne_clvx .equ 71                   ;CLV
   993             00000035   mne_cmpx .equ 53                   ;CMP
   994             00000037   mne_copx .equ 55                   ;COP
   995             0000004E   mne_cpxx .equ 78                   ;CPX
   996             00000058   mne_cpyx .equ 88                   ;CPY
   997             00000012   mne_decx .equ 18                   ;DEC
   998             0000004A   mne_dexx .equ 74                   ;DEX
   999             00000054   mne_deyx .equ 84                   ;DEY
  1000             0000003D   mne_eorx .equ 61                   ;EOR
  1001             00000015   mne_incx .equ 21                   ;INC
  1002             0000004D   mne_inxx .equ 77                   ;INX
  1003             00000057   mne_inyx .equ 87                   ;INY
  1004             00000028   mne_jmlx .equ 40                   ;JML
  1005             00000036   mne_jmpx .equ 54                   ;JMP
  1006             0000002D   mne_jslx .equ 45                   ;JSL
  1007             0000003F   mne_jsrx .equ 63                   ;JSR
  1008             00000001   mne_ldax .equ 1                    ;LDA
  1009             00000049   mne_ldxx .equ 73                   ;LDX
  1010             00000053   mne_ldyx .equ 83                   ;LDY
  1011             00000040   mne_lsrx .equ 64                   ;LSR
  1012             00000030   mne_mvnx .equ 48                   ;MVN
  1013             0000003A   mne_mvpx .equ 58                   ;MVP
  1014             00000038   mne_nopx .equ 56                   ;NOP
  1015             00000006   mne_orax .equ 6                    ;ORA
  1016             00000002   mne_peax .equ 2                    ;PEA
  1017             00000021   mne_peix .equ 33                   ;PEI
  1018             0000003C   mne_perx .equ 60                   ;PER
  1019             00000003   mne_phax .equ 3                    ;PHA
  1020             0000000A   mne_phbx .equ 10                   ;PHB
  Sat Jan 22 2022 12:11                                                                                                Page 19


  1021             0000001A   mne_phdx .equ 26                   ;PHD
  1022             00000026   mne_phkx .equ 38                   ;PHK
  1023             00000033   mne_phpx .equ 51                   ;PHP
  1024             0000004B   mne_phxx .equ 75                   ;PHX
  1025             00000055   mne_phyx .equ 85                   ;PHY
  1026             00000004   mne_plax .equ 4                    ;PLA
  1027             0000000B   mne_plbx .equ 11                   ;PLB
  1028             0000001C   mne_pldx .equ 28                   ;PLD
  1029             00000034   mne_plpx .equ 52                   ;PLP
  1030             0000004C   mne_plxx .equ 76                   ;PLX
  1031             00000056   mne_plyx .equ 86                   ;PLY
  1032             00000031   mne_repx .equ 49                   ;REP
  1033             00000029   mne_rolx .equ 41                   ;ROL
  1034             0000003E   mne_rorx .equ 62                   ;ROR
  1035             00000025   mne_rtix .equ 37                   ;RTI
  1036             0000002E   mne_rtlx .equ 46                   ;RTL
  1037             00000043   mne_rtsx .equ 67                   ;RTS
  1038             0000000E   mne_sbcx .equ 14                   ;SBC
  1039             00000013   mne_secx .equ 19                   ;SEC
  1040             00000019   mne_sedx .equ 25                   ;SED
  1041             00000022   mne_seix .equ 34                   ;SEI
  1042             00000032   mne_sepx .equ 50                   ;SEP
  1043             00000007   mne_stax .equ 7                    ;STA
  1044             00000039   mne_stpx .equ 57                   ;STP
  1045             00000050   mne_stxx .equ 80                   ;STX
  1046             00000059   mne_styx .equ 89                   ;STY
  1047             0000005B   mne_stzx .equ 91                   ;STZ
  1048             00000048   mne_taxx .equ 72                   ;TAX
  1049             00000052   mne_tayx .equ 82                   ;TAY
  1050             00000018   mne_tcdx .equ 24                   ;TCD
  1051             00000042   mne_tcsx .equ 66                   ;TCS
  1052             00000011   mne_tdcx .equ 17                   ;TDC
  1053             0000000C   mne_trbx .equ 12                   ;TRB
  1054             0000000D   mne_tsbx .equ 13                   ;TSB
  1055             00000016   mne_tscx .equ 22                   ;TSC
  1056             0000004F   mne_tsxx .equ 79                   ;TSX
  1057             00000008   mne_txax .equ 8                    ;TXA
  1058             00000045   mne_txsx .equ 69                   ;TXS
  1059             0000005A   mne_txyx .equ 90                   ;TXY
  1060             00000009   mne_tyax .equ 9                    ;TYA
  1061             00000051   mne_tyxx .equ 81                   ;TYX
  1062             00000020   mne_waix .equ 32                   ;WAI
  1063             0000002F   mne_wdmx .equ 47                   ;WDM
  1064             00000000   mne_xbax .equ 0                    ;XBA
  1065             0000001E   mne_xcex .equ 30                   ;XCE
  1066                        ;
  1067                        ;================================================================================
  1068                        ;
  1069                        ;MISCELLANEOUS CONSTANTS
  1070                        ;
  1071             00000004   halftab  .equ 4                    ;1/2 tabulation spacing
  1072             0000003E   memprfx  .equ '>'                  ;memory dump prefix
  1073             0000003A   memsepch .equ ':'                  ;memory dump separator
  1074             0000002E   memsubch .equ '.'                  ;memory dump non-print char
  1075             00000030   srinit   .equ %00110000            ;SR initialization value
  1076                        ;
  1077                        ;================================================================================
  Sat Jan 22 2022 12:11                                                                                                Page 20


  1078                        ;
  1079                        ;DIRECT PAGE STORAGE
  1080                        ;
  1081             00000010   reg_pbx  .equ zeropage             ;PB
  1082             00000011   reg_pcx  .equ reg_pbx+s_mpupbx     ;PC
  1083             00000013   reg_srx  .equ reg_pcx+s_mpupcx     ;SR
  1084             00000014   reg_ax   .equ reg_srx+s_mpusrx     ;.C
  1085             00000016   reg_xx   .equ reg_ax+s_word        ;.X
  1086             00000018   reg_yx   .equ reg_xx+s_word        ;.Y
  1087             0000001A   reg_spx  .equ reg_yx+s_word        ;SP
  1088             0000001C   reg_dpx  .equ reg_spx+s_mpuspx     ;DP
  1089             0000001E   reg_dbx  .equ reg_dpx+s_mpudpx     ;DB
  1090                        ;
  1091                        ;
  1092                        ;	general workspace...
  1093                        ;
  1094             0000001F   addra    .equ reg_dbx+s_mpudbx     ;address #1
  1095             00000022   addrb    .equ addra+s_addr         ;address #2
  1096             00000025   faca     .equ addrb+s_addr         ;primary accumulator
  1097             00000029   facax    .equ faca+s_pfac          ;extended primary accumulator
  1098             0000002D   facb     .equ facax+s_pfac         ;secondary accumulator
  1099             00000033   facc     .equ facb+s_sfac          ;tertiary accumulator
  1100             00000039   operand  .equ facc+s_sfac          ;instruction operand
  1101             0000003C   auxbufix .equ operand+s_oper       ;auxiliary buffer index
  1102             0000003D   ibufidx  .equ auxbufix+s_byte      ;input buffer index
  1103             0000003E   bitsdig  .equ ibufidx+s_byte       ;bits per numeral
  1104             0000003F   numeral  .equ bitsdig+s_byte       ;numeral buffer
  1105             00000040   radix    .equ numeral+s_byte       ;radix index
  1106             00000041   admodidx .equ radix+s_byte         ;addressing mode index
  1107             00000042   charcnt  .equ admodidx+s_byte      ;character counter
  1108             00000044   instsize .equ charcnt+s_word       ;instruction size
  1109             00000046   mnepck   .equ instsize+s_word      ;encoded mnemonic
  1110             00000048   opcode   .equ mnepck+s_mnepck      ;current opcode
  1111             00000049   status   .equ opcode+s_byte        ;I/O status flag
  1112             0000004A   xrtemp   .equ status+s_byte        ;temp .X storage
  1113             0000004B   eopsize  .equ xrtemp+s_byte        ;entered operand size
  1114             0000004C   flimflag .equ eopsize+s_byte       ;forced long immediate...
  1115             0000004D   vecbrkia .equ flimflag+s_byte      ;system indirect BRK vector
  1116                        ;
  1117                        ;	xx000000
  1118                        ;	||
  1119                        ;	|+---------> 0: .X/.Y .equ  8 bits
  1120                        ;	|            1: .X/.Y .equ  18 bits
  1121                        ;	+----------> 0: .A .equ  8 bits
  1122                        ;	             1: .A .equ  16 bits
  1123                        ;
  1124                        ;	------------------------------------------------------------------------
  1125                        ;	During assembly, FLIMFLAG indicates the operand size used with an immed-
  1126                        ;	iate mode instruction, thus causing the following disassembly to display
  1127                        ;	the assembled  operand size.   During disassembly,  FLIMFLAG will mirror
  1128                        ;	the effect of the most recent REP or SEP instruction.
  1129                        ;	------------------------------------------------------------------------
  1130                        ;
  1131             0000004D   iopsize  .equ flimflag+s_byte      ;operand size
  1132             0000004E   range    .equ iopsize+s_byte       ;allowable radix range
  1133             0000004F   vopsflag .equ range+s_byte         ;VOPS & ROPS mode bits
  1134                        ;
  Sat Jan 22 2022 12:11                                                                                                Page 21


  1135                        ;
  1136                        ;	copy/fill workspace (overlaps some of the above)...
  1137                        ;
  1138             00000025   mcftwork .equ faca                 ;start of copy/fill code
  1139             00000026   mcftopc  .equ mcftwork+s_byte      ;instruction opcode
  1140             00000027   mcftbnk  .equ mcftopc+s_byte       ;banks
  1141                        ;
  1142                        ;================================================================================
  1143                        ;
  1144                        ;SUPERMON 816 JUMP TABLE
  1145                        ;
  1146                                 *=_origin_
  1147                        ;
  1148 00:8000: 80 02        JMON     bra mon               ;cold start entry
  1149 00:8002: 80 5A        JMONBRK  bra monbrk            ;software interrupt intercept
  1150                        ;
  1151                        ;
  1152                        ;================================================================================
  1153                        ;
  1154                        ;mon: SUPERMON 816 COLD START
  1155                        ;
  1156                        mon
  1157                        
  1158 00:8004: C2 10        		     	REP #$10 		; 16 bit Index registers
  1159                        	    	  LONGI ON
  1160 00:8006: E2 20                	SEP #$20 		; 8 bit Accumulator
  1161                        		      LONGA OFF
  1162 00:8008: A0 00 00     	    	  LDY   #$0000		; LOAD $00 INTO Y
  1163                        OUTSTRLP:
  1164 00:800B: B9 DE 91             	LDA ALIVEM,Y   		; LOAD NEXT CHAR FROM STRING INTO ACC
  1165 00:800E: C9 00                	CMP #$00		; IS NULL?
  1166 00:8010: F0 07                	BEQ ENDOUTSTR		; YES, END PRINT OUT
  1167 00:8012: 20 71 FF             	JSR putcha  		; PRINT CHAR IN ACC
  1168 00:8015: C8                   	INY      		; Y=Y+1 (BUMP INDEX)
  1169 00:8016: 4C 0B 80             	JMP OUTSTRLP		; DO NEXT CHAR
  1170                        ENDOUTSTR:
  1171 00:8019: E2 10                  SEP #$10 		; 8 bit Index registers
  1172                        		      LONGI OFF
  1173                        
  1174                        
  1175                                  slonga
+ 1175 00:801B: C2 20                 .db $c2,$20
  1176 00:801D: AD 02 03              lda vecbrki           ;BRK vector
  1177                                 cmpw monbrk           ;pointing at monitor?
+ 1177 00:8020: C9 5E                 cmp #<monbrk
+ 1177 00:8022: 80                    .db >monbrk
  1178 00:8023: D0 03                 bne moncontinue
  1179 00:8025: 4C A1 80              jmp monreg 		;yes, ignore cold start
  1180                        ;
  1181                        moncontinue:
  1182 00:8028: 8D 4D 00              sta vecbrkia          ;save vector for exit
  1183                                 ldaw monbrk           ;Supermon 816 intercepts...
+ 1183 00:802B: A9 5E                 lda #<monbrk
+ 1183 00:802D: 80                    .db >monbrk
  1184 00:802E: 8D 02 03              sta vecbrki           ;BRK handler
  1185                                 shortr                ;8 bit registers
+ 1185 00:8031: E2 30                 .db $e2,$30
  Sat Jan 22 2022 12:11                                                                                                Page 22


  1186 00:8033: A2 3F                 ldx #vopsflag-reg_pbx
  1187                        ;
  1188 00:8035: 9E 10 00     _0000010 stz reg_pbx,x         ;clear DP storage
  1189 00:8038: CA                    dex
  1190 00:8039: 10 FA                 bpl _0000010
  1191                        ;
  1192                        ;
  1193                        ;	initialize register shadows...
  1194                        ;
  1195 00:803B: A9 30                 lda #srinit
  1196 00:803D: 8D 13 00              sta reg_srx           ;status register
  1197                                 slonga                 ;16 bit .A
+ 1197 00:8040: C2 20                 .db $c2,$20
  1198                                 ldaw hwstack          ;top of hardware stack
+ 1198 00:8042: A9 FF                 lda #<hwstack
+ 1198 00:8044: 7F                    .db >hwstack
  1199 00:8045: 1B                    tcs                   ;set SP
  1200 00:8046: 7B                    tdc                   ;get & save...
  1201 00:8047: 8D 1C 00              sta reg_dpx           ;DP register
  1202                                 ldaw 0
+ 1202 00:804A: A9 00                 lda #<0
+ 1202 00:804C: 00                    .db >0
  1203                                 shorta
+ 1203 00:804D: E2 20                 .db $e2,$20
  1204 00:804F: 4B                    phk
  1205 00:8050: 68                    pla                   ;capture PB &...
  1206 00:8051: 8D 10 00              sta reg_pbx           ;set
  1207 00:8054: 8B                    phb
  1208 00:8055: 68                    pla                   ;capture DB &...
  1209 00:8056: 8D 1E 00              sta reg_dbx           ;set
  1210                        ;
  1211                        ;
  1212                        ;	print startup banner...
  1213                        ;
  1214 00:8059: F4 54 91              pea mm_entry          ;"...ready..."
  1215 00:805C: 80 36                 bra moncom
  1216                        ;
  1217                        ;================================================================================
  1218                        ;
  1219                        ;monbrk: SOFTWARE INTERRUPT INTERCEPT
  1220                        ;
  1221                        ;	------------------------------------------------------------------------
  1222                        ;	This is the entry point taken when a BRK instruction is executed.  It is
  1223                        ;	assumed that the BRK  handler has pushed the registers to the stack that
  1224                        ;	are not automatically pushed by the MPU in response to BRK.
  1225                        ;	------------------------------------------------------------------------
  1226                        ;
  1227                        monbrk
  1228 00:805E: D8                  	CLD			; VERIFY DECIMAL MODE IS OFF
  1229 00:805F: 18           	      CLC 			;
  1230 00:8060: FB           	      XCE 			; SET NATIVE MODE
  1231 00:8061: 8B                   phb                     ;save DB
  1232 00:8062: 0B                   phd                     ;save DP
  1233                                slonga                  ;16 bit .A
+ 1233 00:8063: C2 20                 .db $c2,$20
  1234 00:8065: 48                   pha
  1235                                ldaw $0000              ;set DPR
  Sat Jan 22 2022 12:11                                                                                                Page 23


+ 1235 00:8066: A9 00                 lda #<$0000
+ 1235 00:8068: 00                    .db >$0000
  1236 00:8069: 5B                   tcd                     ;
  1237 00:806A: 68                   pla
  1238                                longr                 	;store 16 bit registers
+ 1238 00:806B: C2 30                 .db $c2,$30
  1239 00:806D: 85 14                sta <reg_ax            	;.A
  1240 00:806F: 86 16                stx <reg_xx            	;.X
  1241 00:8071: 84 18                sty <reg_yx            	;.Y
  1242 00:8073: 68                   pla                   	;get DP &...
  1243 00:8074: 85 1C                sta <reg_dpx           	;store
  1244                                shortx
+ 1244 00:8076: E2 10                 .db $e2,$10
  1245 00:8078: FA                   plx                   	;get DB &...
  1246 00:8079: 86 1E                stx <reg_dbx           	;store
  1247 00:807B: FA                   plx                   	;get SR &...
  1248 00:807C: 86 13                stx <reg_srx           	;store
  1249 00:807E: 68                   pla                   	;get PC &...
  1250 00:807F: 85 11                sta <reg_pcx           	;store
  1251 00:8081: FA                   plx                   	;get PB &...
  1252 00:8082: 86 10                stx <reg_pbx           	;store
  1253                                slonga
+ 1253 00:8084: C2 20                 .db $c2,$20
  1254                                ldaw hwstack            ;top of hardware stack
+ 1254 00:8086: A9 FF                 lda #<hwstack
+ 1254 00:8088: 7F                    .db >hwstack
  1255 00:8089: 1B                   tcs                     ;set SPR
  1256 00:808A: 58                  	cli                   	;reenable IRQs
  1257                                shorta
+ 1257 00:808B: E2 20                 .db $e2,$20
  1258 00:808D: A9 00                lda #$00                ;set DBR
  1259 00:808F: 48                   pha
  1260 00:8090: AB                   PLB
  1261 00:8091: F4 4A 91             pea mm_brk              ;"*BRK"
  1262                        ;
  1263                        ;================================================================================
  1264                        ;
  1265                        ;moncom: COMMON ENTRY POINT
  1266                        ;
  1267                        ;	--------------------------------------
  1268                        ;	DO NOT directly call this entry point!
  1269                        ;	--------------------------------------
  1270                        ;
  1271 00:8094: 20 3D 88     moncom   jsr sprint            ;print heading
  1272                                 slonga
+ 1272 00:8097: C2 20                 .db $c2,$20
  1273 00:8099: 3B                    tsc                   ;get SP &...
  1274 00:809A: 85 1A                 sta <reg_spx           ;store
  1275 00:809C: C2 FF                 rep #%11111111         ;clear SR &...
  1276 00:809E: E2 30                 sep #srinit            ;set default state
  1277 00:80A0: 38                    sec                   ;see next
  1278                        ;
  1279                        ;================================================================================
  1280                        ;
  1281                        ;monreg: DISPLAY MPU REGISTERS
  1282                        ;
  1283                        ;	---------
  Sat Jan 22 2022 12:11                                                                                                Page 24


  1284                        ;	syntax: R
  1285                        ;	---------
  1286                        ;
  1287 00:80A1: B0 03        monreg   bcs _0010010          ;okay to proceed
  1288                        ;
  1289 00:80A3: 4C 3F 81              jmp monerr            ;error if called with a parm
  1290                        ;
  1291 00:80A6: F4 77 91     _0010010 pea mm_regs
  1292 00:80A9: 20 3D 88              jsr sprint            ;display heading
  1293                        ;
  1294                        ;
  1295                        ;	display program bank & counter...
  1296                        ;
  1297                                 shorta
+ 1297 00:80AC: E2 20                 .db $e2,$20
  1298 00:80AE: A5 10                 lda <reg_pbx           ;PB
  1299 00:80B0: 20 13 88              jsr dpyhex            ;display as hex ASCII
  1300 00:80B3: 20 38 88              jsr printspc          ;inter-field space
  1301                        
  1302                                 slonga
+ 1302 00:80B6: C2 20                 .db $c2,$20
  1303 00:80B8: A5 11                 lda <reg_pcx
  1304                                 shorta
+ 1304 00:80BA: E2 20                 .db $e2,$20
  1305 00:80BC: 20 03 88              jsr dpyhexw           ;display PC
  1306 00:80BF: A2 02                 ldx #2
  1307 00:80C1: 20 1D 88              jsr multspc           ;inter-field spacing
  1308                        ;
  1309                        ;
  1310                        ;	display SR in bitwise fashion...
  1311                        ;
  1312 00:80C4: A6 13                 ldx <reg_srx           ;SR
  1313 00:80C6: A0 08                 ldy #s_bibyte         ;bits in a byte
  1314                        ;
  1315 00:80C8: 8A           _0010020 txa                   ;remaining SR bits
  1316 00:80C9: 0A                    asl                   ;grab one of them
  1317 00:80CA: AA                    tax                   ;save remainder
  1318 00:80CB: A9 30                 lda #'0'              ;a clear bit but...
  1319 00:80CD: 69 00                 adc #0                ;adjust if set &...
  1320 00:80CF: 20 71 FF              jsr putcha            ;print
  1321 00:80D2: 88                    dey                   ;bit processed
  1322 00:80D3: D0 F3                 bne _0010020          ;do another
  1323                        ;
  1324                        ;
  1325                        ;	display .C, .X, .Y, SP & DP...
  1326                        ;
  1327 00:80D5: 20 38 88     _0010030 jsr printspc          ;spacing
  1328                                 slonga
+ 1328 00:80D8: C2 20                 .db $c2,$20
  1329 00:80DA: B9 14 00              lda reg_ax,y          ;get register value
  1330                                 shorta
+ 1330 00:80DD: E2 20                 .db $e2,$20
  1331 00:80DF: 20 03 88              jsr dpyhexw           ;convert & display
  1332                        
  1333                        ;         .rept s_word
  1334 00:80E2: C8                      iny
  1335 00:80E3: C8                      iny
  Sat Jan 22 2022 12:11                                                                                                Page 25


  1336                        ;         .endr
  1337                        
  1338 00:80E4: C0 08                 cpy #reg_dbx-reg_ax-2
  1339 00:80E6: 90 ED                 bcc _0010030          ;next
  1340                        
  1341 00:80E8: F4 A0 91              pea mm_regs1
  1342 00:80EB: 20 3D 88              jsr sprint            ;display heading
  1343                                 slonga
+ 1343 00:80EE: C2 20                 .db $c2,$20
  1344 00:80F0: A5 1C                 lda <reg_dpx          ;get register value
  1345                                 shorta
+ 1345 00:80F2: E2 20                 .db $e2,$20
  1346 00:80F4: 20 03 88              jsr dpyhexw           ;convert & display
  1347                        ;
  1348                        ;
  1349                        ;	display DB...
  1350                        ;
  1351 00:80F7: 20 38 88              jsr printspc          ;more spacing
  1352 00:80FA: A5 1E                 lda <reg_dbx           ;get DB &...
  1353 00:80FC: 20 13 88              jsr dpyhex            ;display it
  1354                        ;
  1355                        ;================================================================================
  1356                        ;
  1357                        ;monce: COMMAND EXECUTIVE
  1358                        ;
  1359                        monce    shorta
+ 1359 00:80FF: E2 20                 .db $e2,$20
  1360 00:8101: A9 00                 lda #0                ;default buffer index
  1361                        ;
  1362                        moncea   shortr                ;alternate entry point
+ 1362 00:8103: E2 30                 .db $e2,$30
  1363 00:8105: 8D 3D 00              sta ibufidx           ;(re)set buffer index
  1364 00:8108: F4 73 91              pea mm_prmpt
  1365 00:810B: 20 3D 88              jsr sprint            ;display input prompt
  1366 00:810E: 20 CE 8C              jsr input             ;await some input
  1367                        ;
  1368 00:8111: 20 29 8D     _0020010 jsr getcharc          ;read from buffer
  1369 00:8114: F0 E9                 beq monce             ;terminator, just loop
  1370                        ;
  1371 00:8116: C9 20                 cmp #a_blank
  1372 00:8118: F0 F7                 beq _0020010          ;strip leading blanks
  1373                        ;
  1374 00:811A: A2 0C                 ldx #n_mpctab-1       ;number of primary commands
  1375                        ;
  1376 00:811C: DD EE 8D     _0020020 cmp mpctab,x          ;search primary command list
  1377 00:811F: D0 0E                 bne _0020030
  1378                        ;
  1379 00:8121: 8A                    txa                   ;get index
  1380 00:8122: 0A                    asl                   ;double for offset
  1381 00:8123: AA                    tax
  1382                                 slonga
+ 1382 00:8124: C2 20                 .db $c2,$20
  1383 00:8126: BD FB 8D              lda mpcextab,x        ;command address -1
  1384 00:8129: 48                    pha                   ;prime the stack
  1385                                 shorta
+ 1385 00:812A: E2 20                 .db $e2,$20
  1386 00:812C: 4C 46 8B              jmp getparm           ;evaluate parm & execute command
  Sat Jan 22 2022 12:11                                                                                                Page 26


  1387                        ;
  1388 00:812F: CA           _0020030 dex
  1389 00:8130: 10 EA                 bpl _0020020          ;continue searching primary commands
  1390                        ;
  1391 00:8132: A2 03                 ldx #n_radix-1        ;number of radices
  1392                        ;
  1393 00:8134: DD 29 8E     _0020040 cmp radxtab,x         ;search conversion command list
  1394 00:8137: D0 03                 bne _0020050
  1395                        ;
  1396 00:8139: 4C F3 85              jmp monenv            ;convert & display parameter
  1397                        ;
  1398 00:813C: CA           _0020050 dex
  1399 00:813D: 10 F5                 bpl _0020040
  1400                        ;
  1401                        ;================================================================================
  1402                        ;
  1403                        ;monerr: COMMON ERROR HANDLER
  1404                        ;
  1405                        monerr   shortr                ;8 bit registers
+ 1405 00:813F: E2 30                 .db $e2,$30
  1406                        ;
  1407 00:8141: 20 E8 87     monerraa jsr dpyerr            ;indicate an error &...
  1408 00:8144: 80 B9                 bra monce             ;return to input loop
  1409                        
  1410                        ;
  1411                        ;================================================================================
  1412                        ;
  1413                        ;monasc: ASSEMBLE CODE
  1414                        ;
  1415                        ;	-----------------------------------------------------------------------
  1416                        ;	syntax: A <addr> <mnemonic> [<argument>]
  1417                        ;
  1418                        ;	After a line of code has been successfully assembled it will be disass-
  1419                        ;	embled & displayed,  & the monitor will prompt with the next address to
  1420                        ;	which code may be assembled.
  1421                        ;	-----------------------------------------------------------------------
  1422                        ;
  1423 00:8146: 90 03        monasc   bcc _0030020          ;assembly address entered
  1424                        ;
  1425 00:8148: 4C 3F 81     _0030010 jmp monerr            ;terminate w/error
  1426                        ;
  1427                        ;
  1428                        ;	evaluate assembly address...
  1429                        ;
  1430 00:814B: 20 34 8B     _0030020 jsr facasize          ;check address...
  1431 00:814E: C9 04                 cmp #s_dword          ;range
  1432 00:8150: B0 F6                 bcs _0030010          ;out of range - error
  1433                        ;
  1434 00:8152: 20 10 8B              jsr facaddra          ;store assembly address
  1435                        ;
  1436                        ;
  1437                        ;	initialize workspace...
  1438                        ;
  1439 00:8155: A2 1F                 ldx #s_auxbuf-s_byte
  1440                        ;
  1441 00:8157: 9E 46 02     _0030030 stz auxbuf,x          ;clear addressing mode buffer
  1442 00:815A: CA                    dex
  Sat Jan 22 2022 12:11                                                                                                Page 27


  1443 00:815B: D0 FA                 bne _0030030
  1444                        ;
  1445 00:815D: A9 20                 lda #a_blank
  1446 00:815F: 8D 46 02              sta auxbuf            ;preamble placeholder
  1447 00:8162: 20 88 8A              jsr clroper           ;clear operand
  1448 00:8165: 9C 3C 00              stz auxbufix          ;reset addressing mode index
  1449 00:8168: 9C 4C 00              stz flimflag          ;clear forced long immediate
  1450 00:816B: 9C 46 00              stz mnepck            ;clear encoded...
  1451 00:816E: 9C 47 00              stz mnepck+s_byte     ;mnemonic workspace
  1452 00:8171: 9C 4F 00              stz vopsflag          ;clear 8/16 or relative flag
  1453                        ;
  1454                        ;
  1455                        ;	encode mnemonic...
  1456                        ;
  1457 00:8174: A0 03                 ldy #s_mnemon         ;expected mnemonic size
  1458                        ;
  1459 00:8176: 20 BF 8C     _0030040 jsr getcharw          ;get from buffer wo/whitespace
  1460 00:8179: D0 0A                 bne _0030060          ;gotten
  1461                        ;
  1462 00:817B: C0 03                 cpy #s_mnemon         ;any input at all?
  1463 00:817D: 90 03                 bcc _0030050          ;yes
  1464                        ;
  1465 00:817F: 4C FF 80              jmp monce             ;no, abort further assembly
  1466                        ;
  1467 00:8182: 4C 53 83     _0030050 jmp monasc10          ;incomplete mnemonic - error
  1468                        ;
  1469 00:8185: 38           _0030060 sec
  1470 00:8186: E9 3F                 sbc #a_mnecvt         ;ASCII to binary factor
  1471 00:8188: A2 05                 ldx #n_shfenc         ;shifts required to encode
  1472                        ;
  1473 00:818A: 4A           _0030070 lsr                   ;shift out a bit...
  1474 00:818B: 6E 47 00              ror mnepck+s_byte     ;into...
  1475 00:818E: 6E 46 00              ror mnepck            ;encoded mnemonic
  1476 00:8191: CA                    dex
  1477 00:8192: D0 F6                 bne _0030070          ;next bit
  1478                        ;
  1479 00:8194: 88                    dey
  1480 00:8195: D0 DF                 bne _0030040          ;get next char
  1481                        ;
  1482                        ;
  1483                        ;	test for copy instruction...
  1484                        ;	------------------------------------------------------------------------
  1485                        ;	The MVN & MVP instructions accept two operands & hence have an irregular
  1486                        ;	syntax.  Therefore, special handling is necessary to assemble either of
  1487                        ;	these instructions.
  1488                        ;
  1489                        ;	The official WDC syntax has the programmer entering a pair of 24 bit ad-
  1490                        ;	dresses as operands, with the assembler isolating bits 16-23 to	use as
  1491                        ;	operands.  This formality has been dispensed with in this monitor & the
  1492                        ;	operands are expected to be 8 bit bank values.
  1493                        ;	------------------------------------------------------------------------
  1494                        ;
  1495                                 slonga                 ;16 bit load
+ 1495 00:8197: C2 20                 .db $c2,$20
  1496 00:8199: AD 46 00              lda mnepck            ;packed menmonic
  1497 00:819C: A2 54                 ldx #opc_mvn          ;MVN opcode
  1498                                 cmpw mne_mvn          ;is it MVN?
  Sat Jan 22 2022 12:11                                                                                                Page 28


+ 1498 00:819E: C9 DC                 cmp #<mne_mvn
+ 1498 00:81A0: 7D                    .db >mne_mvn
  1499 00:81A1: F0 07                 beq monasc01          ;yes
  1500                        ;
  1501 00:81A3: A2 44                 ldx #opc_mvp          ;MVP opcode
  1502                                 cmpw mne_mvp          ;is it MVP?
+ 1502 00:81A5: C9 DC                 cmp #<mne_mvp
+ 1502 00:81A7: 8D                    .db >mne_mvp
  1503 00:81A8: D0 38                 bne monasc02          ;no
  1504                        ;
  1505                        ;
  1506                        ;	assemble copy instruction...
  1507                        ;
  1508 00:81AA: 8E 48 00     monasc01 stx opcode            ;store relevant opcode
  1509                                 shorta
+ 1509 00:81AD: E2 20                 .db $e2,$20
  1510 00:81AF: 20 AF 8B              jsr instdata          ;get instruction data
  1511 00:81B2: 8E 4B 00              stx eopsize           ;effective operand size
  1512 00:81B5: E8                    inx
  1513 00:81B6: 8E 44 00              stx instsize          ;instruction size
  1514 00:81B9: A2 01                 ldx #s_oper-s_word    ;operand index
  1515 00:81BB: 8E 4A 00              stx xrtemp            ;set it
  1516                        ;
  1517 00:81BE: 20 56 88     _0040010 jsr ascbin            ;evaluate bank number
  1518 00:81C1: B0 59                 bcs monasc04          ;conversion error
  1519                        ;
  1520 00:81C3: F0 57                 beq monasc04          ;nothing returned - error
  1521                        ;
  1522 00:81C5: 20 34 8B              jsr facasize          ;bank must be...
  1523 00:81C8: C9 02                 cmp #s_word           ;8 bits
  1524 00:81CA: B0 50                 bcs monasc04          ;it isn't - error
  1525                        ;
  1526 00:81CC: AD 25 00              lda faca              ;bank
  1527 00:81CF: AE 4A 00              ldx xrtemp            ;operand index
  1528 00:81D2: 9D 39 00              sta operand,x         ;store
  1529 00:81D5: CE 4A 00              dec xrtemp            ;index=index-1
  1530 00:81D8: 10 E4                 bpl _0040010          ;get destination bank
  1531                        ;
  1532 00:81DA: 20 55 8C              jsr getcharr          ;should be no more input
  1533 00:81DD: D0 3D                 bne monasc04          ;there is - error
  1534                        ;
  1535 00:81DF: 4C FD 82              jmp monasc08          ;finish MVN/MVP assembly
  1536                        ;
  1537                        ;
  1538                        ;	continue with normal assembly...
  1539                        ;
  1540                        monasc02 shorta                ;back to 8 bits
+ 1540 00:81E2: E2 20                 .db $e2,$20
  1541                        ;
  1542 00:81E4: 20 BF 8C     monasc03 jsr getcharw          ;get next char
  1543 00:81E7: F0 43                 beq monasc06          ;EOI, no argument
  1544                        ;
  1545 00:81E9: C9 21                 cmp #amp_flim
  1546 00:81EB: D0 0C                 bne _0050010          ;no forced long immediate
  1547                        ;
  1548 00:81ED: AD 4C 00              lda flimflag          ;FLIM already set?
  1549 00:81F0: D0 2A                 bne monasc04          ;yes - error
  Sat Jan 22 2022 12:11                                                                                                Page 29


  1550                        ;
  1551 00:81F2: A9 C0                 lda #flimmask
  1552 00:81F4: 8D 4C 00              sta flimflag          ;set flag &...
  1553 00:81F7: 80 EB                 bra monasc03          ;get next char
  1554                        ;
  1555 00:81F9: C9 23        _0050010 cmp #amp_imm          ;immediate mode?
  1556 00:81FB: F0 08                 beq _0050020          ;yes
  1557                        ;
  1558 00:81FD: C9 28                 cmp #amp_ind          ;indirect mode?
  1559 00:81FF: F0 04                 beq _0050020          ;yes
  1560                        ;
  1561 00:8201: C9 5B                 cmp #amp_indl         ;indirect long mode?
  1562 00:8203: D0 08                 bne _0050030          ;no
  1563                        ;
  1564 00:8205: 8D 46 02     _0050020 sta auxbuf            ;set addressing mode preamble
  1565 00:8208: EE 3C 00              inc auxbufix          ;bump aux buffer index &...
  1566 00:820B: 80 03                 bra _0050040          ;evaluate operand
  1567                        ;
  1568 00:820D: CE 3D 00     _0050030 dec ibufidx           ;position back to char
  1569                        ;
  1570 00:8210: 20 56 88     _0050040 jsr ascbin            ;evaluate operand
  1571 00:8213: D0 0A                 bne monasc05          ;evaluated
  1572                        ;
  1573 00:8215: B0 05                 bcs monasc04          ;conversion error
  1574                        ;
  1575 00:8217: AD 3C 00              lda auxbufix          ;no operand...any preamble?
  1576 00:821A: F0 10                 beq monasc06          ;no, syntax is okay so far
  1577                        ;
  1578 00:821C: 4C 53 83     monasc04 jmp monasc10          ;abort w/error
  1579                        ;
  1580 00:821F: 20 34 8B     monasc05 jsr facasize          ;size operand
  1581 00:8222: C9 04                 cmp #s_dword          ;max is 24 bits
  1582 00:8224: B0 F6                 bcs monasc04          ;too big
  1583                        ;
  1584 00:8226: 8D 4B 00              sta eopsize           ;save operand size
  1585 00:8229: 20 28 8B              jsr facaoper          ;store operand
  1586                        ;
  1587 00:822C: CE 3D 00     monasc06 dec ibufidx           ;back to last char
  1588 00:822F: AE 3C 00              ldx auxbufix          ;mode buffer index
  1589 00:8232: D0 01                 bne _0060010          ;preamble in buffer
  1590                        ;
  1591 00:8234: E8                    inx                   ;step past preamble position
  1592                        ;
  1593 00:8235: 20 29 8D     _0060010 jsr getcharc          ;get a char w/forced UC
  1594 00:8238: F0 0A                 beq _0060030          ;EOI
  1595                        ;
  1596 00:823A: E0 20                 cpx #s_auxbuf         ;mode buffer full?
  1597 00:823C: B0 DE                 bcs monasc04          ;yes, too much input
  1598                        ;
  1599 00:823E: 9D 46 02     _0060020 sta auxbuf,x          ;store for comparison
  1600 00:8241: E8                    inx
  1601 00:8242: D0 F1                 bne _0060010
  1602                        ;
  1603                        ;
  1604                        ;	evaluate mnemonic...
  1605                        ;
  1606 00:8244: A2 5B        _0060030 ldx #n_mnemon-1       ;starting mnemonic index
  Sat Jan 22 2022 12:11                                                                                                Page 30


  1607                        ;
  1608 00:8246: 8A           monasc07 txa                   ;convert index...
  1609 00:8247: 0A                    asl                   ;to offset
  1610 00:8248: A8                    tay                   ;now mnemonic table index
  1611                                 slonga                 ;16 bit compare
+ 1611 00:8249: C2 20                 .db $c2,$20
  1612 00:824B: B9 36 8E              lda mnetab,y          ;get mnemonic from table
  1613 00:824E: CD 46 00              cmp mnepck            ;compare to entered mnemonic
  1614                                 shorta                ;back to 8 bits
+ 1614 00:8251: E2 20                 .db $e2,$20
  1615 00:8253: F0 05                 beq _0070020          ;match
  1616                        ;
  1617 00:8255: CA           _0070010 dex                   ;try next mnemonic
  1618 00:8256: 30 C4                 bmi monasc04          ;unknown mnemonic - error
  1619                        ;
  1620 00:8258: 80 EC                 bra monasc07          ;keep going
  1621                        ;
  1622 00:825A: 8E 46 00     _0070020 stx mnepck            ;save mnemonic index
  1623 00:825D: 8A                    txa
  1624 00:825E: A2 00                 ldx #0                ;trial opcode
  1625                        ;
  1626 00:8260: DD EE 8E     _0070030 cmp mnetabix,x        ;search index table...
  1627 00:8263: F0 05                 beq _0070050          ;for a match
  1628                        ;
  1629 00:8265: E8           _0070040 inx                   ;keep going until we...
  1630 00:8266: D0 F8                 bne _0070030          ;search entire table
  1631                        ;
  1632 00:8268: 80 B2                 bra monasc04          ;this shouldn't happen!
  1633                        ;
  1634                        ;	---------------------------------------------------------------------
  1635                        ;	If the mnemonic index table search fails then there is a coding error
  1636                        ;	somewhere, as every entry in the mnemonic table is supposed to have a
  1637                        ;	matching cardinal index.
  1638                        ;	---------------------------------------------------------------------
  1639                        ;
  1640                        ;
  1641                        ;	evaluate addressing mode...
  1642                        ;
  1643 00:826A: 8E 48 00     _0070050 stx opcode            ;save trial opcode
  1644 00:826D: 20 AF 8B              jsr instdata          ;get related instruction data
  1645 00:8270: 8D 4F 00              sta vopsflag          ;save 8/16 or relative flag
  1646 00:8273: 8E 4D 00              stx iopsize           ;operand size
  1647 00:8276: E8                    inx
  1648 00:8277: 8E 44 00              stx instsize          ;instruction size
  1649 00:827A: AE 48 00              ldx opcode            ;recover trial opcode
  1650 00:827D: 98                    tya                   ;addressing mode
  1651 00:827E: 0A                    asl                   ;create table index
  1652 00:827F: A8                    tay
  1653                                 slonga
+ 1653 00:8280: C2 20                 .db $c2,$20
  1654 00:8282: B9 F2 90              lda ms_lutab,y        ;mode lookup table
  1655 00:8285: 8D 22 00              sta addrb             ;set pointer
  1656                                 shorta
+ 1656 00:8288: E2 20                 .db $e2,$20
  1657 00:828A: A0 00                 ldy #0
  1658                        ;
  1659 00:828C: B1 22        _0070060 lda (addrb),y         ;table addressing mode
  Sat Jan 22 2022 12:11                                                                                                Page 31


  1660 00:828E: D9 46 02              cmp auxbuf,y          ;entered addressing mode
  1661 00:8291: F0 05                 beq _0070080          ;okay so far
  1662                        ;
  1663 00:8293: AD 46 00     _0070070 lda mnepck            ;reload mnemonic index
  1664 00:8296: 80 CD                 bra _0070040          ;wrong opcode for addresing mode
  1665                        ;
  1666 00:8298: 09 00        _0070080 ora #0                ;last char the terminator?
  1667 00:829A: F0 03                 beq _0070090          ;yes, evaluate operand
  1668                        ;
  1669 00:829C: C8                    iny
  1670 00:829D: 80 ED                 bra _0070060          ;keep testing
  1671                        ;
  1672                        ;
  1673                        ;	evaluate operand...
  1674                        ;
  1675 00:829F: AD 4B 00     _0070090 lda eopsize           ;entered operand size
  1676 00:82A2: D0 07                 bne _0070100          ;non-zero
  1677                        ;
  1678 00:82A4: 0D 4D 00              ora iopsize           ;instruction operand size
  1679 00:82A7: D0 EA                 bne _0070070          ;wrong opcode - keep trying
  1680                        ;
  1681 00:82A9: 80 52                 bra monasc08          ;assemble instruction
  1682                        ;
  1683 00:82AB: 2C 4F 00     _0070100 bit vopsflag          ;is this a branch?
  1684 00:82AE: 70 45                 bvs _0070160          ;yes, evaluate
  1685                        ;
  1686 00:82B0: AD 4D 00              lda iopsize           ;instruction operand size
  1687 00:82B3: 2C 4F 00              bit vopsflag          ;variable size operand allowed?
  1688 00:82B6: 30 19                 bmi _0070130          ;yes
  1689                        ;
  1690 00:82B8: 2C 4C 00              bit flimflag          ;was forced immediate set?
  1691 00:82BB: 10 03                 bpl _0070110          ;no
  1692                        ;
  1693 00:82BD: 4C 53 83              jmp monasc10          ;yes - error
  1694                        ;
  1695 00:82C0: CD 4B 00     _0070110 cmp eopsize           ;entered operand size
  1696 00:82C3: 90 CE                 bcc _0070070          ;operand too big
  1697                        ;
  1698 00:82C5: 8D 4B 00              sta eopsize           ;new operand size
  1699 00:82C8: 80 33                 bra monasc08          ;assemble, otherwise...
  1700                        ;
  1701 00:82CA: CD 4B 00     _0070120 cmp eopsize           ;exact size match required
  1702 00:82CD: D0 C4                 bne _0070070          ;mismatch - wrong opcode
  1703                        ;
  1704 00:82CF: 80 2C                 bra monasc08          ;assemble
  1705                        ;
  1706                        ;
  1707                        ;	process variable size immediate mode operand...
  1708                        ;
  1709 00:82D1: AE 4B 00     _0070130 ldx eopsize           ;entered operand size
  1710 00:82D4: E0 03                 cpx #s_xword          ;check size
  1711 00:82D6: B0 7B                 bcs monasc10          ;too big - error
  1712                        ;
  1713 00:82D8: 2C 4C 00              bit flimflag          ;forced long immediate?
  1714 00:82DB: 10 07                 bpl _0070140          ;no
  1715                        ;
  1716 00:82DD: A2 02                 ldx #s_word           ;promote operand size to...
  Sat Jan 22 2022 12:11                                                                                                Page 32


  1717 00:82DF: 8E 4B 00              stx eopsize           ;16 bits
  1718 00:82E2: 80 09                 bra _0070150
  1719                        ;
  1720 00:82E4: E0 02        _0070140 cpx #s_word           ;16 bits?
  1721 00:82E6: D0 05                 bne _0070150          ;no
  1722                        ;
  1723 00:82E8: A0 C0                 ldy #flimmask         ;yes so force long...
  1724 00:82EA: 8C 4C 00              sty flimflag          ;immediate disassembly
  1725                        ;
  1726 00:82ED: 1A           _0070150 ina                   ;new instruction operand size
  1727 00:82EE: CD 4B 00              cmp eopsize           ;compare against operand size
  1728 00:82F1: 90 A0                 bcc _0070070          ;mismatch - can't assemble
  1729                        ;
  1730 00:82F3: 80 08                 bra monasc08          ;okay, assemble
  1731                        ;
  1732                        ;
  1733                        ;	process relative branch...
  1734                        ;
  1735 00:82F5: 20 05 8C     _0070160 jsr targoff           ;compute branch offset
  1736 00:82F8: B0 59                 bcs monasc10          ;branch out of range
  1737                        ;
  1738 00:82FA: 8D 4B 00              sta eopsize           ;effective operand size
  1739                        ;
  1740                        ;
  1741                        ;	assemble instruction...
  1742                        ;
  1743 00:82FD: AD 48 00     monasc08 lda opcode            ;opcode
  1744                                 stail addra           ;store at assembly address
+ 1744 00:8300: 87 1F                 .db $87,addra
  1745 00:8302: AE 4B 00              ldx eopsize           ;any operand to process?
  1746 00:8305: F0 0A                 beq _0080020          ;no
  1747                        ;
  1748 00:8307: 9B                    txy                   ;also storage offset
  1749                        ;
  1750 00:8308: CA           _0080010 dex
  1751 00:8309: BD 39 00              lda operand,x         ;get operand byte &...
  1752                                 staily addra          ;poke into memory
+ 1752 00:830C: 97 1F                 .db $97,addra
  1753 00:830E: 88                    dey
  1754 00:830F: D0 F7                 bne _0080010          ;next
  1755                        ;
  1756 00:8311: A9 0D        _0080020 lda #a_cr
  1757 00:8313: 20 71 FF              jsr putcha            ;return to left margin
  1758 00:8316: A9 41                 lda #asmprfx          ;assembly prefix
  1759 00:8318: 20 7F 86              jsr dpycodaa          ;disassemble & display
  1760                        ;
  1761                        ;
  1762                        ;	prompt for next instruction...
  1763                        ;
  1764 00:831B: A9 20        monasc09 lda #a_blank
  1765 00:831D: A2 08                 ldx #ascprmct-1
  1766                        ;
  1767 00:831F: 9D 00 02     _0090010 sta ibuffer,x         ;prepare buffer for...
  1768 00:8322: CA                    dex                   ;next instruction
  1769 00:8323: 10 FA                 bpl _0090010
  1770                        ;
  1771 00:8325: A9 41                 lda #asmprfx          ;assemble code...
  Sat Jan 22 2022 12:11                                                                                                Page 33


  1772 00:8327: 8D 00 02              sta ibuffer           ;prompt prefix
  1773 00:832A: AD 21 00              lda addra+s_word      ;next instruction address bank
  1774 00:832D: 20 DE 89              jsr binhex            ;convert to ASCII
  1775 00:8330: 8D 02 02              sta ibuffer+apadrbkh  ;store MSN in buffer
  1776 00:8333: 8E 03 02              stx ibuffer+apadrbkl  ;store LSN in buffer
  1777 00:8336: AD 20 00              lda addra+s_byte      ;next instruction address MSB
  1778 00:8339: 20 DE 89              jsr binhex
  1779 00:833C: 8D 04 02              sta ibuffer+apadrmbh
  1780 00:833F: 8E 05 02              stx ibuffer+apadrmbl
  1781 00:8342: AD 1F 00              lda addra             ;next instruction address LSB
  1782 00:8345: 20 DE 89              jsr binhex
  1783 00:8348: 8D 06 02              sta ibuffer+apadrlbh
  1784 00:834B: 8E 07 02              stx ibuffer+apadrlbl
  1785 00:834E: A9 09                 lda #ascprmct         ;effective input count
  1786 00:8350: 4C 03 81              jmp moncea            ;reenter input loop
  1787                        ;
  1788                        ;
  1789                        ;	process assembly error...
  1790                        ;
  1791 00:8353: 20 E8 87     monasc10 jsr dpyerr            ;indicate error &...
  1792 00:8356: 80 C3                 bra monasc09          ;prompt w/same assembly address
  1793                        ;
  1794                        ;================================================================================
  1795                        ;
  1796                        ;mondsc: DISASSEMBLE CODE
  1797                        ;
  1798                        ;	-----------------------------
  1799                        ;	syntax: D [<addr1> [<addr2>]]
  1800                        ;	-----------------------------
  1801                        ;
  1802 00:8358: B0 12        mondsc   bcs _0100010          ;no parameters
  1803                        ;
  1804 00:835A: 9C 4C 00              stz flimflag          ;reset to 8 bit mode
  1805 00:835D: 20 34 8B              jsr facasize          ;check starting...
  1806 00:8360: C9 04                 cmp #s_dword          ;address
  1807 00:8362: B0 4A                 bcs _0100050          ;out of range - error
  1808                        ;
  1809 00:8364: 20 10 8B              jsr facaddra          ;copy starting address
  1810 00:8367: 20 46 8B              jsr getparm           ;get ending address
  1811 00:836A: 90 1B                 bcc _0100020          ;gotten
  1812                        ;
  1813 00:836C: 20 F1 89     _0100010 jsr clrfaca           ;clear accumulator
  1814                                 slonga
+ 1814 00:836F: C2 20                 .db $c2,$20
  1815 00:8371: 18                    clc
  1816 00:8372: AD 1F 00              lda addra             ;starting address
  1817                                 adcw n_dbytes         ;default bytes
+ 1817 00:8375: 69 15                 adc #<n_dbytes
+ 1817 00:8377: 00                    .db >n_dbytes
  1818 00:8378: 8D 25 00              sta faca              ;effective ending address
  1819                                 shorta
+ 1819 00:837B: E2 20                 .db $e2,$20
  1820 00:837D: AD 21 00              lda addra+s_word      ;starting bank
  1821 00:8380: 69 00                 adc #0
  1822 00:8382: 8D 27 00              sta faca+s_word       ;effective ending bank
  1823 00:8385: B0 27                 bcs _0100050          ;end address > $FFFFFF
  1824                        ;
  Sat Jan 22 2022 12:11                                                                                                Page 34


  1825 00:8387: 20 34 8B     _0100020 jsr facasize          ;check ending...
  1826 00:838A: C9 04                 cmp #s_dword          ;address
  1827 00:838C: B0 20                 bcs _0100050          ;out of range - error
  1828                        ;
  1829 00:838E: 20 1C 8B              jsr facaddrb          ;set ending address
  1830 00:8391: 20 46 8B              jsr getparm           ;check for excess input
  1831 00:8394: 90 18                 bcc _0100050          ;present - error
  1832                        ;
  1833 00:8396: 20 6D 8A              jsr calccnt           ;calculate bytes
  1834 00:8399: 90 13                 bcc _0100050          ;end < start
  1835                        ;
  1836 00:839B: 20 39 8D     _0100030 jsr teststop          ;test for display stop
  1837 00:839E: B0 0B                 bcs _0100040          ;stopped
  1838                        ;
  1839 00:83A0: 20 28 88              jsr newline           ;next line
  1840 00:83A3: 20 7D 86              jsr dpycod            ;disassemble & display
  1841 00:83A6: 20 BF 8A              jsr decdcnt           ;decrement byte count
  1842 00:83A9: 90 F0                 bcc _0100030          ;not done
  1843                        ;
  1844 00:83AB: 4C FF 80     _0100040 jmp monce             ;back to main loop
  1845                        ;
  1846 00:83AE: 4C 3F 81     _0100050 jmp monerr            ;address range error
  1847                        ;
  1848                        ;================================================================================
  1849                        ;
  1850                        ;monjmp: EXECUTE CODE
  1851                        ;
  1852                        ;	-------------------------------------------------------------
  1853                        ;	syntax: G [<dp>]
  1854                        ;
  1855                        ;	If no address is specified, the current values in the PB & PC
  1856                        ;	shadow registers are used.
  1857                        ;	-------------------------------------------------------------
  1858                        ;
  1859 00:83B1: 20 EA 8B     monjmp   jsr setxaddr          ;set execution address
  1860 00:83B4: B0 32                 bcs monjmpab          ;out of range - error
  1861                        ;
  1862 00:83B6: 20 46 8B              jsr getparm           ;check for excess input
  1863 00:83B9: 90 2D                 bcc monjmpab          ;too much input - error
  1864                        ;
  1865                                 slonga                 ;16 bit .A
+ 1865 00:83BB: C2 20                 .db $c2,$20
  1866 00:83BD: AD 1A 00              lda reg_spx
  1867 00:83C0: 1B                    tcs                   ;restore SP
  1868                        ;
  1869                        monjmpaa shorta
+ 1869 00:83C1: E2 20                 .db $e2,$20
  1870 00:83C3: AD 10 00              lda reg_pbx
  1871 00:83C6: 48                    pha                   ;restore PB
  1872                                 slonga
+ 1872 00:83C7: C2 20                 .db $c2,$20
  1873 00:83C9: AD 11 00              lda reg_pcx
  1874 00:83CC: 48                    pha                   ;restore PC
  1875                                 shorta
+ 1875 00:83CD: E2 20                 .db $e2,$20
  1876 00:83CF: AD 13 00              lda reg_srx
  1877 00:83D2: 48                    pha                   ;restore SR
  Sat Jan 22 2022 12:11                                                                                                Page 35


  1878 00:83D3: AD 1E 00              lda reg_dbx
  1879 00:83D6: 48                    pha
  1880 00:83D7: AB                    plb                   ;restore DB
  1881                                 longr
+ 1881 00:83D8: C2 30                 .db $c2,$30
  1882 00:83DA: AD 1C 00              lda reg_dpx
  1883 00:83DD: 5B                    tcd                   ;restore DP
  1884 00:83DE: AD 14 00              lda reg_ax            ;restore .C
  1885 00:83E1: AE 16 00              ldx reg_xx            ;restore .X
  1886 00:83E4: AC 18 00              ldy reg_yx            ;restore .Y
  1887 00:83E7: 40                    rti                   ;execute code
  1888                        ;
  1889 00:83E8: 4C 3F 81     monjmpab jmp monerr            ;error
  1890                        ;
  1891                        ;================================================================================
  1892                        ;
  1893                        ;monjsr: EXECUTE CODE AS SUBROUTINE
  1894                        ;
  1895                        ;	------------------------------------------------------------
  1896                        ;	syntax: J [<dp>]
  1897                        ;
  1898                        ;	If no address is specified the current values in the PB & PC
  1899                        ;	shadow registers are used.   An RTS at the end of the called
  1900                        ;	subroutine will return control to the monitor  provided  the
  1901                        ;	stack remains in balance.
  1902                        ;	------------------------------------------------------------
  1903                        ;
  1904 00:83EB: 20 EA 8B     monjsr   jsr setxaddr          ;set execution address
  1905 00:83EE: B0 F8                 bcs monjmpab          ;out of range - error
  1906                        ;
  1907 00:83F0: 20 46 8B              jsr getparm           ;check for excess input
  1908 00:83F3: 90 F3                 bcc monjmpab          ;too much input - error
  1909                        ;
  1910                                 slonga
+ 1910 00:83F5: C2 20                 .db $c2,$20
  1911 00:83F7: AD 1A 00              lda reg_spx
  1912 00:83FA: 1B                    tcs                   ;restore SP &...
  1913 00:83FB: 20 C1 83              jsr monjmpaa          ;call subroutine
  1914 00:83FE: 08                    php                   ;push SR
  1915                                 longr
+ 1915 00:83FF: C2 30                 .db $c2,$30
  1916 00:8401: 8D 14 00              sta reg_ax            ;save...
  1917 00:8404: 8E 16 00              stx reg_xx            ;register...
  1918 00:8407: 8C 18 00              sty reg_yx            ;returns
  1919                                 shortx                ;8 bit .X & .Y
+ 1919 00:840A: E2 10                 .db $e2,$10
  1920 00:840C: FA                    plx                   ;get & save...
  1921 00:840D: 8E 13 00              stx reg_srx           ;return SR
  1922 00:8410: 3B                    tsc                   ;get & save...
  1923 00:8411: 8D 1A 00              sta reg_spx           ;return SP
  1924 00:8414: 7B                    tdc                   ;get & save...
  1925 00:8415: 8D 1C 00              sta reg_dpx           ;DP pointer
  1926                                 shorta                ;8 bit .A
+ 1926 00:8418: E2 20                 .db $e2,$20
  1927 00:841A: 4B                    phk                   ;get &...
  1928 00:841B: 68                    pla                   ;save...
  1929 00:841C: 8D 10 00              sta reg_pbx           ;return PB
  Sat Jan 22 2022 12:11                                                                                                Page 36


  1930 00:841F: 8B                    phb                   ;get &...
  1931 00:8420: 68                    pla                   ;save...
  1932 00:8421: 8D 1E 00              sta reg_dbx           ;return DB
  1933 00:8424: F4 AC 91              pea mm_rts            ;"*RET"
  1934 00:8427: 4C 94 80              jmp moncom            ;return to monitor
  1935                        ;
  1936                        ;================================================================================
  1937                        ;
  1938                        ;monchm: CHANGE and/or DUMP MEMORY
  1939                        ;
  1940                        ;	--------------------------------------------
  1941                        ;	syntax: > [<addr> <operand> [<operand>]...]
  1942                        ;
  1943                        ;	> <addr> without operands will dump 16 bytes
  1944                        ;	of memory, starting at <addr>.
  1945                        ;	--------------------------------------------
  1946                        ;
  1947 00:842A: B0 23        monchm   bcs _0110030          ;no address given - quit
  1948                        ;
  1949 00:842C: 20 34 8B              jsr facasize          ;size address
  1950 00:842F: C9 04                 cmp #s_dword
  1951 00:8431: B0 1F                 bcs _0110040          ;address out of range - error
  1952                        ;
  1953 00:8433: 20 10 8B              jsr facaddra          ;set starting address
  1954 00:8436: 20 6C 8C              jsr getpat            ;evaluate change pattern
  1955 00:8439: 90 04                 bcc _0110010          ;entered
  1956                        ;
  1957 00:843B: 10 0C                 bpl _0110020          ;not entered
  1958                        ;
  1959 00:843D: 80 13                 bra _0110040          ;evaluation error
  1960                        ;
  1961 00:843F: 88           _0110010 dey                   ;next byte
  1962 00:8440: 30 07                 bmi _0110020          ;done
  1963                        ;
  1964 00:8442: B9 46 02              lda auxbuf,y          ;write pattern...
  1965                                 staily addra          ;to memory
+ 1965 00:8445: 97 1F                 .db $97,addra
  1966 00:8447: 80 F6                 bra _0110010          ;next
  1967                        ;
  1968 00:8449: 20 28 88     _0110020 jsr newline           ;next line
  1969 00:844C: 20 B2 87              jsr dpymem            ;regurgitate changes
  1970                        ;
  1971 00:844F: 4C FF 80     _0110030 jmp monce             ;back to command loop
  1972                        ;
  1973 00:8452: 4C 3F 81     _0110040 jmp monerr            ;goto error handler
  1974                        ;
  1975                        ;================================================================================
  1976                        ;
  1977                        ;moncmp: COMPARE MEMORY
  1978                        ;
  1979                        ;	-----------------------------
  1980                        ;	syntax: C <start> <end> <ref>
  1981                        ;	-----------------------------
  1982                        ;
  1983 00:8455: B0 29        moncmp   bcs _0120030          ;start not given - quit
  1984                        ;
  1985 00:8457: 20 EA 8A              jsr enddest           ;get end & reference addresses
  Sat Jan 22 2022 12:11                                                                                                Page 37


  1986 00:845A: B0 27                 bcs _0120040          ;range or other error
  1987                        ;
  1988 00:845C: 9C 4A 00              stz xrtemp            ;column counter
  1989                        ;
  1990 00:845F: 20 39 8D     _0120010 jsr teststop          ;check for stop
  1991 00:8462: B0 1C                 bcs _0120030          ;abort
  1992                        ;
  1993                                 ldail addra           ;get from reference location
+ 1993 00:8464: A7 1F                 .db $a7,addra
  1994                                 cmpil operand         ;test against compare location
+ 1994 00:8466: C7 39                 .db $c7,operand
  1995 00:8468: F0 03                 beq _0120020          ;match, don't display address
  1996                        ;
  1997 00:846A: 20 63 86              jsr dpycaddr          ;display current location
  1998                        ;
  1999 00:846D: 20 71 8B     _0120020 jsr nxtaddra          ;next reference location
  2000 00:8470: B0 0E                 bcs _0120030          ;done
  2001                        ;
  2002                                 slonga
+ 2002 00:8472: C2 20                 .db $c2,$20
  2003 00:8474: EE 39 00              inc operand           ;bump bits 0-15
  2004                                 shorta
+ 2004 00:8477: E2 20                 .db $e2,$20
  2005 00:8479: D0 E4                 bne _0120010
  2006                        ;
  2007 00:847B: EE 3B 00              inc operand+s_word    ;bump bits 16-23
  2008 00:847E: 80 DF                 bra _0120010
  2009                        ;
  2010 00:8480: 4C FF 80     _0120030 jmp monce             ;return to command exec
  2011                        ;
  2012 00:8483: 4C 3F 81     _0120040 jmp monerr            ;goto error handler
  2013                        ;
  2014                        ;================================================================================
  2015                        ;
  2016                        ;moncpy: COPY (transfer) MEMORY
  2017                        ;
  2018                        ;	--------------------------------
  2019                        ;	syntax: T <start> <end> <target>
  2020                        ;	--------------------------------
  2021                        ;
  2022 00:8486: B0 55        moncpy   bcs _0130040          ;start not given - quit
  2023                        ;
  2024 00:8488: 20 EA 8A              jsr enddest           ;get end & target addresses
  2025 00:848B: B0 53                 bcs _0130050          ;range or other error
  2026                        ;
  2027                                 slonga
+ 2027 00:848D: C2 20                 .db $c2,$20
  2028 00:848F: 38                    sec
  2029 00:8490: AD 22 00              lda addrb             ;ending address
  2030 00:8493: ED 1F 00              sbc addra             ;starting address
  2031 00:8496: 90 48                 bcc _0130050          ;start > end - error
  2032                        ;
  2033 00:8498: 8D 2D 00              sta facb              ;bytes to copy
  2034                                 shorta
+ 2034 00:849B: E2 20                 .db $e2,$20
  2035                                 longx
+ 2035 00:849D: C2 10                 .db $c2,$10
  Sat Jan 22 2022 12:11                                                                                                Page 38


  2036 00:849F: AD 3B 00              lda operand+s_word    ;target bank
  2037 00:84A2: AC 39 00              ldy operand           ;target address
  2038 00:84A5: CD 21 00              cmp addra+s_word      ;source bank
  2039                                 slonga
+ 2039 00:84A8: C2 20                 .db $c2,$20
  2040 00:84AA: D0 20                 bne _0130020          ;can use forward copy
  2041                        ;
  2042 00:84AC: CC 1F 00              cpy addra             ;source address
  2043 00:84AF: 90 1B                 bcc _0130020          ;can use forward copy
  2044                        ;
  2045 00:84B1: D0 02                 bne _0130010          ;must use reverse copy
  2046                        ;
  2047 00:84B3: 80 2B                 bra _0130050          ;copy in place - error
  2048                        ;
  2049 00:84B5: AD 2D 00     _0130010 lda facb              ;get bytes to copy
  2050 00:84B8: 48                    pha                   ;protect
  2051 00:84B9: 20 1F 8D              jsr lodbnk            ;load banks
  2052 00:84BC: 20 9D 8A              jsr cprvsup           ;do reverse copy setup
  2053 00:84BF: 68                    pla                   ;get bytes to copy
  2054 00:84C0: AA                    tax                   ;save a copy
  2055 00:84C1: 18                    clc
  2056 00:84C2: 6D 39 00              adc operand           ;change target to...
  2057 00:84C5: A8                    tay                   ;target end
  2058 00:84C6: 8A                    txa                   ;recover bytes to copy
  2059 00:84C7: AE 22 00              ldx addrb             ;source end
  2060 00:84CA: 80 0E                 bra _0130030
  2061                        ;
  2062 00:84CC: AD 2D 00     _0130020 lda facb              ;get bytes to copy
  2063 00:84CF: 48                    pha                   ;protect
  2064 00:84D0: 20 1F 8D              jsr lodbnk            ;load banks
  2065 00:84D3: 20 96 8A              jsr cpfwsup           ;do forward copy setup
  2066 00:84D6: 68                    pla                   ;get bytes to copy
  2067 00:84D7: AE 1F 00              ldx addra             ;source start
  2068                        ;
  2069 00:84DA: 4C 25 00     _0130030 jmp mcftwork          ;copy memory
  2070                        ;
  2071 00:84DD: 4C FF 80     _0130040 jmp monce             ;back to executive
  2072                        ;
  2073 00:84E0: 4C 3F 81     _0130050 jmp monerr            ;error
  2074                        ;
  2075                        ;================================================================================
  2076                        ;
  2077                        ;mondmp: DISPLAY MEMORY RANGE
  2078                        ;
  2079                        ;	-----------------------------
  2080                        ;	syntax: M [<addr1> [<addr2>]]
  2081                        ;	-----------------------------
  2082                        ;
  2083 00:84E3: B0 0F        mondmp   bcs _0140010          ;no parameters
  2084                        ;
  2085 00:84E5: 20 34 8B              jsr facasize          ;check address...
  2086 00:84E8: C9 04                 cmp #s_dword          ;range
  2087 00:84EA: B0 4A                 bcs _0140050          ;address out of range
  2088                        ;
  2089 00:84EC: 20 10 8B              jsr facaddra          ;copy starting address
  2090 00:84EF: 20 46 8B              jsr getparm           ;get ending address
  2091 00:84F2: 90 1B                 bcc _0140020          ;gotten
  Sat Jan 22 2022 12:11                                                                                                Page 39


  2092                        ;
  2093 00:84F4: 20 F1 89     _0140010 jsr clrfaca           ;clear accumulator
  2094                                 slonga
+ 2094 00:84F7: C2 20                 .db $c2,$20
  2095 00:84F9: 18                    clc
  2096 00:84FA: AD 1F 00              lda addra             ;starting address
  2097                                 adcw n_mbytes         ;default bytes
+ 2097 00:84FD: 69 FF                 adc #<n_mbytes
+ 2097 00:84FF: 00                    .db >n_mbytes
  2098 00:8500: 8D 25 00              sta faca              ;effective ending address
  2099                                 shorta
+ 2099 00:8503: E2 20                 .db $e2,$20
  2100 00:8505: AD 21 00              lda addra+s_word      ;starting bank
  2101 00:8508: 69 00                 adc #0
  2102 00:850A: 8D 27 00              sta faca+s_word       ;effective ending bank
  2103 00:850D: B0 27                 bcs _0140050          ;end address > $FFFFFF
  2104                        ;
  2105 00:850F: 20 34 8B     _0140020 jsr facasize          ;check ending address...
  2106 00:8512: C9 04                 cmp #s_dword          ;range
  2107 00:8514: B0 20                 bcs _0140050          ;out of range - error
  2108                        ;
  2109 00:8516: 20 1C 8B              jsr facaddrb          ;copy ending address
  2110 00:8519: 20 46 8B              jsr getparm           ;check for excess input
  2111 00:851C: 90 18                 bcc _0140050          ;error
  2112                        ;
  2113 00:851E: 20 6D 8A              jsr calccnt           ;calculate bytes to dump
  2114 00:8521: 90 13                 bcc _0140050          ;end < start
  2115                        ;
  2116 00:8523: 20 39 8D     _0140030 jsr teststop          ;test for display stop
  2117 00:8526: B0 0B                 bcs _0140040          ;stopped
  2118                        ;
  2119 00:8528: 20 28 88              jsr newline           ;next line
  2120 00:852B: 20 B2 87              jsr dpymem            ;display
  2121 00:852E: 20 BF 8A              jsr decdcnt           ;decrement byte count
  2122 00:8531: 90 F0                 bcc _0140030          ;not done
  2123                        ;
  2124 00:8533: 4C FF 80     _0140040 jmp monce             ;back to main loop
  2125                        ;
  2126 00:8536: 4C 3F 81     _0140050 jmp monerr            ;address range error
  2127                        ;
  2128                        ;================================================================================
  2129                        ;
  2130                        ;monfil: FILL MEMORY
  2131                        ;
  2132                        ;	-----------------------------------------
  2133                        ;	syntax: F <start> <end> <fill>
  2134                        ;
  2135                        ;	<start> & <end> must be in the same bank.
  2136                        ;	-----------------------------------------
  2137                        ;
  2138 00:8539: B0 68        monfil   bcs _0150010          ;start not given - quit
  2139                        ;
  2140 00:853B: 20 34 8B              jsr facasize          ;check size
  2141 00:853E: C9 04                 cmp #s_dword
  2142 00:8540: B0 64                 bcs _0150020          ;out of range - error...
  2143                        ;
  2144 00:8542: 20 10 8B              jsr facaddra          ;store start
  Sat Jan 22 2022 12:11                                                                                                Page 40


  2145 00:8545: 20 46 8B              jsr getparm           ;evaluate end
  2146 00:8548: B0 5C                 bcs _0150020          ;not entered - error
  2147                        ;
  2148 00:854A: 20 34 8B              jsr facasize          ;check size
  2149 00:854D: C9 04                 cmp #s_dword
  2150 00:854F: B0 55                 bcs _0150020          ;out of range - error
  2151                        ;
  2152 00:8551: AD 27 00              lda faca+s_word       ;end bank
  2153 00:8554: CD 21 00              cmp addra+s_word      ;start bank
  2154 00:8557: D0 4D                 bne _0150020          ;not same - error
  2155                        ;
  2156 00:8559: 20 1C 8B              jsr facaddrb          ;store <end>
  2157                                 slonga
+ 2157 00:855C: C2 20                 .db $c2,$20
  2158 00:855E: 38                    sec
  2159 00:855F: AD 22 00              lda addrb             ;ending address
  2160 00:8562: ED 1F 00              sbc addra             ;starting address
  2161 00:8565: 90 3F                 bcc _0150020          ;start > end - error
  2162                        ;
  2163 00:8567: 8D 2D 00              sta facb              ;bytes to copy
  2164                                 shorta
+ 2164 00:856A: E2 20                 .db $e2,$20
  2165 00:856C: 20 46 8B              jsr getparm           ;evaluate <fill>
  2166 00:856F: B0 35                 bcs _0150020          ;not entered - error
  2167                        ;
  2168 00:8571: 20 34 8B              jsr facasize          ;<fill> should be...
  2169 00:8574: C9 02                 cmp #s_word           ;8 bits
  2170 00:8576: B0 2E                 bcs _0150020          ;it isn't - error
  2171                        ;
  2172 00:8578: 20 28 8B              jsr facaoper          ;store <fill>
  2173 00:857B: 20 46 8B              jsr getparm           ;should be no more parameters
  2174 00:857E: 90 26                 bcc _0150020          ;there are - error
  2175                        ;
  2176 00:8580: AD 39 00              lda operand           ;<fill>
  2177                                 stail addra           ;fill 1st location
+ 2177 00:8583: 87 1F                 .db $87,addra
  2178                                 longr                 ;16 bit operations
+ 2178 00:8585: C2 30                 .db $c2,$30
  2179 00:8587: AD 2D 00              lda facb              ;get byte count
  2180 00:858A: F0 17                 beq _0150010          ;only 1 location - finished
  2181                        ;
  2182 00:858C: 3A                    dea                   ;zero align &...
  2183 00:858D: 48                    pha                   ;protect
  2184                                 shorta
+ 2184 00:858E: E2 20                 .db $e2,$20
  2185 00:8590: AD 21 00              lda addra+s_word      ;start bank
  2186 00:8593: EB                    xba
  2187 00:8594: AD 24 00              lda addrb+s_word      ;end bank
  2188 00:8597: 20 96 8A              jsr cpfwsup           ;do forward copy setup
  2189 00:859A: 68                    pla                   ;recover fill count
  2190 00:859B: AE 1F 00              ldx addra             ;fill-from starting location
  2191 00:859E: 9B                    txy
  2192 00:859F: C8                    iny                   ;fill-to starting location
  2193 00:85A0: 4C 25 00              jmp mcftwork          ;fill memory
  2194                        ;
  2195 00:85A3: 4C FF 80     _0150010 jmp monce             ;goto command executive
  2196                        ;
  Sat Jan 22 2022 12:11                                                                                                Page 41


  2197 00:85A6: 4C 3F 81     _0150020 jmp monerr            ;goto error handler
  2198                        ;
  2199                        ;================================================================================
  2200                        ;
  2201                        ;monhnt: SEARCH (hunt) MEMORY
  2202                        ;
  2203                        ;	-----------------------------------
  2204                        ;	syntax: H <addr1> <addr2> <pattern>
  2205                        ;	-----------------------------------
  2206                        ;
  2207 00:85A9: B0 42        monhnt   bcs _0160050          ;no start address
  2208                        ;
  2209 00:85AB: 20 34 8B              jsr facasize          ;size starting address
  2210 00:85AE: C9 04                 cmp #s_dword
  2211 00:85B0: B0 3E                 bcs _0160060          ;address out of range - error
  2212                        ;
  2213 00:85B2: 20 10 8B              jsr facaddra          ;store starting address
  2214 00:85B5: 20 46 8B              jsr getparm           ;evaluate ending address
  2215 00:85B8: B0 36                 bcs _0160060          ;no address - error
  2216                        ;
  2217 00:85BA: 20 34 8B              jsr facasize          ;size ending address
  2218 00:85BD: C9 04                 cmp #s_dword
  2219 00:85BF: B0 2F                 bcs _0160060          ;address out of range - error
  2220                        ;
  2221 00:85C1: 20 1C 8B              jsr facaddrb          ;store ending address
  2222 00:85C4: 20 6D 8A              jsr calccnt           ;calculate byte range
  2223 00:85C7: 90 27                 bcc _0160060          ;end < start
  2224                        ;
  2225 00:85C9: 20 6C 8C              jsr getpat            ;evaluate search pattern
  2226 00:85CC: B0 22                 bcs _0160060          ;error
  2227                        ;
  2228 00:85CE: 9C 4A 00              stz xrtemp            ;clear column counter
  2229                        ;
  2230 00:85D1: 20 39 8D     _0160010 jsr teststop          ;check for stop
  2231 00:85D4: B0 17                 bcs _0160050          ;abort
  2232                        ;
  2233 00:85D6: AC 3C 00              ldy auxbufix          ;pattern index
  2234                        ;
  2235 00:85D9: 88           _0160020 dey
  2236 00:85DA: 30 09                 bmi _0160030          ;pattern match
  2237                        ;
  2238                                 ldaily addra          ;get from memory
+ 2238 00:85DC: B7 1F                 .db $b7,addra
  2239 00:85DE: D9 46 02              cmp auxbuf,y          ;test against pattern
  2240 00:85E1: D0 05                 bne _0160040          ;mismatch, next location
  2241                        ;
  2242 00:85E3: F0 F4                 beq _0160020          ;match, keep testing
  2243                        ;
  2244 00:85E5: 20 63 86     _0160030 jsr dpycaddr          ;display current location
  2245                        ;
  2246 00:85E8: 20 71 8B     _0160040 jsr nxtaddra          ;next location
  2247 00:85EB: 90 E4                 bcc _0160010          ;not done
  2248                        ;
  2249 00:85ED: 4C FF 80     _0160050 jmp monce             ;back to executive
  2250                        ;
  2251 00:85F0: 4C 3F 81     _0160060 jmp monerr            ;goto error handler
  2252                        ;
  Sat Jan 22 2022 12:11                                                                                                Page 42


  2253                        ;================================================================================
  2254                        ;
  2255                        ;monenv: CONVERT NUMERIC VALUE
  2256                        ;
  2257                        ;	----------------------
  2258                        ;	syntax: <radix><value>
  2259                        ;	----------------------
  2260                        ;
  2261 00:85F3: 20 43 8B     monenv   jsr getparmr          ;reread & evaluate parameter
  2262 00:85F6: B0 26                 bcs _0170020          ;none entered
  2263                        ;
  2264 00:85F8: A2 00                 ldx #0                ;radix index
  2265 00:85FA: A0 04                 ldy #n_radix          ;number of radices
  2266                        ;
  2267 00:85FC: 5A           _0170010 phy                   ;save counter
  2268 00:85FD: DA                    phx                   ;save radix index
  2269 00:85FE: 20 28 88              jsr newline           ;next line &...
  2270 00:8601: 20 AC 87              jsr clearlin          ;clear it
  2271 00:8604: A9 20                 lda #a_blank
  2272 00:8606: A2 04                 ldx #halftab
  2273 00:8608: 20 1D 88              jsr multspc           ;indent 1/2 tab
  2274 00:860B: FA                    plx                   ;get radix index but...
  2275 00:860C: DA                    phx                   ;put it back
  2276 00:860D: BD 29 8E              lda radxtab,x         ;get radix
  2277 00:8610: 20 33 89              jsr binasc            ;convert to ASCII
  2278 00:8613: 5A                    phy                   ;string address MSB
  2279 00:8614: DA                    phx                   ;string address LSB
  2280 00:8615: 20 3D 88              jsr sprint            ;print
  2281 00:8618: FA                    plx                   ;get index again
  2282 00:8619: 7A                    ply                   ;get counter
  2283 00:861A: E8                    inx
  2284 00:861B: 88                    dey                   ;all radices handled?
  2285 00:861C: D0 DE                 bne _0170010          ;no
  2286                        
  2287 00:861E: 4C FF 80     _0170020 jmp monce             ;back to command exec
  2288                        ;
  2289                        ;================================================================================
  2290                        ;
  2291                        ;monchr: CHANGE REGISTERS
  2292                        ;
  2293                        ;	------------------------------------------------------
  2294                        ;	syntax: ; [PB [PC [.S [.C [.X [.Y [SP [DP [DB]]]]]]]]]
  2295                        ;
  2296                        ;	; with no parameters is the same as the R command.
  2297                        ;	------------------------------------------------------
  2298                        ;
  2299 00:8621: B0 3A        monchr   bcs _0570040          ;dump registers & quit
  2300                        ;
  2301 00:8623: A0 00                 ldy #0                ;register counter
  2302 00:8625: 8C 33 00              sty facc              ;initialize register index
  2303                        ;
  2304 00:8628: 20 34 8B     _0570010 jsr facasize          ;get parameter size
  2305 00:862B: D9 2D 8E              cmp rcvltab,y         ;check against size table
  2306 00:862E: B0 30                 bcs _0570050          ;out of range
  2307                        ;
  2308 00:8630: B9 2D 8E              lda rcvltab,y         ;determine number of bytes...
  2309 00:8633: C9 03                 cmp #s_word+1         ;to store
  Sat Jan 22 2022 12:11                                                                                                Page 43


  2310 00:8635: 6E 34 00              ror facc+s_byte       ;condition flag
  2311 00:8638: 10 02                 bpl _0570020          ;8 bit register size
  2312                        ;
  2313                                 slonga                 ;16 bit register size
+ 2313 00:863A: C2 20                 .db $c2,$20
  2314                        ;
  2315 00:863C: AE 33 00     _0570020 ldx facc              ;get register index
  2316 00:863F: AD 25 00              lda faca              ;get parm
  2317 00:8642: 9D 10 00              sta reg_pbx,x         ;put in shadow storage
  2318                                 shorta
+ 2318 00:8645: E2 20                 .db $e2,$20
  2319 00:8647: 0E 34 00              asl facc+s_byte       ;mode flag to carry
  2320 00:864A: 8A                    txa                   ;register index
  2321 00:864B: 69 01                 adc #s_byte           ;at least 1 byte stored
  2322 00:864D: 8D 33 00              sta facc              ;save new index
  2323 00:8650: 20 46 8B              jsr getparm           ;get a parameter
  2324 00:8653: B0 08                 bcs _0570040          ;EOI
  2325                        ;
  2326 00:8655: C8                    iny                   ;bump register count
  2327 00:8656: C0 09                 cpy #n_regchv         ;all registers processed?
  2328 00:8658: D0 CE                 bne _0570010          ;no, keep going
  2329                        ;
  2330 00:865A: 20 34 88     _0570030 jsr alert             ;excessive input
  2331                        ;
  2332 00:865D: 4C A1 80     _0570040 jmp monreg            ;display changes
  2333                        ;
  2334 00:8660: 4C 3F 81     _0570050 jmp monerr            ;goto error handler
  2335                        ;
  2336                        ;================================================================================
  2337                        ;
  2338                        ;monxit: EXIT TO OPERATING ENVIRONMENT
  2339                        ;
  2340                        ;	---------
  2341                        ;	syntax: X
  2342                        ;	---------
  2343                        ;
  2344                        ;monxit   bcc _0180020          ;no parameters allowed
  2345                        ;
  2346                        ;         slonga
  2347                        ;        lda vecbrki           ;BRK indirect vector
  2348                        ;         cmpw monbrk           ;we intercept it?
  2349                        ;         bne _0180010          ;no, don't change it
  2350                        ;
  2351                        ;         lda vecbrkia          ;old vector
  2352                        ;         sta vecbrki           ;restore it
  2353                        ;         stz vecbrkia          ;invalidate old vector
  2354                        ;
  2355                        ;_0180010 shortr
  2356                        ;         jml vecexit           ;long jump to exit
  2357                        ;
  2358                        ;_0180020 jmp monerr            ;goto error handler
  2359                        ;
  2360                        ; * * * * * * * * * * * * * * * * * * * * * * * *
  2361                        ; * * * * * * * * * * * * * * * * * * * * * * * *
  2362                        ; * *                                         * *
  2363                        ; * * S T A R T   o f   S U B R O U T I N E S * *
  2364                        ; * *                                         * *
  Sat Jan 22 2022 12:11                                                                                                Page 44


  2365                        ; * * * * * * * * * * * * * * * * * * * * * * * *
  2366                        ; * * * * * * * * * * * * * * * * * * * * * * * *
  2367                        ;
  2368                        ;dpycaddr: DISPLAY CURRENT ADDRESS IN COLUMNS
  2369                        ;
  2370 00:8663: AE 4A 00     dpycaddr ldx xrtemp            ;column count
  2371 00:8666: D0 05                 bne _0190010          ;not at right side
  2372                        ;
  2373 00:8668: 20 28 88              jsr newline           ;next row
  2374 00:866B: A2 0A                 ldx #n_hccols         ;max columns
  2375                        ;
  2376 00:866D: E0 0A        _0190010 cpx #n_hccols         ;max columns
  2377 00:866F: F0 05                 beq _0190020          ;at left margin
  2378                        ;
  2379 00:8671: A9 09                 lda #a_ht
  2380 00:8673: 20 71 FF              jsr putcha            ;tab a column
  2381                        ;
  2382 00:8676: CA           _0190020 dex                   ;one less column
  2383 00:8677: 8E 4A 00              stx xrtemp            ;save column counter
  2384 00:867A: 4C F4 87              jmp prntladr          ;print reference address
  2385                        ;
  2386                        ;================================================================================
  2387                        ;
  2388                        ;dpycod: DISASSEMBLE & DISPLAY CODE
  2389                        ;
  2390                        ;	------------------------------------------------------------------------
  2391                        ;	This function disassembles & displays the machine code at  the  location
  2392                        ;	pointed to by ADDRA.  Upon return, ADDRA will point to the opcode of the
  2393                        ;	next instruction.   The entry point at DPYCODAA  should be called with a
  2394                        ;	disassembly prefix character loaded in .A.   If entered  at  DPYCOD, the
  2395                        ;	default character will be display at the beginning of each  disassembled
  2396                        ;	instruction.
  2397                        ;
  2398                        ;	The disassembly of immediate mode instructions that can take an 8 or  16
  2399                        ;	bit operand is affected by the bit pattern that is  stored  in  FLIMFLAG
  2400                        ;	upon entry to this function:
  2401                        ;
  2402                        ;	    FLIMFLAG: xx000000
  2403                        ;	              ||
  2404                        ;	              |+---------> 0:  8 bit .X or .Y operand
  2405                        ;	              |            1: 16 bit .X or .Y operand
  2406                        ;	              +----------> 0:  8 bit .A or BIT # operand
  2407                        ;	                           1: 16 bit .A or BIT # operand
  2408                        ;
  2409                        ;	FLIMFLAG is conditioned according to the operand of  the  most  recently
  2410                        ;	disassembled REP or SEP instruction.   Hence repetitive  calls  to  this
  2411                        ;	subroutine will usually result in the correct disassembly of 16 bit imm-
  2412                        ;	ediate mode instructions.
  2413                        ;	------------------------------------------------------------------------
  2414                        ;
  2415 00:867D: A9 2E        dpycod   lda #disprfx          ;default prefix
  2416                        ;
  2417                        ;
  2418                        ;	alternate prefix display entry point...
  2419                        ;
  2420 00:867F: 20 71 FF     dpycodaa jsr putcha            ;print prefix
  2421 00:8682: 20 38 88              jsr printspc          ;space
  Sat Jan 22 2022 12:11                                                                                                Page 45


  2422 00:8685: 20 F4 87              jsr prntladr          ;print long address
  2423 00:8688: 20 38 88              jsr printspc          ;space to opcode field
  2424 00:868B: 20 8A 8B              jsr getbyte           ;get opcode
  2425 00:868E: 8D 48 00              sta opcode            ;save &...
  2426 00:8691: 20 2D 88              jsr printbyt          ;display as hex
  2427                        ;
  2428                        ;
  2429                        ;	decode menmonic & addressing info...
  2430                        ;
  2431 00:8694: AE 48 00              ldx opcode            ;current mnemonic
  2432 00:8697: BD EE 8E              lda mnetabix,x        ;get mnemonic index
  2433 00:869A: 0A                    asl                   ;double for...
  2434 00:869B: A8                    tay                   ;mnemonic table offset
  2435                                 slonga                 ;16 bit load
+ 2435 00:869C: C2 20                 .db $c2,$20
  2436 00:869E: B9 36 8E              lda mnetab,y          ;copy encoded mnemonic to...
  2437 00:86A1: 8D 46 00              sta mnepck            ;working storage
  2438                                 shorta                ;back to 8 bits
+ 2438 00:86A4: E2 20                 .db $e2,$20
  2439 00:86A6: 20 AF 8B              jsr instdata          ;extract mode & size data
  2440 00:86A9: 8D 4F 00              sta vopsflag          ;save mode flags
  2441 00:86AC: 8C 41 00              sty admodidx          ;save mode index
  2442 00:86AF: 0A                    asl                   ;variable immediate instruction?
  2443 00:86B0: 90 23                 bcc dpycod01          ;no, effective operand size in .X
  2444                        ;
  2445                        ;
  2446                        ;	determine immediate mode operand size...
  2447                        ;
  2448 00:86B2: AD 48 00              lda opcode            ;current opcode
  2449 00:86B5: 2C 4C 00              bit flimflag          ;operand display mode
  2450 00:86B8: 10 09                 bpl _0200010          ;8 bit .A & BIT immediate mode
  2451                        ;
  2452 00:86BA: 29 1F                 and #aimmaska         ;determine if...
  2453 00:86BC: C9 09                 cmp #aimmaskb         ;.A or BIT immediate
  2454 00:86BE: F0 11                 beq _0200030          ;display 16 bit operand
  2455                        ;
  2456 00:86C0: AD 48 00              lda opcode            ;not .A or BIT immediate
  2457                        ;
  2458 00:86C3: 50 10        _0200010 bvc dpycod01          ;8 bit .X/.Y immediate mode
  2459                        ;
  2460 00:86C5: A0 03                 ldy #n_vopidx-1       ;opcodes to test
  2461                        ;
  2462 00:86C7: D9 EE 90     _0200020 cmp vopidx,y          ;looking for LDX #, CPY #, etc.
  2463 00:86CA: F0 08                 beq _0200040          ;disassemble a 16 bit operand
  2464                        ;
  2465 00:86CC: 88                    dey
  2466 00:86CD: 10 F8                 bpl _0200020          ;keep trying
  2467                        ;
  2468 00:86CF: 80 04                 bra dpycod01          ;not .X or .Y immediate
  2469                        ;
  2470 00:86D1: AD 48 00     _0200030 lda opcode            ;reload
  2471                        ;
  2472 00:86D4: E8           _0200040 inx                   ;16 bit operand
  2473                        ;
  2474                        ;
  2475                        ;	get & display operand bytes...
  2476                        ;
  Sat Jan 22 2022 12:11                                                                                                Page 46


  2477 00:86D5: 8E 4D 00     dpycod01 stx iopsize           ;operand size...
  2478 00:86D8: E8                    inx                   ;plus opcode becomes...
  2479 00:86D9: 8E 44 00              stx instsize          ;instruction size
  2480 00:86DC: 8E 42 00              stx charcnt           ;total bytes to process
  2481 00:86DF: A9 0B                 lda #n_opcols+2       ;total operand columns plus WS
  2482 00:86E1: 8D 4A 00              sta xrtemp            ;initialize counter
  2483 00:86E4: 20 88 8A              jsr clroper           ;clear operand
  2484 00:86E7: AC 4D 00              ldy iopsize           ;operand size
  2485 00:86EA: F0 1A                 beq _0210020          ;no operand
  2486                        ;
  2487 00:86EC: A2 00                 ldx #0                ;operand index
  2488                        ;
  2489 00:86EE: 20 8A 8B     _0210010 jsr getbyte           ;get operand byte
  2490 00:86F1: 9D 39 00              sta operand,x         ;save
  2491 00:86F4: DA                    phx                   ;protect operand index
  2492 00:86F5: 20 2D 88              jsr printbyt          ;print operand byte
  2493 00:86F8: CE 4A 00              dec xrtemp            ;3 columns used, 2 for...
  2494 00:86FB: CE 4A 00              dec xrtemp            ;operand nybbles &...
  2495 00:86FE: CE 4A 00              dec xrtemp            ;1 for whitespace
  2496 00:8701: FA                    plx                   ;get operand index
  2497 00:8702: E8                    inx                   ;bump it
  2498 00:8703: 88                    dey
  2499 00:8704: D0 E8                 bne _0210010          ;next
  2500                        ;
  2501 00:8706: AE 4A 00     _0210020 ldx xrtemp            ;operand columns remaining
  2502 00:8709: 20 1D 88              jsr multspc           ;space to mnemonic field
  2503                        ;
  2504                        ;
  2505                        ;	display mnemonic...
  2506                        ;
  2507 00:870C: A0 03                 ldy #s_mnemon         ;size of ASCII mnemonic
  2508                        ;
  2509 00:870E: A9 00        _0210030 lda #0                ;initialize char
  2510 00:8710: A2 05                 ldx #n_shfenc         ;shifts to execute
  2511                        ;
  2512 00:8712: 0E 46 00     _0210040 asl mnepck            ;shift encoded mnemonic
  2513 00:8715: 2E 47 00              rol mnepck+s_byte
  2514 00:8718: 2A                    rol
  2515 00:8719: CA                    dex
  2516 00:871A: D0 F6                 bne _0210040
  2517                        ;
  2518 00:871C: 69 3F                 adc #a_mnecvt         ;convert to ASCII &...
  2519 00:871E: 48                    pha                   ;stash
  2520 00:871F: 88                    dey
  2521 00:8720: D0 EC                 bne _0210030          ;continue with mnemonic
  2522                        ;
  2523 00:8722: A0 03                 ldy #s_mnemon
  2524                        ;
  2525 00:8724: 68           _0210050 pla                   ;get mnenmonic byte
  2526 00:8725: 20 71 FF              jsr putcha            ;print it
  2527 00:8728: 88                    dey
  2528 00:8729: D0 F9                 bne _0210050
  2529                        ;
  2530                        ;
  2531                        ;	display operand...
  2532                        ;
  2533 00:872B: AD 4D 00              lda iopsize           ;operand size
  Sat Jan 22 2022 12:11                                                                                                Page 47


  2534 00:872E: F0 7C                 beq clearlin          ;zero, disassembly finished
  2535                        ;
  2536 00:8730: 20 38 88              jsr printspc          ;space to operand field
  2537 00:8733: 2C 4F 00              bit vopsflag          ;check mode flags
  2538 00:8736: 50 0A                 bvc dpycod02          ;not a branch
  2539                        ;
  2540 00:8738: 20 C5 8B              jsr offtarg           ;compute branch target
  2541 00:873B: AE 44 00              ldx instsize          ;effective instruction size
  2542 00:873E: CA                    dex
  2543 00:873F: 8E 4D 00              stx iopsize           ;effective operand size
  2544                        ;
  2545 00:8742: 9C 4F 00     dpycod02 stz vopsflag          ;clear
  2546 00:8745: AD 41 00              lda admodidx          ;instruction addressing mode
  2547 00:8748: C9 0B                 cmp #am_move          ;block move instruction?
  2548 00:874A: D0 03                 bne _0220010          ;no
  2549                        ;
  2550 00:874C: 6E 4F 00              ror vopsflag          ;yes
  2551                        ;
  2552 00:874F: 0A           _0220010 asl                   ;convert addressing mode to...
  2553 00:8750: AA                    tax                   ;symbology table index
  2554                                 slonga                 ;do a 16 bit load
+ 2554 00:8751: C2 20                 .db $c2,$20
  2555 00:8753: BD F2 90              lda ms_lutab,x        ;addressing symbol pointer
  2556 00:8756: 48                    pha
  2557                                 shorta                ;back to 8 bit loads
+ 2557 00:8757: E2 20                 .db $e2,$20
  2558 00:8759: A0 00                 ldy #0
  2559                                 ldasi 1               ;get 1st char
+ 2559 00:875B: B3 01                 .db $b3,1
  2560 00:875D: C9 20                 cmp #a_blank
  2561 00:875F: F0 03                 beq _0220020          ;no addresing mode preamble
  2562                        ;
  2563 00:8761: 20 71 FF              jsr putcha            ;print preamble
  2564                        ;
  2565 00:8764: A9 24        _0220020 lda #c_hex
  2566 00:8766: 20 71 FF              jsr putcha            ;operand displayed as hex
  2567 00:8769: AC 4D 00              ldy iopsize           ;operand size = index
  2568                        ;
  2569 00:876C: 88           _0220030 dey
  2570 00:876D: 30 18                 bmi _0220040          ;done with operand
  2571                        ;
  2572 00:876F: B9 39 00              lda operand,y         ;get operand byte
  2573 00:8772: 20 13 88              jsr dpyhex            ;print operand byte
  2574 00:8775: 2C 4F 00              bit vopsflag          ;block move?
  2575 00:8778: 10 F2                 bpl _0220030          ;no
  2576                        ;
  2577 00:877A: 9C 4F 00              stz vopsflag          ;reset
  2578 00:877D: 5A                    phy                   ;protect operand index
  2579 00:877E: F4 2B 91              pea ms_move
  2580 00:8781: 20 3D 88              jsr sprint            ;display MVN/MVP operand separator
  2581 00:8784: 7A                    ply                   ;recover operand index again
  2582 00:8785: 80 E5                 bra _0220030          ;continue
  2583                        ;
  2584 00:8787: FA           _0220040 plx                   ;symbology LSB
  2585 00:8788: 7A                    ply                   ;symbology MSB
  2586 00:8789: E8                    inx                   ;move past preamble
  2587 00:878A: D0 01                 bne _0220050
  Sat Jan 22 2022 12:11                                                                                                Page 48


  2588                        ;
  2589 00:878C: C8                    iny
  2590                        ;
  2591 00:878D: 5A           _0220050 phy
  2592 00:878E: DA                    phx
  2593 00:878F: 20 3D 88              jsr sprint            ;print postamble, if any
  2594                        ;
  2595                        ;
  2596                        ;	condition immediate mode display format...
  2597                        ;
  2598 00:8792: AD 39 00     dpycod03 lda operand           ;operand LSB
  2599 00:8795: 29 30                 and #pfmxmask         ;isolate M & X bits
  2600 00:8797: 0A                    asl                   ;shift to match...
  2601 00:8798: 0A                    asl                   ;FLIMFLAG alignment
  2602 00:8799: AE 48 00              ldx opcode            ;current instruction
  2603 00:879C: E0 C2                 cpx #opc_rep          ;was it REP?
  2604 00:879E: D0 05                 bne _0230010          ;no
  2605                        ;
  2606 00:87A0: 0C 4C 00              tsb flimflag          ;set flag bits as required
  2607 00:87A3: 80 07                 bra clearlin
  2608                        ;
  2609 00:87A5: E0 E2        _0230010 cpx #opc_sep          ;was it SEP?
  2610 00:87A7: D0 03                 bne clearlin          ;no, just exit
  2611                        ;
  2612 00:87A9: 1C 4C 00              trb flimflag          ;clear flag bits as required
  2613                        ;
  2614                        ;================================================================================
  2615                        ;
  2616                        ;clearlin: CLEAR DISPLAY LINE
  2617                        ;
  2618                        clearlin
  2619 00:87AC: 60           	rts
  2620                        ;
  2621                        ;================================================================================
  2622                        ;
  2623                        ;dpyibuf: DISPLAY MONITOR INPUT BUFFER CONTENTS
  2624                        ;
  2625 00:87AD: F4 00 02     dpyibuf  pea ibuffer
  2626 00:87B0: 80 39                 bra dpyerraa
  2627                        ;
  2628                        ;================================================================================
  2629                        ;
  2630                        ;dpymem: DISPLAY MEMORY
  2631                        ;
  2632                        ;	------------------------------------------------------------
  2633                        ;	This function displays 16 bytes of memory as hex values & as
  2634                        ;	ASCII equivalents.  The starting address for the display is
  2635                        ;	in ADDRA & is expected to be a 24 bit address.  Upon return,
  2636                        ;	ADDRA will point to the start of the next 16 bytes.
  2637                        ;	------------------------------------------------------------
  2638                        ;
  2639                        dpymem   shortr
+ 2639 00:87B2: E2 30                 .db $e2,$30
  2640 00:87B4: 9C 42 00              stz charcnt           ;reset
  2641                        ;         lda #memprfx
  2642                        ;         jsr putcha            ;display prefix
  2643 00:87B7: 20 F4 87              jsr prntladr          ;print 24 bit address
  Sat Jan 22 2022 12:11                                                                                                Page 49


  2644 00:87BA: A2 00                 ldx #0                ;string buffer index
  2645 00:87BC: A0 08                 ldy #n_dump           ;bytes per line
  2646                        ;
  2647 00:87BE: 20 8A 8B     _0240010 jsr getbyte           ;get from RAM, also...
  2648 00:87C1: 48                    pha                   ;save for decoding
  2649 00:87C2: DA                    phx                   ;save string index
  2650 00:87C3: 20 2D 88              jsr printbyt          ;display as hex ASCII
  2651 00:87C6: EE 42 00              inc charcnt           ;bytes displayed +1
  2652 00:87C9: FA                    plx                   ;recover string index &...
  2653 00:87CA: 68                    pla                   ;byte
  2654 00:87CB: C9 20                 cmp #a_blank          ;printable?
  2655 00:87CD: 90 04                 bcc _0240020          ;no
  2656                        ;
  2657 00:87CF: C9 7F                 cmp #a_del
  2658 00:87D1: 90 02                 bcc _0240030          ;is printable
  2659                        ;
  2660 00:87D3: A9 2E        _0240020 lda #memsubch         ;substitute character
  2661                        ;
  2662 00:87D5: 9D 00 02     _0240030 sta ibuffer,x         ;save char
  2663 00:87D8: E8                    inx                   ;bump index
  2664 00:87D9: 88                    dey                   ;byte count -= 1
  2665 00:87DA: D0 E2                 bne _0240010          ;not done
  2666                        ;
  2667 00:87DC: 9E 00 02              stz ibuffer,x         ;terminate ASCII string
  2668 00:87DF: A9 3A                 lda #memsepch
  2669 00:87E1: 20 71 FF              jsr putcha            ;separate ASCII from bytes
  2670 00:87E4: 20 AD 87              jsr dpyibuf           ;display ASCII equivalents
  2671 00:87E7: 60                    rts
  2672                        ;
  2673                        ;================================================================================
  2674                        ;
  2675                        ;dpyerr: DISPLAY ERROR SIGNAL
  2676                        ;
  2677 00:87E8: F4 6C 91     dpyerr   pea mm_err            ;"*ERR"
  2678                        ;
  2679 00:87EB: 20 3D 88     dpyerraa jsr sprint
  2680 00:87EE: 60                    rts
  2681                        ;
  2682                        ;================================================================================
  2683                        ;
  2684                        ;gendbs: GENERATE DESTRUCTIVE BACKSPACE
  2685                        ;
  2686 00:87EF: F4 3C 91     gendbs   pea dc_bs             ;destructive backspace
  2687 00:87F2: 80 F7                 bra dpyerraa
  2688                        ;
  2689                        ;================================================================================
  2690                        ;
  2691                        ;prntladr: PRINT 24 BIT CURRENT ADDRESS
  2692                        ;
  2693 00:87F4: 08           prntladr php                   ;protect register sizes
  2694                                 shorta
+ 2694 00:87F5: E2 20                 .db $e2,$20
  2695 00:87F7: AD 21 00              lda addra+s_word      ;get bank byte &...
  2696 00:87FA: 20 13 88              jsr dpyhex            ;display it
  2697                                 slonga
+ 2697 00:87FD: C2 20                 .db $c2,$20
  2698 00:87FF: AD 1F 00              lda addra             ;get 16 bit address
  Sat Jan 22 2022 12:11                                                                                                Page 50


  2699 00:8802: 28                    plp                   ;restore register sizes
  2700                        ;
  2701                        ;================================================================================
  2702                        ;
  2703                        ;dpyhexw: DISPLAY BINARY WORD AS HEX ASCII
  2704                        ;
  2705                        ;	------------------------------------
  2706                        ;	Preparatory Ops: .C: word to display
  2707                        ;
  2708                        ;	Returned Values: .C: used
  2709                        ;	                 .X: used
  2710                        ;	                 .Y: entry value
  2711                        ;	------------------------------------
  2712                        ;
  2713 00:8803: 08           dpyhexw  php                   ;save register sizes
  2714                                 slonga
+ 2714 00:8804: C2 20                 .db $c2,$20
  2715 00:8806: 48                    pha                   ;protect value
  2716                                 shorta
+ 2716 00:8807: E2 20                 .db $e2,$20
  2717 00:8809: EB                    xba                   ;get MSB &...
  2718 00:880A: 20 13 88              jsr dpyhex            ;display
  2719                                 slonga
+ 2719 00:880D: C2 20                 .db $c2,$20
  2720 00:880F: 68                    pla                   ;recover value
  2721                                 shorta                ;only LSB visible
+ 2721 00:8810: E2 20                 .db $e2,$20
  2722 00:8812: 28                    plp                   ;reset register sizes
  2723                        ;
  2724                        ;================================================================================
  2725                        ;
  2726                        ;dpyhex: DISPLAY BINARY BYTE AS HEX ASCII
  2727                        ;
  2728                        ;	------------------------------------
  2729                        ;	Preparatory Ops: .A: byte to display
  2730                        ;
  2731                        ;	Returned Values: .A: used
  2732                        ;	                 .X: used
  2733                        ;	                 .Y: entry value
  2734                        ;	------------------------------------
  2735                        ;
  2736 00:8813: 20 DE 89     dpyhex   jsr binhex            ;convert to hex ASCII
  2737 00:8816: 20 71 FF              jsr putcha            ;print MSN
  2738 00:8819: 8A                    txa
  2739 00:881A: 4C 71 FF              jmp putcha            ;print LSN
  2740                        ;
  2741                        ;================================================================================
  2742                        ;
  2743                        ;multspc: PRINT MULTIPLE BLANKS
  2744                        ;
  2745                        ;	------------------------------------------------
  2746                        ;	Preparatory Ops : .X: number of blanks to print
  2747                        ;
  2748                        ;	Register Returns: none
  2749                        ;
  2750                        ;	Calling Example : ldx #3
  2751                        ;	                  jsr multspc    ;print 3 spaces
  Sat Jan 22 2022 12:11                                                                                                Page 51


  2752                        ;
  2753                        ;	Notes: This sub will print 1 blank if .X=0.
  2754                        ;	------------------------------------------------
  2755                        ;
  2756                        
  2757 00:881D: 8A           multspc  txa
  2758 00:881E: D0 01                 bne _0250010          ;blank count specified
  2759                        ;
  2760 00:8820: E8                    inx                   ;default to 1 blank
  2761                        ;
  2762 00:8821: 20 38 88     _0250010 jsr printspc
  2763 00:8824: CA                    dex
  2764 00:8825: D0 FA                 bne _0250010
  2765                        ;
  2766 00:8827: 60                    rts
  2767                        
  2768                        ;
  2769                        ;================================================================================
  2770                        ;
  2771                        ;newline: PRINT NEWLINE (CRLF)
  2772                        ;
  2773 00:8828: F4 39 91     newline  pea dc_lf
  2774 00:882B: 80 BE                 bra dpyerraa
  2775                        ;
  2776                        ;================================================================================
  2777                        ;
  2778                        ;printbyt: PRINT A BYTE WITH LEADING SPACE
  2779                        ;
  2780 00:882D: 48           printbyt pha                   ;protect byte
  2781 00:882E: 20 38 88              jsr printspc          ;print leading space
  2782 00:8831: 68                    pla                   ;restore &...
  2783 00:8832: 80 DF                 bra dpyhex            ;print byte
  2784                        ;
  2785                        ;================================================================================
  2786                        ;
  2787                        ;alert: ALERT USER w/TERMINAL BELL
  2788                        ;
  2789 00:8834: A9 07        alert    lda #a_bel
  2790 00:8836: 80 02                 bra printcmn
  2791                        ;
  2792                        ;================================================================================
  2793                        ;
  2794                        ;printspc: PRINT A SPACE
  2795                        ;
  2796 00:8838: A9 20        printspc lda #a_blank
  2797                        ;
  2798 00:883A: 4C 71 FF     printcmn jmp putcha
  2799                        ;
  2800                        ;================================================================================
  2801                        ;
  2802                        ;sprint: PRINT NULL-TERMINATED CHARACTER STRING
  2803                        ;
  2804                        ;	---------------------------------------------------------
  2805                        ;	Preparatory Ops : SP+1: string address LSB
  2806                        ;	                  SP+2: string address MSB
  2807                        ;
  2808                        ;	Register Returns: .A: used
  Sat Jan 22 2022 12:11                                                                                                Page 52


  2809                        ;	                  .B: entry value
  2810                        ;	                  .X: used
  2811                        ;	                  .Y: used
  2812                        ;
  2813                        ;	MPU Flags: NVmxDIZC
  2814                        ;	           ||||||||
  2815                        ;	           |||||||+---> 0: okay
  2816                        ;	           |||||||      1: string too long (1)
  2817                        ;	           ||||+++----> not defined
  2818                        ;	           |||+-------> 1
  2819                        ;	           ||+--------> 1
  2820                        ;	           ++---------> not defined
  2821                        ;
  2822                        ;	Example: PER STRING
  2823                        ;	         JSR SPRINT
  2824                        ;	         BCS TOOLONG
  2825                        ;
  2826                        ;	Notes: 1) Maximum permissible string length including the
  2827                        ;	          terminator is 32,767 bytes.
  2828                        ;	       2) All registers are forced to 8 bits.
  2829                        ;	       3) DO NOT JUMP OR BRANCH INTO THIS FUNCTION!
  2830                        ;	---------------------------------------------------------
  2831                        ;
  2832                        sprint   shorta                ;8 bit accumulator
+ 2832 00:883D: E2 20                 .db $e2,$20
  2833                                 longx                 ;16 bit index
+ 2833 00:883F: C2 10                 .db $c2,$10
  2834                        ;
  2835                        ;---------------------------------------------------------
  2836             00000001   _retaddr .equ 1                    ;return address
  2837             00000003   _src     .equ _retaddr+s_word      ;string address stack offset
  2838                        ;---------------------------------------------------------
  2839                        ;
  2840                                 ldyw 0
+ 2840 00:8841: A0 00                 ldy #<0
+ 2840 00:8843: 00                    .db >0
  2841 00:8844: 18                    clc                   ;no initial error
  2842                        ;
  2843                        _0260010 ldasi _src            ;get a byte
+ 2843 00:8845: B3 03                 .db $b3,_src
  2844 00:8847: F0 07                 beq _0260020          ;done
  2845                        ;
  2846 00:8849: 20 71 FF              jsr putcha            ;write to console port
  2847 00:884C: C8                    iny
  2848 00:884D: 10 F6                 bpl _0260010          ;next
  2849                        ;
  2850 00:884F: 38                    sec                   ;string too long
  2851                        ;
  2852 00:8850: FA           _0260020 plx                   ;pull RTS address
  2853 00:8851: 7A                    ply                   ;clear string pointer
  2854 00:8852: DA                    phx                   ;replace RTS
  2855                                 shortx
+ 2855 00:8853: E2 10                 .db $e2,$10
  2856 00:8855: 60                    rts
  2857                        ;
  2858                        ;================================================================================
  2859                        ;
  Sat Jan 22 2022 12:11                                                                                                Page 53


  2860                        ;ascbin: CONVERT NULL-TERMINATED ASCII NUMBER STRING TO BINARY
  2861                        ;
  2862                        ;	---------------------------------------------------
  2863                        ;	Preparatory Ops: ASCII number string in IBUFFER
  2864                        ;
  2865                        ;	Returned Values: FACA: converted parameter
  2866                        ;	                   .A: used
  2867                        ;	                   .X: used
  2868                        ;	                   .Y: used
  2869                        ;	                   .C: 1 = conversion error
  2870                        ;	                   .Z: 1 = nothing to convert
  2871                        ;
  2872                        ;	Notes: 1) Conversion stops when a non-numeric char-
  2873                        ;	          acter is encountered.
  2874                        ;	       2) Radix symbols are as follows:
  2875                        ;
  2876                        ;	          % binary
  2877                        ;	          % octal
  2878                        ;	          + decimal
  2879                        ;	          $ hexadecimal
  2880                        ;
  2881                        ;	          Hex is the default if no radix is speci-
  2882                        ;	          fied in the 1st character of the string.
  2883                        ;	---------------------------------------------------
  2884                        ;
  2885                        ascbin   shortr
+ 2885 00:8856: E2 30                 .db $e2,$30
  2886 00:8858: 20 F1 89              jsr clrfaca           ;clear accumulator
  2887 00:885B: 9C 42 00              stz charcnt           ;zero char count
  2888 00:885E: 9C 40 00              stz radix             ;initialize
  2889                        ;
  2890                        ;
  2891                        ;	process radix if present...
  2892                        ;
  2893 00:8861: 20 BF 8C              jsr getcharw          ;get next non-WS char
  2894 00:8864: D0 02                 bne _0270010          ;got something
  2895                        ;
  2896 00:8866: 18                    clc                   ;no more input
  2897 00:8867: 60                    rts
  2898                        ;
  2899 00:8868: A2 03        _0270010 ldx #n_radix-1        ;number of radices
  2900                        ;
  2901 00:886A: DD 29 8E     _0270020 cmp radxtab,x         ;recognized radix?
  2902 00:886D: F0 07                 beq _0270030          ;yes
  2903                        ;
  2904 00:886F: CA                    dex
  2905 00:8870: 10 F8                 bpl _0270020          ;try next
  2906                        ;
  2907 00:8872: CE 3D 00              dec ibufidx           ;reposition to previous char
  2908 00:8875: E8                    inx                   ;not recognized, assume hex
  2909                        ;
  2910 00:8876: C9 2B        _0270030 cmp #c_dec            ;decimal radix?
  2911 00:8878: D0 03                 bne _0270040          ;not decimal
  2912                        ;
  2913 00:887A: 6E 40 00              ror radix             ;flag decimal conversion
  2914                        ;
  2915 00:887D: BD 15 8E     _0270040 lda basetab,x         ;number bases table
  Sat Jan 22 2022 12:11                                                                                                Page 54


  2916 00:8880: 8D 4E 00              sta range             ;set valid numeral range
  2917 00:8883: BD 19 8E              lda bitsdtab,x        ;get bits per digit
  2918 00:8886: 8D 3E 00              sta bitsdig           ;store
  2919                        ;
  2920                        ;
  2921                        ;	process numerals...
  2922                        ;
  2923 00:8889: 20 58 8C     ascbin01 jsr getchar           ;get next char
  2924 00:888C: D0 03                 bne _TMP0001          ;not EOI
  2925 00:888E: 4C 13 89              jmp ascbin03          ;EOI
  2926                        ;
  2927                        _TMP0001
  2928 00:8891: C9 20                 cmp #' '
  2929 00:8893: F0 7E                 beq ascbin03          ;blank - EOF
  2930                        ;
  2931 00:8895: C9 2C                 cmp #','
  2932 00:8897: F0 7A                 beq ascbin03          ;comma - EOF
  2933                        ;
  2934 00:8899: C9 09                 cmp #a_ht
  2935 00:889B: F0 76                 beq ascbin03          ;tab - EOF
  2936                        ;
  2937 00:889D: 20 5B 8A              jsr nybtobin          ;change to binary
  2938 00:88A0: B0 72                 bcs ascbin04          ;not a recognized numeral
  2939                        ;
  2940 00:88A2: CD 4E 00              cmp range             ;check range
  2941 00:88A5: B0 6D                 bcs ascbin04          ;not valid for base
  2942                        ;
  2943 00:88A7: 8D 3F 00              sta numeral           ;save processed numeral
  2944 00:88AA: EE 42 00              inc charcnt           ;bump numeral count
  2945 00:88AD: 2C 40 00              bit radix             ;working in base 10?
  2946 00:88B0: 10 17                 bpl _1570030          ;no
  2947                        ;
  2948                        ;
  2949                        ;	compute N*2 for decimal conversion...
  2950                        ;
  2951 00:88B2: A2 00                 ldx #0                ;accumulator index
  2952 00:88B4: A0 02                 ldy #s_pfac/2         ;iterations
  2953                                 slonga
+ 2953 00:88B6: C2 20                 .db $c2,$20
  2954 00:88B8: 18                    clc
  2955                        ;
  2956 00:88B9: BD 25 00     _1570020 lda faca,x            ;N
  2957 00:88BC: 2A                    rol                   ;N=N*2
  2958 00:88BD: 9D 2D 00              sta facb,x
  2959 00:88C0: E8                    inx
  2960 00:88C1: E8                    inx
  2961 00:88C2: 88                    dey
  2962 00:88C3: D0 F4                 bne _1570020
  2963                        ;
  2964 00:88C5: B0 4D                 bcs ascbin04          ;overflow - error
  2965                        ;
  2966                                 shorta
+ 2966 00:88C7: E2 20                 .db $e2,$20
  2967                        ;
  2968                        ;
  2969                        ;	compute N*base for binary, octal or hex...
  2970                        ;	or N*8 for decimal...
  Sat Jan 22 2022 12:11                                                                                                Page 55


  2971                        ;
  2972 00:88C9: AE 3E 00     _1570030 ldx bitsdig           ;bits per digit
  2973                                 slonga                 ;16 bit shifts
+ 2973 00:88CC: C2 20                 .db $c2,$20
  2974                        ;
  2975 00:88CE: 0E 25 00     _1570040 asl faca
  2976 00:88D1: 2E 27 00              rol faca+s_word
  2977 00:88D4: B0 3E                 bcs ascbin04          ;overflow - error
  2978                        ;
  2979 00:88D6: CA                    dex
  2980 00:88D7: D0 F5                 bne _1570040          ;next shift
  2981                        ;
  2982                                 shorta                ;back to 8 bits
+ 2982 00:88D9: E2 20                 .db $e2,$20
  2983 00:88DB: 2C 40 00              bit radix             ;check base
  2984 00:88DE: 10 16                 bpl ascbin02          ;not decimal
  2985                        ;
  2986                        ;
  2987                        ;	compute N*10 for decimal (N*8 + N*2)...
  2988                        ;
  2989 00:88E0: A0 04                 ldy #s_pfac
  2990                                 slonga
+ 2990 00:88E2: C2 20                 .db $c2,$20
  2991                        ;
  2992 00:88E4: BD 25 00     _1570050 lda faca,x            ;N*8
  2993 00:88E7: 7D 2D 00              adc facb,x            ;N*2
  2994 00:88EA: 9D 25 00              sta faca,x            ;now N*10
  2995 00:88ED: E8                    inx
  2996 00:88EE: E8                    inx
  2997 00:88EF: 88                    dey
  2998 00:88F0: D0 F2                 bne _1570050
  2999                        ;
  3000 00:88F2: B0 20                 bcs ascbin04          ;overflow - error
  3001                        ;
  3002                                 shorta
+ 3002 00:88F4: E2 20                 .db $e2,$20
  3003                        ;
  3004                        ;
  3005                        ;	add current numeral to partial result...
  3006                        ;
  3007 00:88F6: AD 25 00     ascbin02 lda faca              ;N
  3008 00:88F9: 6D 3F 00              adc numeral           ;N=N+D
  3009 00:88FC: 8D 25 00              sta faca
  3010 00:88FF: A2 01                 ldx #1
  3011 00:8901: A0 03                 ldy #s_pfac-1
  3012                        ;
  3013 00:8903: BD 25 00     _0280010 lda faca,x
  3014 00:8906: 69 00                 adc #0                ;account for carry
  3015 00:8908: 9D 25 00              sta faca,x
  3016 00:890B: E8                    inx
  3017 00:890C: 88                    dey
  3018 00:890D: D0 F4                 bne _0280010
  3019                        ;
  3020 00:890F: 90 09                 bcc _0280020          ;next if no overflow
  3021                        ;
  3022 00:8911: B0 01                 bcs ascbin04          ;overflow - error
  3023                        ;
  Sat Jan 22 2022 12:11                                                                                                Page 56


  3024                        ;
  3025                        ;	finish up...
  3026                        ;
  3027 00:8913: 18           ascbin03 clc                   ;no error
  3028                        ;
  3029                        ascbin04 shorta                ;reset if necessary
+ 3029 00:8914: E2 20                 .db $e2,$20
  3030 00:8916: AD 42 00              lda charcnt           ;load char count
  3031 00:8919: 60                    rts                   ;done
  3032 00:891A: 4C 89 88     _0280020 jmp ascbin01          ;next if no overflow
  3033                        ;
  3034                        ;================================================================================
  3035                        ;
  3036                        ;bcdasc: CONVERT BCD DIGIT TO ASCII
  3037                        ;
  3038                        ;	---------------------------------------
  3039                        ;	Preparatory Ops: .A: BCD digit, $00-$99
  3040                        ;
  3041                        ;	Returned Values: .A: ASCII MSD
  3042                        ;	                 .X: ASCII LSD
  3043                        ;	                 .Y: entry value
  3044                        ;	---------------------------------------
  3045                        ;
  3046 00:891D: 20 29 89     bcdasc   jsr bintonyb          ;extract nybbles
  3047 00:8920: 48                    pha                   ;save tens
  3048 00:8921: 8A                    txa
  3049 00:8922: 09 30                 ora #btoamask         ;change units to ASCII
  3050 00:8924: AA                    tax                   ;store
  3051 00:8925: 68                    pla                   ;get tens
  3052 00:8926: 09 30                 ora #btoamask         ;change to ASCII
  3053 00:8928: 60                    rts
  3054                        ;
  3055                        ;================================================================================
  3056                        ;
  3057                        ;bintonyb: EXTRACT BINARY NYBBLES
  3058                        ;
  3059                        ;	---------------------------------
  3060                        ;	Preparatory Ops: .A: binary value
  3061                        ;
  3062                        ;	Returned Values: .A: MSN
  3063                        ;	                 .X: LSN
  3064                        ;	                 .Y: entry value
  3065                        ;	---------------------------------
  3066                        ;
  3067 00:8929: 48           bintonyb pha                   ;save
  3068 00:892A: 29 0F                 and #bcdumask         ;extract LSN
  3069 00:892C: AA                    tax                   ;save it
  3070 00:892D: 68                    pla
  3071                        ;         .rept s_bnybbl        ;extract MSN
  3072 00:892E: 4A                      lsr
  3073 00:892F: 4A                      lsr
  3074 00:8930: 4A                      lsr
  3075 00:8931: 4A                      lsr
  3076                        ;         .endr
  3077 00:8932: 60                    rts
  3078                        ;
  3079                        ;================================================================================
  Sat Jan 22 2022 12:11                                                                                                Page 57


  3080                        ;
  3081                        ;binasc: CONVERT 32-BIT BINARY TO NULL-TERMINATED ASCII NUMBER STRING
  3082                        ;
  3083                        ;	------------------------------------------------------
  3084                        ;	Preparatory Ops: FACA: 32-bit operand
  3085                        ;	                   .A: radix character, w/bit 7 set to
  3086                        ;	                       suppress radix symbol in the
  3087                        ;	                       conversion string
  3088                        ;
  3089                        ;	Returned Values: ibuffer: conversion string
  3090                        ;	                      .A: string length
  3091                        ;	                      .X: string address LSB
  3092                        ;	                      .Y: string address MSB
  3093                        ;
  3094                        ;	Execution Notes: ibufidx & instsize are overwritten.
  3095                        ;	------------------------------------------------------
  3096                        ;
  3097 00:8933: 9C 3D 00     binasc   stz ibufidx           ;initialize string index
  3098 00:8936: 9C 44 00              stz instsize          ;clear format flag
  3099                        ;
  3100                        ;
  3101                        ;	evaluate radix...
  3102                        ;
  3103 00:8939: 0A                    asl                   ;extract format flag &...
  3104 00:893A: 6E 44 00              ror instsize          ;save it
  3105 00:893D: 4A                    lsr                   ;extract radix character
  3106 00:893E: A2 03                 ldx #n_radix-1        ;total radices
  3107                        ;
  3108 00:8940: DD 29 8E     _0290010 cmp radxtab,x         ;recognized radix?
  3109 00:8943: F0 04                 beq _0290020          ;yes
  3110                        ;
  3111 00:8945: CA                    dex
  3112 00:8946: 10 F8                 bpl _0290010          ;try next
  3113                        ;
  3114 00:8948: E8                    inx                   ;assume hex
  3115                        ;
  3116 00:8949: 8E 40 00     _0290020 stx radix             ;save radix index for later
  3117 00:894C: 2C 44 00              bit instsize
  3118 00:894F: 30 09                 bmi _0290030          ;no radix symbol wanted
  3119                        ;
  3120 00:8951: BD 29 8E              lda radxtab,x         ;radix table
  3121 00:8954: 8D 00 02              sta ibuffer           ;prepend to string
  3122 00:8957: EE 3D 00              inc ibufidx           ;bump string index
  3123                        ;
  3124 00:895A: C9 2B        _0290030 cmp #c_dec            ;converting to decimal?
  3125 00:895C: D0 07                 bne _0290040          ;no
  3126                        ;
  3127 00:895E: 20 07 8A              jsr facabcd           ;convert operand to BCD
  3128 00:8961: A9 00                 lda #0
  3129 00:8963: 80 19                 bra _0290070          ;skip binary stuff
  3130                        ;
  3131                        ;
  3132                        ;	prepare for binary, octal or hex conversion...
  3133                        ;
  3134 00:8965: A2 00        _0290040 ldx #0                ;operand index
  3135 00:8967: A0 05                 ldy #s_sfac-1         ;workspace index
  3136                        ;
  Sat Jan 22 2022 12:11                                                                                                Page 58


  3137 00:8969: BD 25 00     _0290050 lda faca,x            ;copy operand to...
  3138 00:896C: 99 2D 00              sta facb,y            ;workspace in...
  3139 00:896F: 88                    dey                   ;big-endian order
  3140 00:8970: E8                    inx
  3141 00:8971: E0 04                 cpx #s_pfac
  3142 00:8973: D0 F4                 bne _0290050
  3143                        ;
  3144 00:8975: A9 00                 lda #0
  3145 00:8977: BB                    tyx
  3146                        ;
  3147 00:8978: 9D 2D 00     _0290060 sta facb,x            ;pad workspace
  3148 00:897B: CA                    dex
  3149 00:897C: 10 FA                 bpl _0290060
  3150                        ;
  3151                        ;
  3152                        ;	set up conversion parameters...
  3153                        ;
  3154 00:897E: 8D 33 00     _0290070 sta facc              ;initialize byte counter
  3155 00:8981: AC 40 00              ldy radix             ;radix index
  3156 00:8984: B9 25 8E              lda numstab,y         ;numerals in string
  3157 00:8987: 8D 34 00              sta facc+s_byte       ;set remaining numeral count
  3158 00:898A: B9 1D 8E              lda bitsntab,y        ;bits per numeral
  3159 00:898D: 8D 35 00              sta facc+s_word       ;set
  3160 00:8990: B9 21 8E              lda lzsttab,y         ;leading zero threshold
  3161 00:8993: 8D 36 00              sta facc+s_xword      ;set
  3162                        ;
  3163                        ;
  3164                        ;	generate conversion string...
  3165                        ;
  3166 00:8996: A9 00        _0290080 lda #0
  3167 00:8998: AC 35 00              ldy facc+s_word       ;bits per numeral
  3168                        ;
  3169 00:899B: A2 05        _0290090 ldx #s_sfac-1         ;workspace size
  3170 00:899D: 18                    clc                   ;avoid starting carry
  3171                        ;
  3172 00:899E: 3E 2D 00     _0290100 rol facb,x            ;shift out a bit...
  3173 00:89A1: CA                    dex                   ;from the operand or...
  3174 00:89A2: 10 FA                 bpl _0290100          ;BCD conversion result
  3175                        ;
  3176 00:89A4: 2A                    rol                   ;bit to .A
  3177 00:89A5: 88                    dey
  3178 00:89A6: D0 F3                 bne _0290090          ;more bits to grab
  3179                        ;
  3180 00:89A8: A8                    tay                   ;if numeral isn't zero...
  3181 00:89A9: D0 0D                 bne _0290110          ;skip leading zero tests
  3182                        ;
  3183 00:89AB: AE 34 00              ldx facc+s_byte       ;remaining numerals
  3184 00:89AE: EC 36 00              cpx facc+s_xword      ;leading zero threshold
  3185 00:89B1: 90 05                 bcc _0290110          ;below it, must convert
  3186                        ;
  3187 00:89B3: AE 33 00              ldx facc              ;processed byte count
  3188 00:89B6: F0 14                 beq _0290130          ;discard leading zero
  3189                        ;
  3190 00:89B8: C9 0A        _0290110 cmp #10               ;check range
  3191 00:89BA: 90 02                 bcc _0290120          ;is 0-9
  3192                        ;
  3193 00:89BC: 69 06                 adc #a_hexdec         ;apply hex adjust
  Sat Jan 22 2022 12:11                                                                                                Page 59


  3194                        ;
  3195 00:89BE: 69 30        _0290120 adc #'0'              ;change to ASCII
  3196 00:89C0: AC 3D 00              ldy ibufidx           ;string index
  3197 00:89C3: 99 00 02              sta ibuffer,y         ;save numeral in buffer
  3198 00:89C6: EE 3D 00              inc ibufidx           ;next buffer position
  3199 00:89C9: EE 33 00              inc facc              ;bytes=bytes+1
  3200                        ;
  3201 00:89CC: CE 34 00     _0290130 dec facc+s_byte       ;numerals=numerals-1
  3202 00:89CF: D0 C5                 bne _0290080          ;not done
  3203                        ;
  3204                        ;
  3205                        ;	terminate string & exit...
  3206                        ;
  3207 00:89D1: AE 3D 00              ldx ibufidx           ;printable string length
  3208 00:89D4: 9E 00 02              stz ibuffer,x         ;terminate string
  3209 00:89D7: 8A                    txa
  3210 00:89D8: A2 00                 ldx #<ibuffer         ;converted string
  3211 00:89DA: A0 02                 ldy #>ibuffer
  3212 00:89DC: 18                    clc                   ;all okay
  3213 00:89DD: 60                    rts
  3214                        ;
  3215                        ;================================================================================
  3216                        ;
  3217                        ;binhex: CONVERT BINARY BYTE TO HEX ASCII CHARS
  3218                        ;
  3219                        ;	--------------------------------------------
  3220                        ;	Preparatory Ops: .A: byte to convert
  3221                        ;
  3222                        ;	Returned Values: .A: MSN ASCII char
  3223                        ;	                 .X: LSN ASCII char
  3224                        ;	                 .Y: entry value
  3225                        ;	--------------------------------------------
  3226                        ;
  3227 00:89DE: 20 29 89     binhex   jsr bintonyb          ;generate binary values
  3228 00:89E1: 48                    pha                   ;save MSN
  3229 00:89E2: 8A                    txa
  3230 00:89E3: 20 E8 89              jsr _0300010          ;generate ASCII LSN
  3231 00:89E6: AA                    tax                   ;save
  3232 00:89E7: 68                    pla                   ;get input
  3233                        ;
  3234                        ;
  3235                        ;	convert nybble to hex ASCII equivalent...
  3236                        ;
  3237 00:89E8: C9 0A        _0300010 cmp #10
  3238 00:89EA: 90 02                 bcc _0300020          ;in decimal range
  3239                        ;
  3240 00:89EC: 69 66                 adc #k_hex            ;hex compensate
  3241                        ;
  3242 00:89EE: 49 30        _0300020 eor #'0'              ;finalize nybble
  3243 00:89F0: 60                    rts                   ;done
  3244                        ;
  3245                        ;================================================================================
  3246                        ;
  3247                        ;clrfaca: CLEAR FLOATING ACCUMULATOR A
  3248                        ;
  3249 00:89F1: 08           clrfaca  php
  3250                                 slonga
  Sat Jan 22 2022 12:11                                                                                                Page 60


+ 3250 00:89F2: C2 20                 .db $c2,$20
  3251 00:89F4: 9C 25 00              stz faca
  3252 00:89F7: 9C 27 00              stz faca+s_word
  3253 00:89FA: 28                    plp
  3254 00:89FB: 60                    rts
  3255                        ;
  3256                        ;================================================================================
  3257                        ;
  3258                        ;clrfacb: CLEAR FLOATING ACCUMULATOR B
  3259                        ;
  3260 00:89FC: 08           clrfacb  php
  3261                                 slonga
+ 3261 00:89FD: C2 20                 .db $c2,$20
  3262 00:89FF: 9C 2D 00              stz facb
  3263 00:8A02: 9C 2F 00              stz facb+s_word
  3264 00:8A05: 28                    plp
  3265 00:8A06: 60                    rts
  3266                        ;
  3267                        ;================================================================================
  3268                        ;
  3269                        ;facabcd: CONVERT FACA INTO BCD
  3270                        ;
  3271 00:8A07: A2 03        facabcd  ldx #s_pfac-1         ;primary accumulator size -1
  3272                        ;
  3273 00:8A09: BD 25 00     _1300010 lda faca,x            ;value to be converted
  3274 00:8A0C: 48                    pha                   ;preserve
  3275 00:8A0D: CA                    dex
  3276 00:8A0E: 10 F9                 bpl _1300010          ;next
  3277                        ;
  3278 00:8A10: A2 05                 ldx #s_sfac-1         ;workspace size
  3279                        ;
  3280 00:8A12: 9E 2D 00     _1300020 stz facb,x            ;clear final result
  3281 00:8A15: 9E 33 00              stz facc,x            ;clear scratchpad
  3282 00:8A18: CA                    dex
  3283 00:8A19: 10 F7                 bpl _1300020
  3284                        ;
  3285 00:8A1B: EE 38 00              inc facc+s_sfac-s_byte
  3286 00:8A1E: F8                    sed                   ;select decimal mode
  3287 00:8A1F: A0 1F                 ldy #m_bits-1         ;bits to convert -1
  3288                        ;
  3289 00:8A21: A2 03        _1300030 ldx #s_pfac-1         ;operand size
  3290 00:8A23: 18                    clc                   ;no carry at start
  3291                        ;
  3292 00:8A24: 7E 25 00     _1300040 ror faca,x            ;grab LS bit in operand
  3293 00:8A27: CA                    dex
  3294 00:8A28: 10 FA                 bpl _1300040
  3295                        ;
  3296 00:8A2A: 90 10                 bcc _1300060          ;LS bit clear
  3297                        ;
  3298 00:8A2C: 18                    clc
  3299 00:8A2D: A2 05                 ldx #s_sfac-1
  3300                        ;
  3301 00:8A2F: BD 2D 00     _1300050 lda facb,x            ;partial result
  3302 00:8A32: 7D 33 00              adc facc,x            ;scratchpad
  3303 00:8A35: 9D 2D 00              sta facb,x            ;new partial result
  3304 00:8A38: CA                    dex
  3305 00:8A39: 10 F4                 bpl _1300050
  Sat Jan 22 2022 12:11                                                                                                Page 61


  3306                        ;
  3307 00:8A3B: 18                    clc
  3308                        ;
  3309 00:8A3C: A2 05        _1300060 ldx #s_sfac-1
  3310                        ;
  3311 00:8A3E: BD 33 00     _1300070 lda facc,x            ;scratchpad
  3312 00:8A41: 7D 33 00              adc facc,x            ;double &...
  3313 00:8A44: 9D 33 00              sta facc,x            ;save
  3314 00:8A47: CA                    dex
  3315 00:8A48: 10 F4                 bpl _1300070
  3316                        ;
  3317 00:8A4A: 88                    dey
  3318 00:8A4B: 10 D4                 bpl _1300030          ;next operand bit
  3319                        ;
  3320 00:8A4D: D8                    cld
  3321 00:8A4E: A2 00                 ldx #0
  3322 00:8A50: A0 04                 ldy #s_pfac
  3323                        ;
  3324 00:8A52: 68           _1300080 pla                   ;operand
  3325 00:8A53: 9D 25 00              sta faca,x            ;restore
  3326 00:8A56: E8                    inx
  3327 00:8A57: 88                    dey
  3328 00:8A58: D0 F8                 bne _1300080          ;next
  3329                        ;
  3330 00:8A5A: 60                    rts
  3331                        ;
  3332                        ;================================================================================
  3333                        ;
  3334                        ;nybtobin: CONVERT ASCII NYBBLE TO BINARY
  3335                        ;
  3336 00:8A5B: 20 2C 8D     nybtobin jsr toupper           ;convert case if necessary
  3337 00:8A5E: 38                    sec
  3338 00:8A5F: E9 30                 sbc #'0'              ;change to binary
  3339 00:8A61: 90 08                 bcc _0310020          ;not a numeral - error
  3340                        ;
  3341 00:8A63: C9 0A                 cmp #10
  3342 00:8A65: 90 03                 bcc _0310010          ;numeral is 0-9
  3343                        ;
  3344 00:8A67: E9 07                 sbc #a_hexdec+1       ;10-15 --> A-F
  3345 00:8A69: 18                    clc                   ;no conversion error
  3346                        ;
  3347 00:8A6A: 60           _0310010 rts
  3348                        ;
  3349 00:8A6B: 38           _0310020 sec                   ;conversion error
  3350 00:8A6C: 60                    rts
  3351                        ;
  3352                        ;================================================================================
  3353                        ;
  3354                        ;calccnt: COMPUTE BYTE COUNT FROM ADDRESS RANGE
  3355                        ;
  3356 00:8A6D: 20 FC 89     calccnt  jsr clrfacb           ;clear accumulator
  3357                                 slonga
+ 3357 00:8A70: C2 20                 .db $c2,$20
  3358 00:8A72: 38                    sec
  3359 00:8A73: AD 22 00              lda addrb             ;ending address
  3360 00:8A76: ED 1F 00              sbc addra             ;starting address
  3361 00:8A79: 8D 2D 00              sta facb              ;byte count
  Sat Jan 22 2022 12:11                                                                                                Page 62


  3362                                 shorta
+ 3362 00:8A7C: E2 20                 .db $e2,$20
  3363 00:8A7E: AD 24 00              lda addrb+s_word      ;handle banks
  3364 00:8A81: ED 21 00              sbc addra+s_word
  3365 00:8A84: 8D 2F 00              sta facb+s_word
  3366 00:8A87: 60                    rts
  3367                        ;
  3368                        ;================================================================================
  3369                        ;
  3370                        ;clroper: CLEAR OPERAND
  3371                        ;
  3372 00:8A88: DA           clroper  phx
  3373 00:8A89: A2 02                 ldx #s_oper-1
  3374                        ;
  3375 00:8A8B: 9E 39 00     _0320010 stz operand,x
  3376 00:8A8E: CA                    dex
  3377 00:8A8F: 10 FA                 bpl _0320010
  3378                        ;
  3379 00:8A91: 9C 4B 00              stz eopsize
  3380 00:8A94: FA                    plx
  3381 00:8A95: 60                    rts
  3382                        ;
  3383                        ;================================================================================
  3384                        ;
  3385                        ;cpfwsup: FOWARD COPY MEMORY SETUP
  3386                        ;
  3387                        cpfwsup  longr
+ 3387 00:8A96: C2 30                 .db $c2,$30
  3388                                 ldxw opc_mvn          ;"move next" opcode
+ 3388 00:8A98: A2 54                 ldx #<opc_mvn
+ 3388 00:8A9A: 00                    .db >opc_mvn
  3389 00:8A9B: 80 05                 bra cpsup
  3390                        ;
  3391                        ;================================================================================
  3392                        ;
  3393                        ;cprvsup: REVERSE COPY MEMORY SETUP
  3394                        ;
  3395                        cprvsup  longr
+ 3395 00:8A9D: C2 30                 .db $c2,$30
  3396                                 ldxw opc_mvp          ;"move previous" opcode
+ 3396 00:8A9F: A2 44                 ldx #<opc_mvp
+ 3396 00:8AA1: 00                    .db >opc_mvp
  3397                        ;
  3398                        ;================================================================================
  3399                        ;
  3400                        ;cpsup: COPY MEMORY SETUP
  3401                        ;
  3402 00:8AA2: 48           cpsup    pha                   ;save banks
  3403 00:8AA3: 8A                    txa                   ;protect...
  3404 00:8AA4: EB                    xba                   ;opcode
  3405                                 shorta
+ 3405 00:8AA5: E2 20                 .db $e2,$20
  3406                                 ldxw cpcodeee-cpcode-1
+ 3406 00:8AA7: A2 08                 ldx #<cpcodeee-cpcode-1
+ 3406 00:8AA9: 00                    .db >cpcodeee-cpcode-1
  3407                        ;
  3408                        _1320010 ldalx cpcode          ;transfer copy code to...
  Sat Jan 22 2022 12:11                                                                                                Page 63


+ 3408 00:8AAA: BF                    .db $bf
+ 3408                                 _asm24_ cpcode
+ 3408 00:8AAB: E5 8D 00              .db <cpcode,>cpcode,cpcode>>16
  3409 00:8AAE: 9D 25 00              sta mcftwork,x        ;to workspace
  3410 00:8AB1: CA                    dex
  3411 00:8AB2: 10 F6                 bpl _1320010
  3412                        ;
  3413 00:8AB4: EB                    xba                   ;recover opcode &...
  3414 00:8AB5: 8D 26 00              sta mcftopc           ;set it
  3415                                 slonga
+ 3415 00:8AB8: C2 20                 .db $c2,$20
  3416 00:8ABA: 68                    pla                   ;get banks &...
  3417 00:8ABB: 8D 27 00              sta mcftbnk           ;set them
  3418 00:8ABE: 60                    rts
  3419                        ;
  3420                        ;================================================================================
  3421                        ;
  3422                        ;decdcnt: DECREMENT DUMP COUNT
  3423                        ;
  3424                        ;	-------------------------------------------
  3425                        ;	Preparatory Ops: bytes to process in FACB
  3426                        ;	                 bytes processed in CHARCNT
  3427                        ;
  3428                        ;	Returned Values: .A: used
  3429                        ;	                 .X: entry value
  3430                        ;	                 .Y: entry value
  3431                        ;	                 .C: 1 = count = zero
  3432                        ;	-------------------------------------------
  3433                        ;
  3434                        decdcnt  shorta
+ 3434 00:8ABF: E2 20                 .db $e2,$20
  3435 00:8AC1: A9 00                 lda #0
  3436 00:8AC3: EB                    xba                   ;clear .B
  3437 00:8AC4: AD 2F 00              lda facb+s_word       ;count MSW
  3438                                 slonga
+ 3438 00:8AC7: C2 20                 .db $c2,$20
  3439 00:8AC9: 38                    sec
  3440 00:8ACA: 0D 2D 00              ora facb              ;count LSW
  3441 00:8ACD: F0 18                 beq _0330020          ;zero, just exit
  3442                        ;
  3443 00:8ACF: AD 2D 00              lda facb
  3444 00:8AD2: ED 42 00              sbc charcnt           ;bytes processed
  3445 00:8AD5: 8D 2D 00              sta facb
  3446                                 shorta
+ 3446 00:8AD8: E2 20                 .db $e2,$20
  3447 00:8ADA: AD 2F 00              lda facb+s_word
  3448 00:8ADD: E9 00                 sbc #0                ;handle borrow
  3449 00:8ADF: 90 05                 bcc _0330010          ;underflow
  3450                        ;
  3451 00:8AE1: 8D 2F 00              sta facb+s_word
  3452 00:8AE4: 18                    clc                   ;count > 0
  3453 00:8AE5: 60                    rts
  3454                        ;
  3455 00:8AE6: 38           _0330010 sec
  3456                        ;
  3457                        _0330020 shorta
+ 3457 00:8AE7: E2 20                 .db $e2,$20
  Sat Jan 22 2022 12:11                                                                                                Page 64


  3458 00:8AE9: 60                    rts
  3459                        ;
  3460                        ;================================================================================
  3461                        ;
  3462                        ;enddest: GET 2ND & 3RD ADDRESSES FOR COMPARE & TRANSFER
  3463                        ;
  3464 00:8AEA: 20 34 8B     enddest  jsr facasize          ;check start...
  3465 00:8AED: C9 04                 cmp #s_dword          ;for range
  3466 00:8AEF: B0 1E                 bcs _0340010          ;out of range - error
  3467                        ;
  3468 00:8AF1: 20 10 8B              jsr facaddra          ;store start
  3469 00:8AF4: 20 46 8B              jsr getparm           ;get end
  3470 00:8AF7: B0 16                 bcs _0340010          ;not entered - error
  3471                        ;
  3472 00:8AF9: 20 34 8B              jsr facasize          ;check end...
  3473 00:8AFC: C9 04                 cmp #s_dword          ;for range
  3474 00:8AFE: B0 0F                 bcs _0340010          ;out of range - error
  3475                        ;
  3476 00:8B00: 20 1C 8B              jsr facaddrb          ;store end
  3477 00:8B03: 20 46 8B              jsr getparm           ;get destination
  3478 00:8B06: B0 07                 bcs _0340010          ;not entered - error
  3479                        ;
  3480 00:8B08: 20 34 8B              jsr facasize          ;check destination...
  3481 00:8B0B: C9 04                 cmp #s_dword          ;for range
  3482 00:8B0D: 90 19                 bcc facaoper          ;store dest address
  3483                        ;
  3484 00:8B0F: 60           _0340010 rts                   ;exit w/error
  3485                        ;
  3486                        ;================================================================================
  3487                        ;
  3488                        ;facaddra: COPY FACA TO ADDRA
  3489                        ;
  3490 00:8B10: A2 02        facaddra ldx #s_xword-1
  3491                        ;
  3492 00:8B12: BD 25 00     _0350010 lda faca,x
  3493 00:8B15: 9D 1F 00              sta addra,x
  3494 00:8B18: CA                    dex
  3495 00:8B19: 10 F7                 bpl _0350010
  3496                        ;
  3497 00:8B1B: 60                    rts
  3498                        ;
  3499                        ;================================================================================
  3500                        ;
  3501                        ;facaddrb: COPY FACA TO ADDRB
  3502                        ;
  3503 00:8B1C: A2 02        facaddrb ldx #s_xword-1
  3504                        ;
  3505 00:8B1E: BD 25 00     _1350010 lda faca,x
  3506 00:8B21: 9D 22 00              sta addrb,x
  3507 00:8B24: CA                    dex
  3508 00:8B25: 10 F7                 bpl _1350010
  3509                        ;
  3510 00:8B27: 60                    rts
  3511                        ;
  3512                        ;================================================================================
  3513                        ;
  3514                        ;facaoper: COPY FACA TO OPERAND
  Sat Jan 22 2022 12:11                                                                                                Page 65


  3515                        ;
  3516 00:8B28: A2 02        facaoper ldx #s_oper-1
  3517                        ;
  3518 00:8B2A: BD 25 00     _0360010 lda faca,x
  3519 00:8B2D: 9D 39 00              sta operand,x
  3520 00:8B30: CA                    dex
  3521 00:8B31: 10 F7                 bpl _0360010
  3522                        ;
  3523 00:8B33: 60                    rts
  3524                        ;
  3525                        ;================================================================================
  3526                        ;
  3527                        ;facasize: REPORT OPERAND SIZE IN FACA
  3528                        ;
  3529                        ;	------------------------------------------
  3530                        ;	Preparatory Ops: operand in FACA
  3531                        ;
  3532                        ;	Returned Values: .A: s_byte  (1)
  3533                        ;	                     s_word  (2)
  3534                        ;	                     s_xword (3)
  3535                        ;	                     s_dword (4)
  3536                        ;
  3537                        ;	Notes: 1) This function will always report
  3538                        ;	          a non-zero result.
  3539                        ;	------------------------------------------
  3540                        ;
  3541                        facasize shortr
+ 3541 00:8B34: E2 30                 .db $e2,$30
  3542 00:8B36: A2 03                 ldx #s_dword-1
  3543                        ;
  3544 00:8B38: BD 25 00     _0370010 lda faca,x            ;get byte
  3545 00:8B3B: D0 03                 bne _0370020          ;done
  3546                        ;
  3547 00:8B3D: CA                    dex
  3548 00:8B3E: D0 F8                 bne _0370010          ;next byte
  3549                        ;
  3550 00:8B40: E8           _0370020 inx                   ;count=index+1
  3551 00:8B41: 8A                    txa
  3552 00:8B42: 60                    rts
  3553                        ;
  3554                        ;================================================================================
  3555                        ;
  3556                        ;getparm: GET A PARAMETER
  3557                        ;
  3558                        ;	-------------------------------------------------
  3559                        ;	Preparatory Ops: null-terminated input in IBUFFER
  3560                        ;
  3561                        ;	Returned Values: .A: chars in converted parameter
  3562                        ;	                 .X: used
  3563                        ;	                 .Y: entry value
  3564                        ;	                 .C: 1 = no parameter entered
  3565                        ;	-------------------------------------------------
  3566                        ;
  3567 00:8B43: CE 3D 00     getparmr dec ibufidx           ;reread previous char
  3568                        ;
  3569 00:8B46: 5A           getparm  phy                   ;preserve
  3570 00:8B47: 20 56 88              jsr ascbin            ;convert parameter to binary
  Sat Jan 22 2022 12:11                                                                                                Page 66


  3571 00:8B4A: B0 1F                 bcs _0380040          ;conversion error
  3572                        ;
  3573 00:8B4C: 20 55 8C              jsr getcharr          ;reread last char
  3574 00:8B4F: D0 0A                 bne _0380010          ;not end-of-input
  3575                        ;
  3576 00:8B51: CE 3D 00              dec ibufidx           ;reindex to terminator
  3577 00:8B54: AD 42 00              lda charcnt           ;get chars processed so far
  3578 00:8B57: F0 0C                 beq _0380030          ;none
  3579                        ;
  3580 00:8B59: D0 08                 bne _0380020          ;some
  3581                        ;
  3582 00:8B5B: C9 20        _0380010 cmp #a_blank          ;recognized delimiter
  3583 00:8B5D: F0 04                 beq _0380020          ;end of parameter
  3584                        ;
  3585 00:8B5F: C9 2C                 cmp #','              ;recognized delimiter
  3586 00:8B61: D0 08                 bne _0380040          ;unknown delimter
  3587                        ;
  3588 00:8B63: 18           _0380020 clc
  3589 00:8B64: 24                    .db bitzp           ;skip SEC below
  3590                        ;
  3591 00:8B65: 38           _0380030 sec
  3592 00:8B66: 7A                    ply                   ;restore
  3593 00:8B67: AD 42 00              lda charcnt           ;get count
  3594 00:8B6A: 60                    rts                   ;done
  3595                        ;
  3596                        _0380040 ;.rept 3               ;clean up stack
  3597 00:8B6B: 68                      pla
  3598 00:8B6C: 68                      pla
  3599 00:8B6D: 68                      pla
  3600                                 ;.endr
  3601 00:8B6E: 4C 3F 81              jmp monerr            ;abort w/error
  3602                        ;
  3603                        ;================================================================================
  3604                        ;
  3605                        ;nxtaddra: TEST & INCREMENT WORKING ADDRESS 'A'
  3606                        ;
  3607                        ;	--------------------------------------------------
  3608                        ;	Calling syntax: JSR NXTADDRA
  3609                        ;
  3610                        ;	Exit registers: .A: used
  3611                        ;	                .B: used
  3612                        ;	                .X: entry value
  3613                        ;	                .Y: entry value
  3614                        ;	                DB: entry value
  3615                        ;	                DP: entry value
  3616                        ;	                PB: entry value
  3617                        ;	                SR: NVmxDIZC
  3618                        ;	                    ||||||||
  3619                        ;	                    |||||||+---> 0: ADDRA < ADDRB
  3620                        ;	                    |||||||      1: ADDRA >= ADDRB
  3621                        ;	                    ||||||+----> undefined
  3622                        ;	                    |||+++-----> entry value
  3623                        ;	                    ||+--------> 1
  3624                        ;	                    ++---------> undefined
  3625                        ;	--------------------------------------------------
  3626                        ;
  3627                        nxtaddra shorta
  Sat Jan 22 2022 12:11                                                                                                Page 67


+ 3627 00:8B71: E2 20                 .db $e2,$20
  3628 00:8B73: AD 21 00              lda addra+s_word      ;bits 16-23
  3629 00:8B76: CD 24 00              cmp addrb+s_word
  3630 00:8B79: 90 11                 bcc incaddra          ;increment
  3631                        ;
  3632 00:8B7B: D0 0C                 bne _0390010          ;don't increment
  3633                        ;
  3634                                 slonga
+ 3634 00:8B7D: C2 20                 .db $c2,$20
  3635 00:8B7F: AD 1F 00              lda addra             ;bits 0-15
  3636 00:8B82: CD 22 00              cmp addrb             ;condition flags
  3637                                 shorta
+ 3637 00:8B85: E2 20                 .db $e2,$20
  3638 00:8B87: 90 03                 bcc incaddra          ;increment
  3639                        ;
  3640 00:8B89: 60           _0390010 rts
  3641                        ;
  3642                        ;================================================================================
  3643                        ;
  3644                        ;getbyte: GET A BYTE FROM MEMORY
  3645                        ;
  3646                        getbyte  ldail addra           ;get a byte
+ 3646 00:8B8A: A7 1F                 .db $a7,addra
  3647                        ;
  3648                        ;================================================================================
  3649                        ;
  3650                        ;incaddra: INCREMENT WORKING ADDRESS 'A'
  3651                        ;
  3652                        ;	--------------------------------------------------
  3653                        ;	Calling syntax: JSR INCADDRA
  3654                        ;
  3655                        ;	Exit registers: .A: entry value
  3656                        ;	                .B: entry value
  3657                        ;	                .X: entry value
  3658                        ;	                .Y: entry value
  3659                        ;	                DB: entry value
  3660                        ;	                DP: entry value
  3661                        ;	                PB: entry value
  3662                        ;	                SR: NVmxDIZC
  3663                        ;	                    ||||||||
  3664                        ;	                    ++++++++---> entry value
  3665                        ;	--------------------------------------------------
  3666                        ;
  3667 00:8B8C: 08           incaddra php
  3668                                 slonga
+ 3668 00:8B8D: C2 20                 .db $c2,$20
  3669 00:8B8F: EE 1F 00              inc addra             ;bump bits 0-15
  3670 00:8B92: D0 05                 bne _0400010
  3671                        ;
  3672                                 shorta
+ 3672 00:8B94: E2 20                 .db $e2,$20
  3673 00:8B96: EE 21 00              inc addra+s_word      ;bump bits 16-23
  3674                        ;
  3675 00:8B99: 28           _0400010 plp
  3676 00:8B9A: 60                    rts
  3677                        ;
  3678                        ;================================================================================
  Sat Jan 22 2022 12:11                                                                                                Page 68


  3679                        ;
  3680                        ;incoper: INCREMENT OPERAND ADDRESS
  3681                        ;
  3682 00:8B9B: 18           incoper  clc
  3683 00:8B9C: 08                    php
  3684                                 longr
+ 3684 00:8B9D: C2 30                 .db $c2,$30
  3685 00:8B9F: 48                    pha
  3686 00:8BA0: EE 39 00              inc operand           ;handle base address
  3687 00:8BA3: D0 07                 bne _0410010
  3688                        ;
  3689                                 shorta
+ 3689 00:8BA5: E2 20                 .db $e2,$20
  3690 00:8BA7: EE 3B 00              inc operand+s_word    ;handle bank
  3691                                 slonga
+ 3691 00:8BAA: C2 20                 .db $c2,$20
  3692                        ;
  3693 00:8BAC: 68           _0410010 pla
  3694 00:8BAD: 28                    plp
  3695 00:8BAE: 60                    rts
  3696                        ;
  3697                        ;================================================================================
  3698                        ;
  3699                        ;instdata: GET INSTRUCTION SIZE & ADDRESSING MODE DATA
  3700                        ;
  3701                        ;	----------------------------------
  3702                        ;	Preparatory Ops: .X: 65C816 opcode
  3703                        ;
  3704                        ;	Returned Values: .A: mode flags
  3705                        ;	                 .X: operand size
  3706                        ;	                 .Y: mode index
  3707                        ;	----------------------------------
  3708                        ;
  3709                        instdata shortr
+ 3709 00:8BAF: E2 30                 .db $e2,$30
  3710 00:8BB1: BD EE 8F              lda mnetabam,x        ;addressing mode data
  3711 00:8BB4: 48                    pha                   ;save mode flag bits
  3712 00:8BB5: 48                    pha                   ;save size data
  3713 00:8BB6: 29 0F                 and #amodmask         ;extract mode index &...
  3714 00:8BB8: A8                    tay                   ;save
  3715 00:8BB9: 68                    pla                   ;recover data
  3716 00:8BBA: 29 30                 and #opsmask          ;mask mode fields &...
  3717                        ;         .rept n_opslsr        ;extract operand size
  3718 00:8BBC: 4A                      lsr
  3719 00:8BBD: 4A                      lsr
  3720 00:8BBE: 4A                      lsr
  3721 00:8BBF: 4A                      lsr
  3722                        ;         .endr
  3723 00:8BC0: AA                    tax                   ;operand size
  3724 00:8BC1: 68                    pla                   ;recover mode flags
  3725 00:8BC2: 29 C0                 and #vopsmask         ;discard mode & size fields
  3726 00:8BC4: 60                    rts
  3727                        ;
  3728                        ;================================================================================
  3729                        ;
  3730                        ;offtarg: CONVERT BRANCH OFFSET TO TARGET ADDRESS
  3731                        ;
  Sat Jan 22 2022 12:11                                                                                                Page 69


  3732                        ;	-----------------------------------------------
  3733                        ;	Preparatory Ops:    ADDRA: base address
  3734                        ;	                 INSTSIZE: instruction size
  3735                        ;	                  OPERAND: offset
  3736                        ;
  3737                        ;	Returned Values:  OPERAND: target address (L/H)
  3738                        ;	                       .A: used
  3739                        ;	                       .X: entry value
  3740                        ;                              .Y: entry value
  3741                        ;	-----------------------------------------------
  3742                        ;
  3743                        offtarg  slonga
+ 3743 00:8BC5: C2 20                 .db $c2,$20
  3744 00:8BC7: AD 1F 00              lda addra             ;base address
  3745                                 shorta
+ 3745 00:8BCA: E2 20                 .db $e2,$20
  3746 00:8BCC: 4E 44 00              lsr instsize          ;bit 0 will be set if...
  3747 00:8BCF: B0 08                 bcs _0420010          ;a long branch
  3748                        ;
  3749 00:8BD1: 2C 39 00              bit operand           ;short forward or backward?
  3750 00:8BD4: 10 03                 bpl _0420010          ;forward
  3751                        ;
  3752 00:8BD6: EB                    xba                   ;expose address MSB
  3753 00:8BD7: 3A                    dea                   ;back a page
  3754 00:8BD8: EB                    xba                   ;expose address LSB
  3755                        ;
  3756                        _0420010 slonga
+ 3756 00:8BD9: C2 20                 .db $c2,$20
  3757 00:8BDB: 18                    clc
  3758 00:8BDC: 6D 39 00              adc operand           ;calculate target address
  3759 00:8BDF: 8D 39 00              sta operand           ;new operand
  3760                                 shorta
+ 3760 00:8BE2: E2 20                 .db $e2,$20
  3761 00:8BE4: A9 03                 lda #s_xword
  3762 00:8BE6: 8D 44 00              sta instsize          ;effective instruction size
  3763 00:8BE9: 60                    rts
  3764                        ;
  3765                        ;================================================================================
  3766                        ;
  3767                        ;setxaddr: SET EXECUTION ADDRESS
  3768                        ;
  3769 00:8BEA: B0 17        setxaddr bcs _0430010          ;no address given
  3770                        ;
  3771 00:8BEC: 20 34 8B              jsr facasize          ;check address...
  3772 00:8BEF: C9 04                 cmp #s_dword          ;range
  3773 00:8BF1: B0 11                 bcs _0430020          ;out of range
  3774                        ;
  3775                                 slonga
+ 3775 00:8BF3: C2 20                 .db $c2,$20
  3776 00:8BF5: AD 25 00              lda faca              ;execution address
  3777 00:8BF8: 8D 11 00              sta reg_pcx           ;set new PC value
  3778                                 shorta
+ 3778 00:8BFB: E2 20                 .db $e2,$20
  3779 00:8BFD: AD 27 00              lda faca+s_word
  3780 00:8C00: 8D 10 00              sta reg_pbx           ;set new PB value
  3781                        ;
  3782 00:8C03: 18           _0430010 clc                   ;no error
  Sat Jan 22 2022 12:11                                                                                                Page 70


  3783                        ;
  3784 00:8C04: 60           _0430020 rts
  3785                        ;
  3786                        ;================================================================================
  3787                        ;
  3788                        ;targoff: CONVERT BRANCH TARGET ADDRESS TO BRANCH OFFSET
  3789                        ;
  3790                        ;	-------------------------------------------------
  3791                        ;	Preparatory Ops:   ADDRA: instruction address
  3792                        ;	                 OPERAND: target address
  3793                        ;
  3794                        ;	Returned Values: OPERAND: computed offset
  3795                        ;	                      .A: effective operand size
  3796                        ;	                      .X: entry value
  3797                        ;                             .Y: entry value
  3798                        ;	                      .C: 1 = branch out of range
  3799                        ;
  3800                        ;	Execution notes: ADDRB is set to the branch base
  3801                        ;	                 address.
  3802                        ;	-------------------------------------------------
  3803                        ;
  3804 00:8C05: 9C 45 00     targoff  stz instsize+s_byte   ;always zero
  3805 00:8C08: AD 44 00              lda instsize          ;instruction size will tell...
  3806 00:8C0B: 4A                    lsr                   ;if long or short branch
  3807                        ;
  3808                        ;-------------------------------------------------
  3809             00000038   _btype   .equ facc+5               ;branch type flag
  3810                        ;-------------------------------------------------
  3811                        ;
  3812 00:8C0C: 6E 38 00              ror _btype            ;set branch type...
  3813                        ;
  3814                        ;	x0000000
  3815                        ;	|
  3816                        ;	+----------> 0: short
  3817                        ;	             1: long
  3818                        ;
  3819                                 slonga
+ 3819 00:8C0F: C2 20                 .db $c2,$20
  3820 00:8C11: 18                    clc
  3821 00:8C12: AD 1F 00              lda addra             ;instruction address
  3822 00:8C15: 6D 44 00              adc instsize          ;instruction size
  3823 00:8C18: 8D 22 00              sta addrb             ;base address
  3824 00:8C1B: 38                    sec
  3825 00:8C1C: AD 39 00              lda operand           ;target address
  3826 00:8C1F: ED 22 00              sbc addrb             ;base address
  3827 00:8C22: 8D 39 00              sta operand           ;offset
  3828                                 shorta
+ 3828 00:8C25: E2 20                 .db $e2,$20
  3829 00:8C27: 90 16                 bcc _0440040          ;backward branch
  3830                        ;
  3831 00:8C29: 2C 38 00              bit _btype            ;check branch range
  3832 00:8C2C: 30 0A                 bmi _0440020          ;long
  3833                        ;
  3834                        ;
  3835                        ;	process short forward branch...
  3836                        ;
  3837 00:8C2E: EB                    xba                   ;offset MSB should be zero
  Sat Jan 22 2022 12:11                                                                                                Page 71


  3838 00:8C2F: D0 22                 bne _0440060          ;it isn't - out of range
  3839                        ;
  3840 00:8C31: EB                    xba                   ;offset LSB should be $00-$7F
  3841 00:8C32: 30 1F                 bmi _0440060          ;it isn't - out of range
  3842                        ;
  3843 00:8C34: A9 01        _0440010 lda #s_byte           ;final instruction size
  3844 00:8C36: 18                    clc                   ;branch in range
  3845 00:8C37: 60                    rts
  3846                        ;
  3847                        ;
  3848                        ;	process long forward branch...
  3849                        ;
  3850 00:8C38: EB           _0440020 xba                   ;offset MSB should be positive
  3851 00:8C39: 30 18                 bmi _0440060          ;it isn't - branch out of range
  3852                        ;
  3853 00:8C3B: A9 02        _0440030 lda #s_word
  3854 00:8C3D: 18                    clc
  3855 00:8C3E: 60                    rts
  3856                        ;
  3857                        ;
  3858                        ;	process backward branch...
  3859                        ;
  3860 00:8C3F: 2C 38 00     _0440040 bit _btype            ;long or short?
  3861 00:8C42: 30 0C                 bmi _0440050          ;long
  3862                        ;
  3863                        ;
  3864                        ;	process short backward branch...
  3865                        ;
  3866 00:8C44: EB                    xba                   ;offset MSB should be negative
  3867 00:8C45: 10 0C                 bpl _0440060          ;it isn't - out of range
  3868                        ;
  3869 00:8C47: 49 FF                 eor #%11111111        ;complement offset MSB 2s
  3870 00:8C49: D0 08                 bne _0440060          ;out of range
  3871                        ;
  3872 00:8C4B: EB                    xba                   ;offset LSB should be $80-$FF
  3873 00:8C4C: 30 E6                 bmi _0440010          ;it is - branch in range
  3874                        ;
  3875 00:8C4E: 80 03                 bra _0440060          ;branch out of range
  3876                        ;
  3877                        ;
  3878                        ;	process long backward branch...
  3879                        ;
  3880 00:8C50: EB           _0440050 xba                   ;offset MSB should be negative
  3881 00:8C51: 30 E8                 bmi _0440030          ;it is - branch in range
  3882                        ;
  3883 00:8C53: 38           _0440060 sec                   ;range error
  3884 00:8C54: 60                    rts
  3885                        ;
  3886                        ;================================================================================
  3887                        ;
  3888                        ;getcharr: GET PREVIOUS INPUT BUFFER CHARACTER
  3889                        ;
  3890 00:8C55: CE 3D 00     getcharr dec ibufidx           ;move back a char
  3891                        ;
  3892                        ;================================================================================
  3893                        ;
  3894                        ;getchar: GET A CHARACTER FROM INPUT BUFFER
  Sat Jan 22 2022 12:11                                                                                                Page 72


  3895                        ;
  3896                        ;	----------------------------------------------
  3897                        ;	Preparatory Ops : none
  3898                        ;
  3899                        ;	Register Returns: .A: character or <NUL>
  3900                        ;	                  .B: entry value
  3901                        ;	                  .X: entry value
  3902                        ;	                  .Y: entry value
  3903                        ;
  3904                        ;	MPU Flags: NVmxDIZC
  3905                        ;	           ||||||||
  3906                        ;	           |||||||+---> entry value
  3907                        ;	           ||||||+----> 1: <NUL> gotten
  3908                        ;	           |||||+-----> entry value
  3909                        ;	           ||||+------> entry value
  3910                        ;	           |||+-------> entry value
  3911                        ;	           ||+--------> entry value
  3912                        ;	           |+---------> not defined
  3913                        ;	           +----------> not defined
  3914                        ;	----------------------------------------------
  3915                        ;
  3916 00:8C58: DA           getchar  phx
  3917 00:8C59: 5A                    phy
  3918 00:8C5A: 08                    php                   ;save register sizes
  3919                                 shortr                ;force 8 bits
+ 3919 00:8C5B: E2 30                 .db $e2,$30
  3920 00:8C5D: AE 3D 00              ldx ibufidx           ;buffer index
  3921 00:8C60: BD 00 02              lda ibuffer,x         ;get char
  3922 00:8C63: EE 3D 00              inc ibufidx           ;bump index
  3923 00:8C66: 28                    plp                   ;restore register widths
  3924 00:8C67: 7A                    ply
  3925 00:8C68: FA                    plx
  3926 00:8C69: EB                    xba                   ;condition...
  3927 00:8C6A: EB                    xba                   ;.Z
  3928 00:8C6B: 60                    rts
  3929                        ;
  3930                        ;================================================================================
  3931                        ;
  3932                        ;getpat: GET PATTERN FOR MEMORY CHANGE or SEARCH
  3933                        ;
  3934                        ;	-----------------------------------------------------
  3935                        ;	Preparatory Ops: Null-terminated pattern in IBUFFER.
  3936                        ;
  3937                        ;	Returned Values: .A: used
  3938                        ;	                 .X: used
  3939                        ;	                 .Y: pattern length if entered
  3940                        ;	                 .C: 0 = pattern valid
  3941                        ;	                     1 = exception:
  3942                        ;	                 .N  0 = no pattern entered
  3943                        ;	                     1 = evaluation error
  3944                        ;
  3945                        ;	Notes: 1) If pattern is preceded by "'" the following
  3946                        ;	          characters are interpreted as ASCII.
  3947                        ;	       2) A maximum of 32 bytes or characters is
  3948                        ;	          accepted.  Excess input will be discarded.
  3949                        ;	-----------------------------------------------------
  3950                        ;
  Sat Jan 22 2022 12:11                                                                                                Page 73


  3951 00:8C6C: 9C 49 00     getpat   stz status            ;clear pattern type indicator
  3952 00:8C6F: A0 00                 ldy #0                ;pattern index
  3953 00:8C71: 20 55 8C              jsr getcharr          ;get last char
  3954 00:8C74: F0 42                 beq _0450070          ;EOS
  3955                        ;
  3956 00:8C76: AE 3D 00              ldx ibufidx           ;current buffer index
  3957 00:8C79: 20 BF 8C              jsr getcharw          ;get next
  3958 00:8C7C: F0 3A                 beq _0450070          ;EOS
  3959                        ;
  3960 00:8C7E: C9 27                 cmp #$27	       ; single quote
  3961 00:8C80: D0 05                 bne _0450010          ;not ASCII input
  3962                        ;
  3963 00:8C82: 6E 49 00              ror status            ;condition flag
  3964 00:8C85: 80 14                 bra _0450030          ;balance of input is ASCII
  3965                        ;
  3966 00:8C87: 8E 3D 00     _0450010 stx ibufidx           ;restore buffer index
  3967                        ;
  3968 00:8C8A: 20 46 8B     _0450020 jsr getparm           ;evaluate numeric pattern
  3969 00:8C8D: B0 23                 bcs _0450060          ;done w/pattern
  3970                        ;
  3971 00:8C8F: 20 34 8B              jsr facasize          ;size
  3972 00:8C92: C9 02                 cmp #s_word
  3973 00:8C94: B0 22                 bcs _0450070          ;not a byte - error
  3974                        ;
  3975 00:8C96: AD 25 00              lda faca              ;get byte &...
  3976 00:8C99: 80 05                 bra _0450040          ;store
  3977                        ;
  3978 00:8C9B: 20 58 8C     _0450030 jsr getchar           ;get ASCII char
  3979 00:8C9E: F0 12                 beq _0450060          ;done w/pattern
  3980                        ;
  3981 00:8CA0: C0 20        _0450040 cpy #s_auxbuf         ;pattern buffer full?
  3982 00:8CA2: F0 0B                 beq _0450050          ;yes
  3983                        ;
  3984 00:8CA4: 99 46 02              sta auxbuf,y          ;store pattern
  3985 00:8CA7: C8                    iny
  3986 00:8CA8: 2C 49 00              bit status
  3987 00:8CAB: 10 DD                 bpl _0450020          ;get next numeric value
  3988                        ;
  3989 00:8CAD: 80 EC                 bra _0450030          ;get next ASCII char
  3990                        ;
  3991 00:8CAF: 20 34 88     _0450050 jsr alert             ;excess input
  3992                        ;
  3993 00:8CB2: 8C 3C 00     _0450060 sty auxbufix          ;save pattern size
  3994 00:8CB5: 98                    tya                   ;condition .Z
  3995 00:8CB6: 18                    clc                   ;pattern valid
  3996 00:8CB7: 60                    rts
  3997                        ;
  3998                        ;
  3999                        ;	no pattern entered...
  4000                        ;
  4001 00:8CB8: C2 80        _0450070 rep #%10000000
  4002 00:8CBA: 38                    sec
  4003 00:8CBB: 60                    rts
  4004                        ;
  4005                        ;
  4006                        ;	evaluation error...
  4007                        ;
  Sat Jan 22 2022 12:11                                                                                                Page 74


  4008 00:8CBC: E2 81        _0450080 sep #%10000001
  4009 00:8CBE: 60                    rts
  4010                        ;
  4011                        ;================================================================================
  4012                        ;
  4013                        ;getcharw: GET FROM INPUT BUFFER, DISCARDING WHITESPACE
  4014                        ;
  4015                        ;	--------------------------------------------------
  4016                        ;	Preparatory Ops: Null-terminated input in IBUFFER.
  4017                        ;
  4018                        ;	Returned Values: .A: char or null
  4019                        ;	                 .X: entry value
  4020                        ;	                 .Y: entry value
  4021                        ;	                 .Z: 1 = null terminator detected
  4022                        ;
  4023                        ;	Notes: Whitespace is defined as a blank ($20) or a
  4024                        ;	       horizontal tab ($09).
  4025                        ;	--------------------------------------------------
  4026                        ;
  4027 00:8CBF: 20 58 8C     getcharw jsr getchar           ;get from buffer
  4028 00:8CC2: F0 08                 beq _0460010          ;EOI
  4029                        ;
  4030 00:8CC4: C9 20                 cmp #a_blank
  4031 00:8CC6: F0 F7                 beq getcharw          ;discard whitespace
  4032                        ;
  4033 00:8CC8: C9 09                 cmp #a_ht             ;also whitespace
  4034 00:8CCA: F0 F3                 beq getcharw
  4035                        ;
  4036 00:8CCC: 18           _0460010 clc
  4037 00:8CCD: 60                    rts
  4038                        ;
  4039                        ;================================================================================
  4040                        ;
  4041                        ;input: INTERACTIVE INPUT FROM CONSOLE CHANNEL
  4042                        ;
  4043                        ;	-----------------------------------------------------------
  4044                        ;	Preparatory Ops: Zero IBUFIDX or load IBUFFER with default
  4045                        ;	                 input & set IBUFIDX to the number of chars
  4046                        ;	                 loaded into the buffer.
  4047                        ;
  4048                        ;	Returned Values: .A: used
  4049                        ;	                 .X: characters entered
  4050                        ;	                 .Y: used
  4051                        ;
  4052                        ;	Example: STZ IBUFIDX
  4053                        ;	         JSR INPUT
  4054                        ;
  4055                        ;	Notes: Input is collected in IBUFFER & is null-terminated.
  4056                        ;	       IBUFIDX is reset to zero upon exit.
  4057                        ;	-----------------------------------------------------------
  4058                        ;
  4059 00:8CCE: AE 3D 00     input    ldx ibufidx
  4060 00:8CD1: 9E 00 02              stz ibuffer,x         ;be sure buffer is terminated
  4061 00:8CD4: 20 AD 87              jsr dpyibuf           ;print default input if any
  4062                        
  4063 00:8CD7: AE 3D 00              ldx ibufidx           ;starting buffer index
  4064                        ;
  Sat Jan 22 2022 12:11                                                                                                Page 75


  4065                        ;
  4066                        ;	main input loop...
  4067                        ;
  4068 00:8CDA: 20 86 FF     _0470010 jsr CURSOR
  4069 00:8CDD: 20 74 FF     _047001A jsr getcha            ;poll for input
  4070 00:8CE0: 90 02                 bcc _0470020          ;got something
  4071                        ;
  4072                        ;         wai                   ;wait 'til any IRQ &...
  4073 00:8CE2: 80 F9                 bra _047001A          ;try again
  4074                        ;
  4075 00:8CE4: C9 7F        _0470020 cmp #a_del            ;above ASCII range?
  4076 00:8CE6: B0 F5                 bcs _047001A          ;yes, ignore
  4077                        
  4078 00:8CE8: 20 89 FF              jsr UNCURSOR
  4079                        ;
  4080 00:8CEB: C9 09                 cmp #a_ht             ;horizontal tab?
  4081 00:8CED: D0 02                 bne _0470030          ;no
  4082                        ;
  4083 00:8CEF: A9 20                 lda #a_blank          ;replace <HT> w/blank
  4084                        ;
  4085 00:8CF1: C9 20        _0470030 cmp #a_blank          ;control char?
  4086 00:8CF3: 90 10                 bcc _0470050          ;yes
  4087                        ;
  4088                        ;
  4089                        ;	process QWERTY character...
  4090                        ;
  4091 00:8CF5: E0 45                 cpx #s_ibuf           ;room in buffer?
  4092 00:8CF7: B0 05                 bcs _0470040          ;no
  4093                        ;
  4094 00:8CF9: 9D 00 02              sta ibuffer,x         ;store char
  4095 00:8CFC: E8                    inx                   ;bump index
  4096 00:8CFD: 2C                    .db bitabs          ;echo char
  4097                        ;
  4098 00:8CFE: A9 07        _0470040 lda #a_bel            ;alert user
  4099 00:8D00: 20 71 FF              jsr putcha
  4100 00:8D03: 80 D5                 bra _0470010          ;get some more
  4101                        ;
  4102                        ;
  4103                        ;	process carriage return...
  4104                        ;
  4105 00:8D05: C9 0D        _0470050 cmp #a_cr             ;carriage return?
  4106 00:8D07: D0 07                 bne _0470060          ;no
  4107                        ;
  4108                        ;         phx                   ;protect input count
  4109                        ;         pea dc_co
  4110                        ;         jsr sprint            ;cursor off
  4111                        ;         plx                   ;recover input count
  4112 00:8D09: 9E 00 02              stz ibuffer,x         ;terminate input &...
  4113 00:8D0C: 9C 3D 00              stz ibufidx           ;reset buffer index
  4114 00:8D0F: 60                    rts                   ;done
  4115                        ;
  4116                        ;
  4117                        ;	process backspace...
  4118                        ;
  4119 00:8D10: C9 08        _0470060 cmp #a_bs             ;backspace?
  4120 00:8D12: D0 C6                 bne _0470010          ;no
  4121                        ;
  Sat Jan 22 2022 12:11                                                                                                Page 76


  4122 00:8D14: 8A                    txa
  4123 00:8D15: F0 C3                 beq _0470010          ;no input, ignore <BS>
  4124                        ;
  4125 00:8D17: CA                    dex                   ;1 less char
  4126 00:8D18: DA                    phx                   ;preserve count
  4127 00:8D19: 20 EF 87              jsr gendbs            ;destructive backspace
  4128 00:8D1C: FA                    plx                   ;restore count
  4129 00:8D1D: 80 BB                 bra _0470010          ;get more input
  4130                        ;
  4131                        ;================================================================================
  4132                        ;
  4133                        ;lodbnk: LOAD SOURCE & DESTINATION BANKS
  4134                        ;
  4135                        lodbnk   shorta
+ 4135 00:8D1F: E2 20                 .db $e2,$20
  4136 00:8D21: AD 3B 00              lda operand+s_word    ;destination bank
  4137 00:8D24: EB                    xba                   ;make it MSB
  4138 00:8D25: AD 21 00              lda addra+s_word      ;source bank is LSB
  4139 00:8D28: 60                    rts
  4140                        ;
  4141                        ;================================================================================
  4142                        ;
  4143                        ;getcharc: GET A CHARACTER FROM INPUT BUFFER & CONVERT CASE
  4144                        ;
  4145                        ;	--------------------------------------------------
  4146                        ;	Preparatory Ops: Null-terminated input in IBUFFER.
  4147                        ;
  4148                        ;	Returned Values: .A: char or null
  4149                        ;	                 .X: entry value
  4150                        ;	                 .Y: entry value
  4151                        ;	                 .Z: 1 = null terminator detected
  4152                        ;	--------------------------------------------------
  4153                        ;
  4154 00:8D29: 20 58 8C     getcharc jsr getchar           ;get from buffer
  4155                        ;
  4156                        ;================================================================================
  4157                        ;
  4158                        ;toupper: FORCE CHARACTER TO UPPER CASE
  4159                        ;
  4160                        ;	------------------------------------------------
  4161                        ;	Preparatory Ops : .A: 8 bit character to convert
  4162                        ;
  4163                        ;	Register Returns: .A: converted character
  4164                        ;	                  .B: entry value
  4165                        ;	                  .X: entry value
  4166                        ;	                  .Y: entry value
  4167                        ;
  4168                        ;	MPU Flags: no change
  4169                        ;
  4170                        ;	Notes: 1) This subroutine has no effect on char-
  4171                        ;	          acters that are not alpha.
  4172                        ;	------------------------------------------------
  4173                        ;
  4174 00:8D2C: 08           toupper  php                   ;protect flags
  4175 00:8D2D: C9 61                 cmp #a_asclcl         ;check char range
  4176 00:8D2F: 90 06                 bcc _0480010          ;not LC alpha
  4177                        ;
  Sat Jan 22 2022 12:11                                                                                                Page 77


  4178 00:8D31: C9 7B                 cmp #a_asclch+s_byte
  4179 00:8D33: B0 02                 bcs _0480010          ;not LC alpha
  4180                        ;
  4181 00:8D35: 29 5F                 and #a_lctouc         ;force to UC
  4182                        ;
  4183 00:8D37: 28           _0480010 plp                   ;restore flags
  4184                        ;
  4185 00:8D38: 60           touppera rts
  4186                        ;
  4187                        ;================================================================================
  4188                        ;
  4189                        ;teststop: TEST FOR STOP KEY
  4190                        ;
  4191                        ;	----------------------------------------------
  4192                        ;	Preparatory Ops: none
  4193                        ;
  4194                        ;	Returned Values: .A: detected keypress, if any
  4195                        ;	                 .X: entry value
  4196                        ;	                 .Y: entry value
  4197                        ;
  4198                        ;	MPU Flags: NVmxDIZC
  4199                        ;	           ||||||||
  4200                        ;	           |||||||+---> 0: normal key detected
  4201                        ;	           |||||||      1: <STOP> detected
  4202                        ;	           +++++++----> not defined
  4203                        ;
  4204                        ;	Example: jsr teststop
  4205                        ;	         bcs stopped
  4206                        ;
  4207                        ;	Notes: The symbol STOPKEY defines the ASCII
  4208                        ;	       value of the "stop key."
  4209                        ;	----------------------------------------------
  4210                        ;
  4211 00:8D39: 20 74 FF     teststop jsr getcha            ;poll console
  4212 00:8D3C: B0 04                 bcs _0490010          ;no input
  4213                        ;
  4214 00:8D3E: C9 03                 cmp #stopkey          ;stop key pressed?
  4215 00:8D40: F0 01                 beq _0490020          ;yes
  4216                        ;
  4217 00:8D42: 18           _0490010 clc
  4218                        ;
  4219 00:8D43: 60           _0490020 rts
  4220                        
  4221                        
  4222                        ;__LOAD_________________________________________________________
  4223                        ; LOAD A MOTOROLA FORMATTED HEX FILE (S28)
  4224                        ;
  4225                        ;_______________________________________________________________
  4226                        LOADS19:
  4227 00:8D44: 08           		php
  4228                        		shortr
+ 4228 00:8D45: E2 30                 .db $e2,$30
  4229 00:8D47: F4 B6 91     		pea mm_S19_prmpt
  4230 00:8D4A: 20 3D 88             jsr sprint            ;display input prompt
  4231                        
  4232                        
  4233                        LOADS19_1:
  Sat Jan 22 2022 12:11                                                                                                Page 78


  4234 00:8D4D: 20 D8 8D     		JSR	getc 				;
  4235 00:8D50: C9 53        		CMP	#'S'				;
  4236 00:8D52: D0 F9        		BNE	LOADS19_1			; FIRST CHAR NOT (S)
  4237 00:8D54: 20 D8 8D     		JSR	getc 				; READ CHAR
  4238 00:8D57: C9 38        		CMP	#'8'				;
  4239 00:8D59: F0 4D        		BEQ	LOAD21				;
  4240 00:8D5B: C9 32        		CMP	#'2'				;
  4241 00:8D5D: D0 EE        		BNE	LOADS19_1			; SECOND CHAR NOT (2)
  4242 00:8D5F: A9 00        		LDA	#$00				;
  4243 00:8D61: 8D 25 00     		STA	faca				; ZERO CHECKSUM
  4244                        
  4245 00:8D64: 20 AC 8D     		JSR	GETBYTE				; READ BYTE
  4246 00:8D67: E9 02        		SBC	#$02				;
  4247 00:8D69: 8D 2D 00     		STA	facb				; BYTE COUNT
  4248                        							; BUILD ADDRESS
  4249 00:8D6C: 20 AC 8D     		JSR	GETBYTE				; READ 2 FRAMES
  4250 00:8D6F: 8D 21 00     		STA	addra+2				;
  4251 00:8D72: 20 AC 8D     		JSR	GETBYTE				; READ 2 FRAMES
  4252 00:8D75: 8D 20 00     		STA	addra+1				;
  4253 00:8D78: 20 AC 8D     		JSR	GETBYTE				;
  4254 00:8D7B: 8D 1F 00     		STA	addra	 			;
  4255                        
  4256 00:8D7E: A0 00        		LDY	#$00				;
  4257                        LOAD11:
  4258 00:8D80: 20 AC 8D     		JSR	GETBYTE				;
  4259 00:8D83: CE 2D 00     		DEC	facb				;
  4260 00:8D86: F0 16        		BEQ	LOAD15				; ZERO BYTE COUNT
  4261 00:8D88: 97 1F        		STA	[addra],Y			; STORE DATA
  4262                        		slonga
+ 4262 00:8D8A: C2 20                 .db $c2,$20
  4263 00:8D8C: EE 1F 00     		inc 	addra 				;
  4264                        		cmpw    $0000
+ 4264 00:8D8F: C9 00                 cmp #<$0000
+ 4264 00:8D91: 00                    .db >$0000
  4265 00:8D92: D0 05        		bne     LOAD11A
  4266                        		shorta
+ 4266 00:8D94: E2 20                 .db $e2,$20
  4267 00:8D96: EE 21 00     		inc 	addra+2				;
  4268                        LOAD11A:
  4269                        		shorta
+ 4269 00:8D99: E2 20                 .db $e2,$20
  4270 00:8D9B: 4C 80 8D     		JMP	LOAD11				;
  4271                        
  4272                        LOAD15:
  4273 00:8D9E: EE 25 00     		INC	faca				;
  4274 00:8DA1: F0 AA        		BEQ	LOADS19_1			;
  4275                        LOAD19:
  4276 00:8DA3: A9 3F        		LDA	#'?'				;
  4277 00:8DA5: 20 71 FF     		JSR	putcha				;
  4278                        LOAD21:
  4279 00:8DA8: 28           		plp
  4280 00:8DA9: 4C FF 80     		jmp monce             			;back to executive
  4281                        GETBYTE:
  4282 00:8DAC: 20 C8 8D     		JSR	INHEX				; GET HEX CHAR
  4283 00:8DAF: 0A           		ASL	A				;
  4284 00:8DB0: 0A           		ASL	A				;
  4285 00:8DB1: 0A           		ASL	A				;
  Sat Jan 22 2022 12:11                                                                                                Page 79


  4286 00:8DB2: 0A           		ASL	A				;
  4287 00:8DB3: 8D 3F 00     		STA	numeral 			;
  4288 00:8DB6: 20 C8 8D     		JSR	INHEX				;
  4289 00:8DB9: 29 0F        		AND	#$0F				; MASK TO 4 BITS
  4290 00:8DBB: 0D 3F 00     		ORA	numeral 			;
  4291 00:8DBE: 48           		PHA					;
  4292 00:8DBF: 18           		CLC					;
  4293 00:8DC0: 6D 25 00     		ADC	faca				;
  4294 00:8DC3: 8D 25 00     		STA	faca				;
  4295 00:8DC6: 68           		PLA					;
  4296 00:8DC7: 60           		RTS					;
  4297                        ; INPUT HEX CHAR
  4298                        INHEX:
  4299 00:8DC8: 20 D8 8D     		JSR	getc 				;
  4300 00:8DCB: C9 3A           	 	CMP #$3A  				; LESS THAN 9?
  4301 00:8DCD: B0 02           	   	BCS INHEX_BIG  				; NO, SKIP NEXT
  4302 00:8DCF: E9 2F           	   	SBC #$2F  				; CONVERT 0-9
  4303                        INHEX_BIG:
  4304 00:8DD1: C9 41        		CMP #$41  				; A OR MORE?
  4305 00:8DD3: 90 02            	  	BCC INHEX_SMALL 			; NO, SKIP NEXT
  4306 00:8DD5: E9 37           	   	SBC #$37  				; CONVERT A-F
  4307                        INHEX_SMALL:
  4308 00:8DD7: 60           		RTS					;
  4309                        getc:
  4310 00:8DD8: 20 74 FF     	 	 jsr getcha         ;poll for input
  4311 00:8DDB: 90 02                 bcc getcd          ;got something
  4312 00:8DDD: 80 F9                 bra getc         ;try again
  4313                        getcd:
  4314 00:8DDF: 48           		PHA					;
  4315 00:8DE0: 20 71 FF     		JSR	putcha				;
  4316 00:8DE3: 68           		PLA					;
  4317 00:8DE4: 60           	    rts
  4318                        
  4319                        
  4320                        
  4321                        ;
  4322                        ;cpcode: COPY MEMORY CODE
  4323                        ;
  4324                        ;	-------------------------------------------
  4325                        ;	This code is transfered to workspace when a
  4326                        ;	copy or fill operation is to be performed.
  4327                        ;	-------------------------------------------
  4328                        ;
  4329 00:8DE5: 8B           cpcode   phb                   ;must preserve data bank
  4330                                 ;.rept s_mvinst
  4331 00:8DE6: EA                      nop                 ;placeholder
  4332 00:8DE7: EA                      nop                 ;placeholder
  4333 00:8DE8: EA                      nop                 ;placeholder
  4334                                 ;.endr
  4335 00:8DE9: AB                    plb                   ;restore data bank
  4336 00:8DEA: 5C FF 80 00           jml monce             ;return to command executive
  4337             00008DEE   cpcodeee .equ *                    ;placeholder - do not delete
  4338                        ;
  4339                        ;================================================================================
  4340                        ;
  4341                        ;COMMAND PROCESSING DATA TABLES
  4342                        ;
  Sat Jan 22 2022 12:11                                                                                                Page 80


  4343                        ;
  4344                        ;	monitor commands...
  4345                        ;
  4346 00:8DEE: 41           mpctab   .db "A"             ;assemble code
  4347 00:8DEF: 43                    .db "C"             ;compare memory ranges
  4348 00:8DF0: 44                    .db "D"             ;disassemble code
  4349 00:8DF1: 46                    .db "F"             ;fill memory
  4350 00:8DF2: 47                    .db "G"             ;execute code
  4351 00:8DF3: 48                    .db "H"             ;search memory
  4352 00:8DF4: 4A                    .db "J"             ;execute code as subroutine
  4353 00:8DF5: 4C                    .db "L"	     ;load S19 file
  4354 00:8DF6: 4D                    .db "M"             ;dump memory range
  4355 00:8DF7: 52                    .db "R"             ;dump registers
  4356 00:8DF8: 54                    .db "T"             ;copy memory range
  4357                        ;         .db "X"             ;exit from monitor
  4358 00:8DF9: 3E                    .db ">"             ;change memory
  4359 00:8DFA: 3B                    .db ";"             ;change registers
  4360             0000000D   n_mpctab .equ *-mpctab             ;entries in above table
  4361                        ;
  4362                        ;
  4363                        ;	monitor command jump table...
  4364                        ;
  4365 00:8DFB: 45 81        mpcextab .dw monasc-s_byte   ; A  assemble code
  4366 00:8DFD: 54 84                 .dw moncmp-s_byte   ; C  compare memory ranges
  4367 00:8DFF: 57 83                 .dw mondsc-s_byte   ; D  disassemble code
  4368 00:8E01: 38 85                 .dw monfil-s_byte   ; F  fill memory
  4369 00:8E03: B0 83                 .dw monjmp-s_byte   ; G  execute code
  4370 00:8E05: A8 85                 .dw monhnt-s_byte   ; H  search memory
  4371 00:8E07: EA 83                 .dw monjsr-s_byte   ; J  execute code as subroutine
  4372 00:8E09: 43 8D                 .dw LOADS19-s_byte  ; L  Load S19 File
  4373 00:8E0B: E2 84                 .dw mondmp-s_byte   ; M  dump memory range
  4374 00:8E0D: A0 80                 .dw monreg-s_byte   ; R  dump registers
  4375 00:8E0F: 85 84                 .dw moncpy-s_byte   ; T  copy memory range
  4376                        ;         .dw monxit-s_byte   ; X  exit from monitor
  4377 00:8E11: 29 84                 .dw monchm-s_byte   ; >  change memory
  4378 00:8E13: 20 86                 .dw monchr-s_byte   ; ;  change registers
  4379                        ;
  4380                        ;
  4381                        ;	number conversion...
  4382                        ;
  4383 00:8E15: 10 0A 08 02  basetab  .db 16,10,8,2       ;supported number bases
  4384 00:8E19: 04 03 03 01  bitsdtab .db 4,3,3,1         ;bits per binary digit
  4385 00:8E1D: 04 04 03 01  bitsntab .db 4,4,3,1         ;bits per ASCII character
  4386 00:8E21: 03 02 09 02  lzsttab  .db 3,2,9,2         ;leading zero suppression thresholds
  4387 00:8E25: 0C 0C 10 30  numstab  .db 12,12,16,48     ;bin to ASCII conversion numerals
  4388 00:8E29: 24           radxtab  .db c_hex           ;hexadecimal radix
  4389 00:8E2A: 2B                    .db c_dec           ;decimal radix
  4390 00:8E2B: 40                    .db c_oct           ;octal radix
  4391 00:8E2C: 25                    .db c_bin           ;binary radix
  4392             00000004   n_radix  .equ *-radxtab            ;number of recognized radices
  4393                        ;
  4394                        ;
  4395                        ;	shadow MPU register sizes...
  4396                        ;
  4397 00:8E2D: 02           rcvltab  .db s_mpupbx+s_byte ; PB
  4398 00:8E2E: 03                    .db s_mpupcx+s_byte ; PC
  4399 00:8E2F: 02                    .db s_mpusrx+s_byte ; SR
  Sat Jan 22 2022 12:11                                                                                                Page 81


  4400 00:8E30: 03                    .db s_word+s_byte   ; .C
  4401 00:8E31: 03                    .db s_word+s_byte   ; .X
  4402 00:8E32: 03                    .db s_word+s_byte   ; .Y
  4403 00:8E33: 03                    .db s_mpuspx+s_byte ; SP
  4404 00:8E34: 03                    .db s_mpudpx+s_byte ; DP
  4405 00:8E35: 02                    .db s_mpudbx+s_byte ; DB
  4406             00000009   n_regchv .equ *-rcvltab            ;total shadow registers
  4407                        ;
  4408                        ;================================================================================
  4409                        ;
  4410                        ;ASSEMBLER/DISASSEMBLER DATA TABLES
  4411                        ;
  4412                        ;
  4413                        ;	numerically sorted & encoded W65C816S mnemonics...
  4414                        ;
  4415 00:8E36: F2 10        mnetab   .dw mne_xba         ;  0 - XBA
  4416 00:8E38: 5A 11                 .dw mne_lda         ;  1 - LDA
  4417 00:8E3A: A2 11                 .dw mne_pea         ;  2 - PEA
  4418 00:8E3C: 62 12                 .dw mne_pha         ;  3 - PHA
  4419 00:8E3E: 62 13                 .dw mne_pla         ;  4 - PLA
  4420 00:8E40: C6 14                 .dw mne_bra         ;  5 - BRA
  4421 00:8E42: E0 14                 .dw mne_ora         ;  6 - ORA
  4422 00:8E44: 68 15                 .dw mne_sta         ;  7 - STA
  4423 00:8E46: 6A 16                 .dw mne_txa         ;  8 - TXA
  4424 00:8E48: AA 16                 .dw mne_tya         ;  9 - TYA
  4425 00:8E4A: 62 1A                 .dw mne_phb         ; 10 - PHB
  4426 00:8E4C: 62 1B                 .dw mne_plb         ; 11 - PLB
  4427 00:8E4E: EA 1C                 .dw mne_trb         ; 12 - TRB
  4428 00:8E50: 2A 1D                 .dw mne_tsb         ; 13 - TSB
  4429 00:8E52: E8 20                 .dw mne_sbc         ; 14 - SBC
  4430 00:8E54: 06 21                 .dw mne_bcc         ; 15 - BCC
  4431 00:8E56: 44 21                 .dw mne_adc         ; 16 - ADC
  4432 00:8E58: 6A 21                 .dw mne_tdc         ; 17 - TDC
  4433 00:8E5A: 8A 21                 .dw mne_dec         ; 18 - DEC
  4434 00:8E5C: A8 21                 .dw mne_sec         ; 19 - SEC
  4435 00:8E5E: 48 23                 .dw mne_clc         ; 20 - CLC
  4436 00:8E60: D4 23                 .dw mne_inc         ; 21 - INC
  4437 00:8E62: 2A 25                 .dw mne_tsc         ; 22 - TSC
  4438 00:8E64: C6 25                 .dw mne_bvc         ; 23 - BVC
  4439 00:8E66: 2A 29                 .dw mne_tcd         ; 24 - TCD
  4440 00:8E68: A8 29                 .dw mne_sed         ; 25 - SED
  4441 00:8E6A: 62 2A                 .dw mne_phd         ; 26 - PHD
  4442 00:8E6C: 48 2B                 .dw mne_cld         ; 27 - CLD
  4443 00:8E6E: 62 2B                 .dw mne_pld         ; 28 - PLD
  4444 00:8E70: C4 2B                 .dw mne_and         ; 29 - AND
  4445 00:8E72: 32 31                 .dw mne_xce         ; 30 - XCE
  4446 00:8E74: C6 33                 .dw mne_bne         ; 31 - BNE
  4447 00:8E76: B0 50                 .dw mne_wai         ; 32 - WAI
  4448 00:8E78: A2 51                 .dw mne_pei         ; 33 - PEI
  4449 00:8E7A: A8 51                 .dw mne_sei         ; 34 - SEI
  4450 00:8E7C: 48 53                 .dw mne_cli         ; 35 - CLI
  4451 00:8E7E: 86 53                 .dw mne_bmi         ; 36 - BMI
  4452 00:8E80: 66 55                 .dw mne_rti         ; 37 - RTI
  4453 00:8E82: 62 62                 .dw mne_phk         ; 38 - PHK
  4454 00:8E84: C6 64                 .dw mne_brk         ; 39 - BRK
  4455 00:8E86: 96 6B                 .dw mne_jml         ; 40 - JML
  4456 00:8E88: 26 6C                 .dw mne_rol         ; 41 - ROL
  Sat Jan 22 2022 12:11                                                                                                Page 82


  4457 00:8E8A: 46 6C                 .dw mne_bpl         ; 42 - BPL
  4458 00:8E8C: C6 6C                 .dw mne_brl         ; 43 - BRL
  4459 00:8E8E: 04 6D                 .dw mne_asl         ; 44 - ASL
  4460 00:8E90: 16 6D                 .dw mne_jsl         ; 45 - JSL
  4461 00:8E92: 66 6D                 .dw mne_rtl         ; 46 - RTL
  4462 00:8E94: 70 71                 .dw mne_wdm         ; 47 - WDM
  4463 00:8E96: DC 7D                 .dw mne_mvn         ; 48 - MVN
  4464 00:8E98: A6 89                 .dw mne_rep         ; 49 - REP
  4465 00:8E9A: A8 89                 .dw mne_sep         ; 50 - SEP
  4466 00:8E9C: 62 8A                 .dw mne_php         ; 51 - PHP
  4467 00:8E9E: 62 8B                 .dw mne_plp         ; 52 - PLP
  4468 00:8EA0: 88 8B                 .dw mne_cmp         ; 53 - CMP
  4469 00:8EA2: 96 8B                 .dw mne_jmp         ; 54 - JMP
  4470 00:8EA4: 08 8C                 .dw mne_cop         ; 55 - COP
  4471 00:8EA6: 1E 8C                 .dw mne_nop         ; 56 - NOP
  4472 00:8EA8: 68 8D                 .dw mne_stp         ; 57 - STP
  4473 00:8EAA: DC 8D                 .dw mne_mvp         ; 58 - MVP
  4474 00:8EAC: 86 91                 .dw mne_beq         ; 59 - BEQ
  4475 00:8EAE: A2 99                 .dw mne_per         ; 60 - PER
  4476 00:8EB0: 0C 9C                 .dw mne_eor         ; 61 - EOR
  4477 00:8EB2: 26 9C                 .dw mne_ror         ; 62 - ROR
  4478 00:8EB4: 16 9D                 .dw mne_jsr         ; 63 - JSR
  4479 00:8EB6: 1A 9D                 .dw mne_lsr         ; 64 - LSR
  4480 00:8EB8: 06 A1                 .dw mne_bcs         ; 65 - BCS
  4481 00:8EBA: 2A A1                 .dw mne_tcs         ; 66 - TCS
  4482 00:8EBC: 66 A5                 .dw mne_rts         ; 67 - RTS
  4483 00:8EBE: C6 A5                 .dw mne_bvs         ; 68 - BVS
  4484 00:8EC0: 6A A6                 .dw mne_txs         ; 69 - TXS
  4485 00:8EC2: 86 AA                 .dw mne_bit         ; 70 - BIT
  4486 00:8EC4: 48 BB                 .dw mne_clv         ; 71 - CLV
  4487 00:8EC6: AA C8                 .dw mne_tax         ; 72 - TAX
  4488 00:8EC8: 5A C9                 .dw mne_ldx         ; 73 - LDX
  4489 00:8ECA: 8A C9                 .dw mne_dex         ; 74 - DEX
  4490 00:8ECC: 62 CA                 .dw mne_phx         ; 75 - PHX
  4491 00:8ECE: 62 CB                 .dw mne_plx         ; 76 - PLX
  4492 00:8ED0: D4 CB                 .dw mne_inx         ; 77 - INX
  4493 00:8ED2: 48 CC                 .dw mne_cpx         ; 78 - CPX
  4494 00:8ED4: 2A CD                 .dw mne_tsx         ; 79 - TSX
  4495 00:8ED6: 68 CD                 .dw mne_stx         ; 80 - STX
  4496 00:8ED8: AA CE                 .dw mne_tyx         ; 81 - TYX
  4497 00:8EDA: AA D0                 .dw mne_tay         ; 82 - TAY
  4498 00:8EDC: 5A D1                 .dw mne_ldy         ; 83 - LDY
  4499 00:8EDE: 8A D1                 .dw mne_dey         ; 84 - DEY
  4500 00:8EE0: 62 D2                 .dw mne_phy         ; 85 - PHY
  4501 00:8EE2: 62 D3                 .dw mne_ply         ; 86 - PLY
  4502 00:8EE4: D4 D3                 .dw mne_iny         ; 87 - INY
  4503 00:8EE6: 48 D4                 .dw mne_cpy         ; 88 - CPY
  4504 00:8EE8: 68 D5                 .dw mne_sty         ; 89 - STY
  4505 00:8EEA: 6A D6                 .dw mne_txy         ; 90 - TXY
  4506 00:8EEC: 68 DD                 .dw mne_stz         ; 91 - STZ
  4507                        ;
  4508             000000B8   s_mnetab .equ *-mnetab             ;mnemonic table size
  4509             0000005C   n_mnemon .equ s_mnetab/s_word      ;total mnemonics
  4510                        ;
  4511                        ;
  4512                        ;	mnemonic lookup indices in opcode order...
  4513                        ;
  Sat Jan 22 2022 12:11                                                                                                Page 83


  4514 00:8EEE: 27           mnetabix .db mne_brkx        ; $00  BRK
  4515 00:8EEF: 06                    .db mne_orax        ; $01  ORA (dp,X)
  4516 00:8EF0: 37                    .db mne_copx        ; $02  COP
  4517 00:8EF1: 06                    .db mne_orax        ; $03  ORA <offset>,S
  4518 00:8EF2: 0D                    .db mne_tsbx        ; $04  TSB dp
  4519 00:8EF3: 06                    .db mne_orax        ; $05  ORA dp
  4520 00:8EF4: 2C                    .db mne_aslx        ; $06  ASL dp
  4521 00:8EF5: 06                    .db mne_orax        ; $07  ORA [dp]
  4522 00:8EF6: 33                    .db mne_phpx        ; $08  PHP
  4523 00:8EF7: 06                    .db mne_orax        ; $09  ORA #
  4524 00:8EF8: 2C                    .db mne_aslx        ; $0A  ASL A
  4525 00:8EF9: 1A                    .db mne_phdx        ; $0B  PHD
  4526 00:8EFA: 0D                    .db mne_tsbx        ; $0C  TSB abs
  4527 00:8EFB: 06                    .db mne_orax        ; $0D  ORA abs
  4528 00:8EFC: 2C                    .db mne_aslx        ; $0E  ASL abs
  4529 00:8EFD: 06                    .db mne_orax        ; $0F  ORA absl
  4530                        ;
  4531 00:8EFE: 2A                    .db mne_bplx        ; $10  BPL abs
  4532 00:8EFF: 06                    .db mne_orax        ; $11  ORA (<dp>),Y
  4533 00:8F00: 06                    .db mne_orax        ; $12  ORA (dp)
  4534 00:8F01: 06                    .db mne_orax        ; $13  ORA (<offset>,S),Y
  4535 00:8F02: 0C                    .db mne_trbx        ; $14  TRB dp
  4536 00:8F03: 06                    .db mne_orax        ; $15  ORA dp,X
  4537 00:8F04: 2C                    .db mne_aslx        ; $16  ASL dp,X
  4538 00:8F05: 06                    .db mne_orax        ; $17  ORA [dp],Y
  4539 00:8F06: 14                    .db mne_clcx        ; $18  CLC
  4540 00:8F07: 06                    .db mne_orax        ; $19  ORA abs
  4541 00:8F08: 15                    .db mne_incx        ; $1A  INC A
  4542 00:8F09: 42                    .db mne_tcsx        ; $1B  TCS
  4543 00:8F0A: 0C                    .db mne_trbx        ; $1C  TRB abs
  4544 00:8F0B: 06                    .db mne_orax        ; $1D  ORA abs,X
  4545 00:8F0C: 2C                    .db mne_aslx        ; $1E  ASL abs,X
  4546 00:8F0D: 06                    .db mne_orax        ; $1F  ORA absl,X
  4547                        ;
  4548 00:8F0E: 3F                    .db mne_jsrx        ; $20  JSR abs
  4549 00:8F0F: 1D                    .db mne_andx        ; $21  AND (dp,X)
  4550 00:8F10: 2D                    .db mne_jslx        ; $22  JSL absl
  4551 00:8F11: 1D                    .db mne_andx        ; $23  AND <offset>,S
  4552 00:8F12: 46                    .db mne_bitx        ; $24  BIT dp
  4553 00:8F13: 1D                    .db mne_andx        ; $25  AND dp
  4554 00:8F14: 29                    .db mne_rolx        ; $26  ROL dp
  4555 00:8F15: 1D                    .db mne_andx        ; $27  AND [dp]
  4556 00:8F16: 34                    .db mne_plpx        ; $28  PLP
  4557 00:8F17: 1D                    .db mne_andx        ; $29  AND #
  4558 00:8F18: 29                    .db mne_rolx        ; $2A  ROL A
  4559 00:8F19: 1C                    .db mne_pldx        ; $2B  PLD
  4560 00:8F1A: 46                    .db mne_bitx        ; $2C  BIT abs
  4561 00:8F1B: 1D                    .db mne_andx        ; $2D  AND abs
  4562 00:8F1C: 29                    .db mne_rolx        ; $2E  ROL abs
  4563 00:8F1D: 1D                    .db mne_andx        ; $2F  AND absl
  4564                        ;
  4565 00:8F1E: 24                    .db mne_bmix        ; $30  BMI abs
  4566 00:8F1F: 1D                    .db mne_andx        ; $31  AND (<dp>),Y
  4567 00:8F20: 1D                    .db mne_andx        ; $32  AND (dp)
  4568 00:8F21: 1D                    .db mne_andx        ; $33  AND (<offset>,S),Y
  4569 00:8F22: 46                    .db mne_bitx        ; $34  BIT dp,X
  4570 00:8F23: 1D                    .db mne_andx        ; $35  AND dp,X
  Sat Jan 22 2022 12:11                                                                                                Page 84


  4571 00:8F24: 29                    .db mne_rolx        ; $36  ROL dp,X
  4572 00:8F25: 1D                    .db mne_andx        ; $37  AND [dp],Y
  4573 00:8F26: 13                    .db mne_secx        ; $38  SEC
  4574 00:8F27: 1D                    .db mne_andx        ; $39  AND abs,Y
  4575 00:8F28: 12                    .db mne_decx        ; $3A  DEC A
  4576 00:8F29: 16                    .db mne_tscx        ; $3B  TSC
  4577 00:8F2A: 46                    .db mne_bitx        ; $3C  BIT abs,X
  4578 00:8F2B: 1D                    .db mne_andx        ; $3D  AND abs,X
  4579 00:8F2C: 29                    .db mne_rolx        ; $3E  ROL abs,X
  4580 00:8F2D: 1D                    .db mne_andx        ; $3F  AND absl,X
  4581                        ;
  4582 00:8F2E: 25                    .db mne_rtix        ; $40  RTI
  4583 00:8F2F: 3D                    .db mne_eorx        ; $41  EOR (dp,X)
  4584 00:8F30: 2F                    .db mne_wdmx        ; $42  WDM
  4585 00:8F31: 3D                    .db mne_eorx        ; $43  EOR <offset>,S
  4586 00:8F32: 3A                    .db mne_mvpx        ; $44  MVP sb,db
  4587 00:8F33: 3D                    .db mne_eorx        ; $45  EOR dp
  4588 00:8F34: 40                    .db mne_lsrx        ; $46  LSR dp
  4589 00:8F35: 3D                    .db mne_eorx        ; $47  EOR [dp]
  4590 00:8F36: 03                    .db mne_phax        ; $48  PHA
  4591 00:8F37: 3D                    .db mne_eorx        ; $49  EOR #
  4592 00:8F38: 40                    .db mne_lsrx        ; $4A  LSR A
  4593 00:8F39: 26                    .db mne_phkx        ; $4B  PHK
  4594 00:8F3A: 36                    .db mne_jmpx        ; $4C  JMP abs
  4595 00:8F3B: 3D                    .db mne_eorx        ; $4D  EOR abs
  4596 00:8F3C: 40                    .db mne_lsrx        ; $4E  LSR abs
  4597 00:8F3D: 3D                    .db mne_eorx        ; $4F  EOR absl
  4598                        ;
  4599 00:8F3E: 17                    .db mne_bvcx        ; $50  BVC abs
  4600 00:8F3F: 3D                    .db mne_eorx        ; $51  EOR (<dp>),Y
  4601 00:8F40: 3D                    .db mne_eorx        ; $52  EOR (dp)
  4602 00:8F41: 3D                    .db mne_eorx        ; $53  EOR (<offset>,S),Y
  4603 00:8F42: 30                    .db mne_mvnx        ; $54  MVN sb,db
  4604 00:8F43: 3D                    .db mne_eorx        ; $55  EOR dp,X
  4605 00:8F44: 40                    .db mne_lsrx        ; $56  LSR dp,X
  4606 00:8F45: 3D                    .db mne_eorx        ; $57  EOR [dp],Y
  4607 00:8F46: 23                    .db mne_clix        ; $58  CLI
  4608 00:8F47: 3D                    .db mne_eorx        ; $59  EOR abs,Y
  4609 00:8F48: 55                    .db mne_phyx        ; $5A  PHY
  4610 00:8F49: 18                    .db mne_tcdx        ; $5B  TCD
  4611 00:8F4A: 28                    .db mne_jmlx        ; $5C  JML absl
  4612 00:8F4B: 3D                    .db mne_eorx        ; $5D  EOR abs,X
  4613 00:8F4C: 40                    .db mne_lsrx        ; $5E  LSR abs,X
  4614 00:8F4D: 3D                    .db mne_eorx        ; $5F  EOR absl,X
  4615                        ;
  4616 00:8F4E: 43                    .db mne_rtsx        ; $60  RTS
  4617 00:8F4F: 10                    .db mne_adcx        ; $61  ADC (dp,X)
  4618 00:8F50: 3C                    .db mne_perx        ; $62  PER
  4619 00:8F51: 10                    .db mne_adcx        ; $63  ADC <offset>,S
  4620 00:8F52: 5B                    .db mne_stzx        ; $64  STZ dp
  4621 00:8F53: 10                    .db mne_adcx        ; $65  ADC dp
  4622 00:8F54: 3E                    .db mne_rorx        ; $66  ROR dp
  4623 00:8F55: 10                    .db mne_adcx        ; $67  ADC [dp]
  4624 00:8F56: 04                    .db mne_plax        ; $68  PLA
  4625 00:8F57: 10                    .db mne_adcx        ; $69  ADC #
  4626 00:8F58: 3E                    .db mne_rorx        ; $6A  ROR A
  4627 00:8F59: 2E                    .db mne_rtlx        ; $6B  RTL
  Sat Jan 22 2022 12:11                                                                                                Page 85


  4628 00:8F5A: 36                    .db mne_jmpx        ; $6C  JMP (abs)
  4629 00:8F5B: 10                    .db mne_adcx        ; $6D  ADC abs
  4630 00:8F5C: 3E                    .db mne_rorx        ; $6E  ROR abs
  4631 00:8F5D: 10                    .db mne_adcx        ; $6F  ADC absl
  4632                        ;
  4633 00:8F5E: 44                    .db mne_bvsx        ; $70  BVS abs
  4634 00:8F5F: 10                    .db mne_adcx        ; $71  ADC (<dp>),Y
  4635 00:8F60: 10                    .db mne_adcx        ; $72  ADC (dp)
  4636 00:8F61: 10                    .db mne_adcx        ; $73  ADC (<offset>,S),Y
  4637 00:8F62: 5B                    .db mne_stzx        ; $74  STZ dp,X
  4638 00:8F63: 10                    .db mne_adcx        ; $75  ADC dp,X
  4639 00:8F64: 3E                    .db mne_rorx        ; $76  ROR dp,X
  4640 00:8F65: 10                    .db mne_adcx        ; $77  ADC [dp],Y
  4641 00:8F66: 22                    .db mne_seix        ; $78  SEI
  4642 00:8F67: 10                    .db mne_adcx        ; $79  ADC abs,Y
  4643 00:8F68: 56                    .db mne_plyx        ; $7A  PLY
  4644 00:8F69: 11                    .db mne_tdcx        ; $7B  TDC
  4645 00:8F6A: 36                    .db mne_jmpx        ; $7C  JMP (abs,X)
  4646 00:8F6B: 10                    .db mne_adcx        ; $7D  ADC abs,X
  4647 00:8F6C: 3E                    .db mne_rorx        ; $7E  ROR abs,X
  4648 00:8F6D: 10                    .db mne_adcx        ; $7F  ADC absl,X
  4649                        ;
  4650 00:8F6E: 05                    .db mne_brax        ; $80  BRA abs
  4651 00:8F6F: 07                    .db mne_stax        ; $81  STA (dp,X)
  4652 00:8F70: 2B                    .db mne_brlx        ; $82  BRL abs
  4653 00:8F71: 07                    .db mne_stax        ; $83  STA <offset>,S
  4654 00:8F72: 59                    .db mne_styx        ; $84  STY dp
  4655 00:8F73: 07                    .db mne_stax        ; $85  STA dp
  4656 00:8F74: 50                    .db mne_stxx        ; $86  STX dp
  4657 00:8F75: 07                    .db mne_stax        ; $87  STA [dp]
  4658 00:8F76: 54                    .db mne_deyx        ; $88  DEY
  4659 00:8F77: 46                    .db mne_bitx        ; $89  BIT #
  4660 00:8F78: 08                    .db mne_txax        ; $8A  TXA
  4661 00:8F79: 0A                    .db mne_phbx        ; $8B  PHB
  4662 00:8F7A: 59                    .db mne_styx        ; $8C  STY abs
  4663 00:8F7B: 07                    .db mne_stax        ; $8D  STA abs
  4664 00:8F7C: 50                    .db mne_stxx        ; $8E  STX abs
  4665 00:8F7D: 07                    .db mne_stax        ; $8F  STA absl
  4666                        ;
  4667 00:8F7E: 0F                    .db mne_bccx        ; $90  BCC abs
  4668 00:8F7F: 07                    .db mne_stax        ; $91  STA (<dp>),Y
  4669 00:8F80: 07                    .db mne_stax        ; $92  STA (dp)
  4670 00:8F81: 07                    .db mne_stax        ; $93  STA (<offset>,S),Y
  4671 00:8F82: 59                    .db mne_styx        ; $94  STY dp,X
  4672 00:8F83: 07                    .db mne_stax        ; $95  STA dp,X
  4673 00:8F84: 50                    .db mne_stxx        ; $96  STX dp,Y
  4674 00:8F85: 07                    .db mne_stax        ; $97  STA [dp],Y
  4675 00:8F86: 09                    .db mne_tyax        ; $98  TYA
  4676 00:8F87: 07                    .db mne_stax        ; $99  STA abs,Y
  4677 00:8F88: 45                    .db mne_txsx        ; $9A  TXS
  4678 00:8F89: 5A                    .db mne_txyx        ; $9B  TXY
  4679 00:8F8A: 5B                    .db mne_stzx        ; $9C  STZ abs
  4680 00:8F8B: 07                    .db mne_stax        ; $9D  STA abs,X
  4681 00:8F8C: 5B                    .db mne_stzx        ; $9E  STZ abs,X
  4682 00:8F8D: 07                    .db mne_stax        ; $9F  STA absl,X
  4683                        ;
  4684 00:8F8E: 53                    .db mne_ldyx        ; $A0  LDY #
  Sat Jan 22 2022 12:11                                                                                                Page 86


  4685 00:8F8F: 01                    .db mne_ldax        ; $A1  LDA (dp,X)
  4686 00:8F90: 49                    .db mne_ldxx        ; $A2  LDX #
  4687 00:8F91: 01                    .db mne_ldax        ; $A3  LDA <offset>,S
  4688 00:8F92: 53                    .db mne_ldyx        ; $A4  LDY dp
  4689 00:8F93: 01                    .db mne_ldax        ; $A5  LDA dp
  4690 00:8F94: 49                    .db mne_ldxx        ; $A6  LDX dp
  4691 00:8F95: 01                    .db mne_ldax        ; $A7  LDA [dp]
  4692 00:8F96: 52                    .db mne_tayx        ; $A8  TAY
  4693 00:8F97: 01                    .db mne_ldax        ; $A9  LDA #
  4694 00:8F98: 48                    .db mne_taxx        ; $AA  TAX
  4695 00:8F99: 0B                    .db mne_plbx        ; $AB  PLB
  4696 00:8F9A: 53                    .db mne_ldyx        ; $AC  LDY abs
  4697 00:8F9B: 01                    .db mne_ldax        ; $AD  LDA abs
  4698 00:8F9C: 49                    .db mne_ldxx        ; $AE  LDX abs
  4699 00:8F9D: 01                    .db mne_ldax        ; $AF  LDA absl
  4700                        ;
  4701 00:8F9E: 41                    .db mne_bcsx        ; $B0  BCS abs
  4702 00:8F9F: 01                    .db mne_ldax        ; $B1  LDA (<dp>),Y
  4703 00:8FA0: 01                    .db mne_ldax        ; $B2  LDA (dp)
  4704 00:8FA1: 01                    .db mne_ldax        ; $B3  LDA (<offset>,S),Y
  4705 00:8FA2: 53                    .db mne_ldyx        ; $B4  LDY dp,X
  4706 00:8FA3: 01                    .db mne_ldax        ; $B5  LDA dp,X
  4707 00:8FA4: 49                    .db mne_ldxx        ; $B6  LDX dp,Y
  4708 00:8FA5: 01                    .db mne_ldax        ; $B7  LDA [dp],Y
  4709 00:8FA6: 47                    .db mne_clvx        ; $B8  CLV
  4710 00:8FA7: 01                    .db mne_ldax        ; $B9  LDA abs,Y
  4711 00:8FA8: 4F                    .db mne_tsxx        ; $BA  TSX
  4712 00:8FA9: 51                    .db mne_tyxx        ; $BB  TYX
  4713 00:8FAA: 53                    .db mne_ldyx        ; $BC  LDY abs,X
  4714 00:8FAB: 01                    .db mne_ldax        ; $BD  LDA abs,X
  4715 00:8FAC: 49                    .db mne_ldxx        ; $BE  LDX abs,Y
  4716 00:8FAD: 01                    .db mne_ldax        ; $BF  LDA absl,X
  4717                        ;
  4718 00:8FAE: 58                    .db mne_cpyx        ; $C0  CPY #
  4719 00:8FAF: 35                    .db mne_cmpx        ; $C1  CMP (dp,X)
  4720 00:8FB0: 31                    .db mne_repx        ; $C2  REP #
  4721 00:8FB1: 35                    .db mne_cmpx        ; $C3  CMP <offset>,S
  4722 00:8FB2: 58                    .db mne_cpyx        ; $C4  CPY dp
  4723 00:8FB3: 35                    .db mne_cmpx        ; $C5  CMP dp
  4724 00:8FB4: 12                    .db mne_decx        ; $C6  DEC dp
  4725 00:8FB5: 35                    .db mne_cmpx        ; $C7  CMP [dp]
  4726 00:8FB6: 57                    .db mne_inyx        ; $C8  INY
  4727 00:8FB7: 35                    .db mne_cmpx        ; $C9  CMP #
  4728 00:8FB8: 4A                    .db mne_dexx        ; $CA  DEX
  4729 00:8FB9: 20                    .db mne_waix        ; $CB  WAI
  4730 00:8FBA: 58                    .db mne_cpyx        ; $CC  CPY abs
  4731 00:8FBB: 35                    .db mne_cmpx        ; $CD  CMP abs
  4732 00:8FBC: 12                    .db mne_decx        ; $CE  DEC abs
  4733 00:8FBD: 35                    .db mne_cmpx        ; $CF  CMP absl
  4734                        ;
  4735 00:8FBE: 1F                    .db mne_bnex        ; $D0  BNE abs
  4736 00:8FBF: 35                    .db mne_cmpx        ; $D1  CMP (<dp>),Y
  4737 00:8FC0: 35                    .db mne_cmpx        ; $D2  CMP (dp)
  4738 00:8FC1: 35                    .db mne_cmpx        ; $D3  CMP (<offset>,S),Y
  4739 00:8FC2: 21                    .db mne_peix        ; $D4  PEI dp
  4740 00:8FC3: 35                    .db mne_cmpx        ; $D5  CMP dp,X
  4741 00:8FC4: 12                    .db mne_decx        ; $D6  DEC dp,X
  Sat Jan 22 2022 12:11                                                                                                Page 87


  4742 00:8FC5: 35                    .db mne_cmpx        ; $D7  CMP [dp],Y
  4743 00:8FC6: 1B                    .db mne_cldx        ; $D8  CLD
  4744 00:8FC7: 35                    .db mne_cmpx        ; $D9  CMP abs,Y
  4745 00:8FC8: 4B                    .db mne_phxx        ; $DA  PHX
  4746 00:8FC9: 39                    .db mne_stpx        ; $DB  STP
  4747 00:8FCA: 36                    .db mne_jmpx        ; $DC  JMP [abs]
  4748 00:8FCB: 35                    .db mne_cmpx        ; $DD  CMP abs,X
  4749 00:8FCC: 12                    .db mne_decx        ; $DE  DEC abs,X
  4750 00:8FCD: 35                    .db mne_cmpx        ; $DF  CMP absl,X
  4751                        ;
  4752 00:8FCE: 4E                    .db mne_cpxx        ; $E0  CPX #
  4753 00:8FCF: 0E                    .db mne_sbcx        ; $E1  SBC (dp,X)
  4754 00:8FD0: 32                    .db mne_sepx        ; $E2  SEP #
  4755 00:8FD1: 0E                    .db mne_sbcx        ; $E3  SBC <offset>,S
  4756 00:8FD2: 4E                    .db mne_cpxx        ; $E4  CPX dp
  4757 00:8FD3: 0E                    .db mne_sbcx        ; $E5  SBC dp
  4758 00:8FD4: 15                    .db mne_incx        ; $E6  INC dp
  4759 00:8FD5: 0E                    .db mne_sbcx        ; $E7  SBC [dp]
  4760 00:8FD6: 4D                    .db mne_inxx        ; $E8  INX
  4761 00:8FD7: 0E                    .db mne_sbcx        ; $E9  SBC #
  4762 00:8FD8: 38                    .db mne_nopx        ; $EA  NOP
  4763 00:8FD9: 00                    .db mne_xbax        ; $EB  XBA
  4764 00:8FDA: 4E                    .db mne_cpxx        ; $EC  CPX abs
  4765 00:8FDB: 0E                    .db mne_sbcx        ; $ED  SBC abs
  4766 00:8FDC: 15                    .db mne_incx        ; $EE  INC abs
  4767 00:8FDD: 0E                    .db mne_sbcx        ; $EF  SBC absl
  4768                        ;
  4769 00:8FDE: 3B                    .db mne_beqx        ; $F0  BEQ abs
  4770 00:8FDF: 0E                    .db mne_sbcx        ; $F1  SBC (<dp>),Y
  4771 00:8FE0: 0E                    .db mne_sbcx        ; $F2  SBC (dp)
  4772 00:8FE1: 0E                    .db mne_sbcx        ; $F3  SBC (<offset>,S),Y
  4773 00:8FE2: 02                    .db mne_peax        ; $F4  PEA #
  4774 00:8FE3: 0E                    .db mne_sbcx        ; $F5  SBC dp,X
  4775 00:8FE4: 15                    .db mne_incx        ; $F6  INC dp,X
  4776 00:8FE5: 0E                    .db mne_sbcx        ; $F7  SBC [dp],Y
  4777 00:8FE6: 19                    .db mne_sedx        ; $F8  SED
  4778 00:8FE7: 0E                    .db mne_sbcx        ; $F9  SBC abs,Y
  4779 00:8FE8: 4C                    .db mne_plxx        ; $FA  PLX
  4780 00:8FE9: 1E                    .db mne_xcex        ; $FB  XCE
  4781 00:8FEA: 3F                    .db mne_jsrx        ; $FC  JSR (abs,X)
  4782 00:8FEB: 0E                    .db mne_sbcx        ; $FD  SBC abs,X
  4783 00:8FEC: 15                    .db mne_incx        ; $FE  INC abs,X
  4784 00:8FED: 0E                    .db mne_sbcx        ; $FF  SBC absl,X
  4785                        ;
  4786                        ;
  4787                        ;	instruction addressing modes & sizes in opcode order...
  4788                        ;
  4789                        ;	    xxxxxxxx
  4790                        ;	    ||||||||
  4791                        ;	    ||||++++---> Addressing Mode
  4792                        ;	    ||||         ----------------------------------
  4793                        ;	    ||||          0000  dp, abs, absl, implied or A
  4794                        ;	    ||||          0001  #
  4795                        ;	    ||||          0010  dp,X, abs,X or absl,X
  4796                        ;	    ||||          0011  dp,Y or abs,Y
  4797                        ;	    ||||          0100  (dp) or (abs)
  4798                        ;	    ||||          0101  [dp] or [abs]
  Sat Jan 22 2022 12:11                                                                                                Page 88


  4799                        ;	    ||||          0110  [dp],Y
  4800                        ;	    ||||          0111  (dp,X) or (abs,X)
  4801                        ;	    ||||          1000  (<dp>),Y
  4802                        ;	    ||||          1001  <offset>,S
  4803                        ;	    ||||          1010  (<offset>,S),Y
  4804                        ;	    ||||          1011  sbnk,dbnk (MVN or MVP)
  4805                        ;	    ||||          ---------------------------------
  4806                        ;	    ||||           #    = immediate
  4807                        ;	    ||||           A    = accumulator
  4808                        ;	    ||||           abs  = absolute
  4809                        ;	    ||||           absl = absolute long
  4810                        ;	    ||||           dbnk = destination bank
  4811                        ;	    ||||           dp   = direct (zero) page
  4812                        ;	    ||||           S    = stack relative
  4813                        ;	    ||||           sbnk = source bank
  4814                        ;	    ||||         ----------------------------------
  4815                        ;	    ||||
  4816                        ;	    ||++-------> binary-encoded operand size
  4817                        ;	    |+---------> 1: relative branch instruction
  4818                        ;	    +----------> 1: variable operand size...
  4819                        ;
  4820                        ;	    -------------------------------------------------------------
  4821                        ;	    Variable operand size refers to an immediate mode instruction
  4822                        ;	    that can accept either an 8 or 16 bit operand.  During instr-
  4823                        ;	    uction assembly, an 8 bit operand can be forced to 16 bits by
  4824                        ;	    preceding the operand field with !,  e.g.,  LDA !#$01,  which
  4825                        ;	    will assemble as $A9 $01 $00.
  4826                        ;	    -------------------------------------------------------------
  4827                        ;
  4828 00:8FEE: 00           mnetabam .db ops0|am_nam   ; $00  BRK
  4829 00:8FEF: 17                    .db ops1|am_indx  ; $01  ORA (dp,X)
  4830 00:8FF0: 10                    .db ops1|am_nam   ; $02  COP
  4831 00:8FF1: 19                    .db ops1|am_stk   ; $03  ORA <offset>,S
  4832 00:8FF2: 10                    .db ops1|am_nam   ; $04  TSB dp
  4833 00:8FF3: 10                    .db ops1|am_nam   ; $05  ORA dp
  4834 00:8FF4: 10                    .db ops1|am_nam   ; $06  ASL dp
  4835 00:8FF5: 15                    .db ops1|am_indl  ; $07  ORA [dp]
  4836 00:8FF6: 00                    .db ops0|am_nam   ; $08  PHP
  4837 00:8FF7: 91                    .db vops|am_imm   ; $09  ORA #
  4838 00:8FF8: 00                    .db ops0|am_nam   ; $0A  ASL A
  4839 00:8FF9: 00                    .db ops0|am_nam   ; $0B  PHD
  4840 00:8FFA: 20                    .db ops2|am_nam   ; $0C  TSB abs
  4841 00:8FFB: 20                    .db ops2|am_nam   ; $0D  ORA abs
  4842 00:8FFC: 20                    .db ops2|am_nam   ; $0E  ASL abs
  4843 00:8FFD: 30                    .db ops3|am_nam   ; $0F  ORA absl
  4844                        ;
  4845 00:8FFE: 50                    .db bop1|am_nam   ; $10  BPL abs
  4846 00:8FFF: 18                    .db ops1|am_indy  ; $11  ORA (<dp>),Y
  4847 00:9000: 14                    .db ops1|am_ind   ; $12  ORA (dp)
  4848 00:9001: 1A                    .db ops1|am_stky  ; $13  ORA (<offset>,S),Y
  4849 00:9002: 10                    .db ops1|am_nam   ; $14  TRB dp
  4850 00:9003: 12                    .db ops1|am_adrx  ; $15  ORA dp,X
  4851 00:9004: 12                    .db ops1|am_adrx  ; $16  ASL dp,X
  4852 00:9005: 16                    .db ops1|am_indly ; $17  ORA [dp],Y
  4853 00:9006: 00                    .db ops0|am_nam   ; $18  CLC
  4854 00:9007: 20                    .db ops2|am_nam   ; $19  ORA abs
  4855 00:9008: 00                    .db ops0|am_nam   ; $1A  INC A
  Sat Jan 22 2022 12:11                                                                                                Page 89


  4856 00:9009: 00                    .db ops0|am_nam   ; $1B  TCS
  4857 00:900A: 20                    .db ops2|am_nam   ; $1C  TRB abs
  4858 00:900B: 22                    .db ops2|am_adrx  ; $1D  ORA abs,X
  4859 00:900C: 22                    .db ops2|am_adrx  ; $1E  ASL abs,X
  4860 00:900D: 32                    .db ops3|am_adrx  ; $1F  ORA absl,X
  4861                        ;
  4862 00:900E: 20                    .db ops2|am_nam   ; $20  JSR abs
  4863 00:900F: 17                    .db ops1|am_indx  ; $21  AND (dp,X)
  4864 00:9010: 30                    .db ops3|am_nam   ; $22  JSL absl
  4865 00:9011: 19                    .db ops1|am_stk   ; $23  AND <offset>,S
  4866 00:9012: 10                    .db ops1|am_nam   ; $24  BIT dp
  4867 00:9013: 10                    .db ops1|am_nam   ; $25  AND dp
  4868 00:9014: 10                    .db ops1|am_nam   ; $26  ROL dp
  4869 00:9015: 15                    .db ops1|am_indl  ; $27  AND [dp]
  4870 00:9016: 00                    .db ops0|am_nam   ; $28  PLP
  4871 00:9017: 91                    .db vops|am_imm   ; $29  AND #
  4872 00:9018: 00                    .db ops0|am_nam   ; $2A  ROL A
  4873 00:9019: 00                    .db ops0|am_nam   ; $2B  PLD
  4874 00:901A: 20                    .db ops2|am_nam   ; $2C  BIT abs
  4875 00:901B: 20                    .db ops2|am_nam   ; $2D  AND abs
  4876 00:901C: 20                    .db ops2|am_nam   ; $2E  ROL abs
  4877 00:901D: 30                    .db ops3|am_nam   ; $2F  AND absl
  4878                        ;
  4879 00:901E: 50                    .db bop1|am_nam   ; $30  BMI abs
  4880 00:901F: 18                    .db ops1|am_indy  ; $31  AND (<dp>),Y
  4881 00:9020: 14                    .db ops1|am_ind   ; $32  AND (dp)
  4882 00:9021: 1A                    .db ops1|am_stky  ; $33  AND (<offset>,S),Y
  4883 00:9022: 12                    .db ops1|am_adrx  ; $34  BIT dp,X
  4884 00:9023: 12                    .db ops1|am_adrx  ; $35  AND dp,X
  4885 00:9024: 12                    .db ops1|am_adrx  ; $36  ROL dp,X
  4886 00:9025: 16                    .db ops1|am_indly ; $37  AND [dp],Y
  4887 00:9026: 00                    .db ops0|am_nam   ; $38  SEC
  4888 00:9027: 23                    .db ops2|am_adry  ; $39  AND abs,Y
  4889 00:9028: 00                    .db ops0|am_nam   ; $3A  DEC A
  4890 00:9029: 00                    .db ops0|am_nam   ; $3B  TSC
  4891 00:902A: 22                    .db ops2|am_adrx  ; $3C  BIT abs,X
  4892 00:902B: 22                    .db ops2|am_adrx  ; $3D  AND abs,X
  4893 00:902C: 22                    .db ops2|am_adrx  ; $3E  ROL abs,X
  4894 00:902D: 32                    .db ops3|am_adrx  ; $3F  AND absl,X
  4895                        ;
  4896 00:902E: 00                    .db ops0|am_nam   ; $40  RTI
  4897 00:902F: 17                    .db ops1|am_indx  ; $41  EOR (dp,X)
  4898 00:9030: 00                    .db ops0|am_nam   ; $42  WDM
  4899 00:9031: 19                    .db ops1|am_stk   ; $43  EOR <offset>,S
  4900 00:9032: 2B                    .db ops2|am_move  ; $44  MVP sb,db
  4901 00:9033: 10                    .db ops1|am_nam   ; $45  EOR dp
  4902 00:9034: 10                    .db ops1|am_nam   ; $46  LSR dp
  4903 00:9035: 15                    .db ops1|am_indl  ; $47  EOR [dp]
  4904 00:9036: 00                    .db ops0|am_nam   ; $48  PHA
  4905 00:9037: 91                    .db vops|am_imm   ; $49  EOR #
  4906 00:9038: 00                    .db ops0|am_nam   ; $4A  LSR A
  4907 00:9039: 00                    .db ops0|am_nam   ; $4B  PHK
  4908 00:903A: 20                    .db ops2|am_nam   ; $4C  JMP abs
  4909 00:903B: 20                    .db ops2|am_nam   ; $4D  EOR abs
  4910 00:903C: 20                    .db ops2|am_nam   ; $4E  LSR abs
  4911 00:903D: 30                    .db ops3|am_nam   ; $4F  EOR absl
  4912                        ;
  Sat Jan 22 2022 12:11                                                                                                Page 90


  4913 00:903E: 50                    .db bop1|am_nam   ; $50  BVC abs
  4914 00:903F: 18                    .db ops1|am_indy  ; $51  EOR (<dp>),Y
  4915 00:9040: 14                    .db ops1|am_ind   ; $52  EOR (dp)
  4916 00:9041: 1A                    .db ops1|am_stky  ; $53  EOR (<offset>,S),Y
  4917 00:9042: 2B                    .db ops2|am_move  ; $54  MVN sb,db
  4918 00:9043: 12                    .db ops1|am_adrx  ; $55  EOR dp,X
  4919 00:9044: 12                    .db ops1|am_adrx  ; $56  LSR dp,X
  4920 00:9045: 16                    .db ops1|am_indly ; $57  EOR [dp],Y
  4921 00:9046: 00                    .db ops0|am_nam   ; $58  CLI
  4922 00:9047: 23                    .db ops2|am_adry  ; $59  EOR abs,Y
  4923 00:9048: 00                    .db ops0|am_nam   ; $5A  PHY
  4924 00:9049: 00                    .db ops0|am_nam   ; $5B  TCD
  4925 00:904A: 30                    .db ops3|am_nam   ; $5C  JML absl
  4926 00:904B: 22                    .db ops2|am_adrx  ; $5D  EOR abs,X
  4927 00:904C: 22                    .db ops2|am_adrx  ; $5E  LSR abs,X
  4928 00:904D: 32                    .db ops3|am_adrx  ; $5F  EOR absl,X
  4929                        ;
  4930 00:904E: 00                    .db ops0|am_nam   ; $60  RTS
  4931 00:904F: 17                    .db ops1|am_indx  ; $61  ADC (dp,X)
  4932 00:9050: 60                    .db bop2|am_nam   ; $62  PER
  4933 00:9051: 19                    .db ops1|am_stk   ; $63  ADC <offset>,S
  4934 00:9052: 10                    .db ops1|am_nam   ; $64  STZ dp
  4935 00:9053: 10                    .db ops1|am_nam   ; $65  ADC dp
  4936 00:9054: 10                    .db ops1|am_nam   ; $66  ROR dp
  4937 00:9055: 15                    .db ops1|am_indl  ; $67  ADC [dp]
  4938 00:9056: 00                    .db ops0|am_nam   ; $68  PLA
  4939 00:9057: 91                    .db vops|am_imm   ; $69  ADC #
  4940 00:9058: 00                    .db ops0|am_nam   ; $6A  ROR A
  4941 00:9059: 00                    .db ops0|am_nam   ; $6B  RTL
  4942 00:905A: 24                    .db ops2|am_ind   ; $6C  JMP (abs)
  4943 00:905B: 20                    .db ops2|am_nam   ; $6D  ADC abs
  4944 00:905C: 20                    .db ops2|am_nam   ; $6E  ROR abs
  4945 00:905D: 30                    .db ops3|am_nam   ; $6F  ADC absl
  4946                        ;
  4947 00:905E: 50                    .db bop1|am_nam   ; $70  BVS abs
  4948 00:905F: 18                    .db ops1|am_indy  ; $71  ADC (<dp>),Y
  4949 00:9060: 14                    .db ops1|am_ind   ; $72  ADC (dp)
  4950 00:9061: 1A                    .db ops1|am_stky  ; $73  ADC (<offset>,S),Y
  4951 00:9062: 12                    .db ops1|am_adrx  ; $74  STZ dp,X
  4952 00:9063: 12                    .db ops1|am_adrx  ; $75  ADC dp,X
  4953 00:9064: 12                    .db ops1|am_adrx  ; $76  ROR dp,X
  4954 00:9065: 16                    .db ops1|am_indly ; $77  ADC [dp],Y
  4955 00:9066: 00                    .db ops0|am_nam   ; $78  SEI
  4956 00:9067: 23                    .db ops2|am_adry  ; $79  ADC abs,Y
  4957 00:9068: 00                    .db ops0|am_nam   ; $7A  PLY
  4958 00:9069: 00                    .db ops0|am_nam   ; $7B  TDC
  4959 00:906A: 27                    .db ops2|am_indx  ; $7C  JMP (abs,X)
  4960 00:906B: 22                    .db ops2|am_adrx  ; $7D  ADC abs,X
  4961 00:906C: 22                    .db ops2|am_adrx  ; $7E  ROR abs,X
  4962 00:906D: 32                    .db ops3|am_adrx  ; $7F  ADC absl,X
  4963                        ;
  4964 00:906E: 50                    .db bop1|am_nam   ; $80  BRA abs
  4965 00:906F: 17                    .db ops1|am_indx  ; $81  STA (dp,X)
  4966 00:9070: 60                    .db bop2|am_nam   ; $82  BRL abs
  4967 00:9071: 19                    .db ops1|am_stk   ; $83  STA <offset>,S
  4968 00:9072: 10                    .db ops1|am_nam   ; $84  STY dp
  4969 00:9073: 10                    .db ops1|am_nam   ; $85  STA dp
  Sat Jan 22 2022 12:11                                                                                                Page 91


  4970 00:9074: 10                    .db ops1|am_nam   ; $86  STX dp
  4971 00:9075: 15                    .db ops1|am_indl  ; $87  STA [dp]
  4972 00:9076: 00                    .db ops0|am_nam   ; $88  DEY
  4973 00:9077: 91                    .db vops|am_imm   ; $89  BIT #
  4974 00:9078: 00                    .db ops0|am_nam   ; $8A  TXA
  4975 00:9079: 00                    .db ops0|am_nam   ; $8B  PHB
  4976 00:907A: 20                    .db ops2|am_nam   ; $8C  STY abs
  4977 00:907B: 20                    .db ops2|am_nam   ; $8D  STA abs
  4978 00:907C: 20                    .db ops2|am_nam   ; $8E  STX abs
  4979 00:907D: 30                    .db ops3|am_nam   ; $8F  STA absl
  4980                        ;
  4981 00:907E: 50                    .db bop1|am_nam   ; $90  BCC abs
  4982 00:907F: 18                    .db ops1|am_indy  ; $91  STA (<dp>),Y
  4983 00:9080: 14                    .db ops1|am_ind   ; $92  STA (dp)
  4984 00:9081: 1A                    .db ops1|am_stky  ; $93  STA (<offset>,S),Y
  4985 00:9082: 12                    .db ops1|am_adrx  ; $94  STY dp,X
  4986 00:9083: 12                    .db ops1|am_adrx  ; $95  STA dp,X
  4987 00:9084: 13                    .db ops1|am_adry  ; $96  STX dp,Y
  4988 00:9085: 16                    .db ops1|am_indly ; $97  STA [dp],Y
  4989 00:9086: 00                    .db ops0|am_nam   ; $98  TYA
  4990 00:9087: 23                    .db ops2|am_adry  ; $99  STA abs,Y
  4991 00:9088: 00                    .db ops0|am_nam   ; $9A  TXS
  4992 00:9089: 00                    .db ops0|am_nam   ; $9B  TXY
  4993 00:908A: 20                    .db ops2|am_nam   ; $9C  STZ abs
  4994 00:908B: 22                    .db ops2|am_adrx  ; $9D  STA abs,X
  4995 00:908C: 22                    .db ops2|am_adrx  ; $9E  STZ abs,X
  4996 00:908D: 32                    .db ops3|am_adrx  ; $9F  STA absl,X
  4997                        ;
  4998 00:908E: 91                    .db vops|am_imm   ; $A0  LDY #
  4999 00:908F: 17                    .db ops1|am_indx  ; $A1  LDA (dp,X)
  5000 00:9090: 91                    .db vops|am_imm   ; $A2  LDX #
  5001 00:9091: 19                    .db ops1|am_stk   ; $A3  LDA <offset>,S
  5002 00:9092: 10                    .db ops1|am_nam   ; $A4  LDY dp
  5003 00:9093: 10                    .db ops1|am_nam   ; $A5  LDA dp
  5004 00:9094: 10                    .db ops1|am_nam   ; $A6  LDX dp
  5005 00:9095: 15                    .db ops1|am_indl  ; $A7  LDA [dp]
  5006 00:9096: 00                    .db ops0|am_nam   ; $A8  TAY
  5007 00:9097: 91                    .db vops|am_imm   ; $A9  LDA #
  5008 00:9098: 00                    .db ops0|am_nam   ; $AA  TAX
  5009 00:9099: 00                    .db ops0|am_nam   ; $AB  PLB
  5010 00:909A: 20                    .db ops2|am_nam   ; $AC  LDY abs
  5011 00:909B: 20                    .db ops2|am_nam   ; $AD  LDA abs
  5012 00:909C: 20                    .db ops2|am_nam   ; $AE  LDX abs
  5013 00:909D: 30                    .db ops3|am_nam   ; $AF  LDA absl
  5014                        ;
  5015 00:909E: 50                    .db bop1|am_nam   ; $B0  BCS abs
  5016 00:909F: 18                    .db ops1|am_indy  ; $B1  LDA (<dp>),Y
  5017 00:90A0: 14                    .db ops1|am_ind   ; $B2  LDA (dp)
  5018 00:90A1: 1A                    .db ops1|am_stky  ; $B3  LDA (<offset>,S),Y
  5019 00:90A2: 12                    .db ops1|am_adrx  ; $B4  LDY dp,X
  5020 00:90A3: 12                    .db ops1|am_adrx  ; $B5  LDA dp,X
  5021 00:90A4: 13                    .db ops1|am_adry  ; $B6  LDX dp,Y
  5022 00:90A5: 16                    .db ops1|am_indly ; $B7  LDA [dp],Y
  5023 00:90A6: 00                    .db ops0|am_nam   ; $B8  CLV
  5024 00:90A7: 23                    .db ops2|am_adry  ; $B9  LDA abs,Y
  5025 00:90A8: 00                    .db ops0|am_nam   ; $BA  TSX
  5026 00:90A9: 00                    .db ops0|am_nam   ; $BB  TYX
  Sat Jan 22 2022 12:11                                                                                                Page 92


  5027 00:90AA: 22                    .db ops2|am_adrx  ; $BC  LDY abs,X
  5028 00:90AB: 22                    .db ops2|am_adrx  ; $BD  LDA abs,X
  5029 00:90AC: 23                    .db ops2|am_adry  ; $BE  LDX abs,Y
  5030 00:90AD: 32                    .db ops3|am_adrx  ; $BF  LDA absl,X
  5031                        ;
  5032 00:90AE: 91                    .db vops|am_imm   ; $C0  CPY #
  5033 00:90AF: 17                    .db ops1|am_indx  ; $C1  CMP (dp,X)
  5034 00:90B0: 11                    .db ops1|am_imm   ; $C2  REP #
  5035 00:90B1: 19                    .db ops1|am_stk   ; $C3  CMP <offset>,S
  5036 00:90B2: 10                    .db ops1|am_nam   ; $C4  CPY dp
  5037 00:90B3: 10                    .db ops1|am_nam   ; $C5  CMP dp
  5038 00:90B4: 10                    .db ops1|am_nam   ; $C6  DEC dp
  5039 00:90B5: 15                    .db ops1|am_indl  ; $C7  CMP [dp]
  5040 00:90B6: 00                    .db ops0|am_nam   ; $C8  INY
  5041 00:90B7: 91                    .db vops|am_imm   ; $C9  CMP #
  5042 00:90B8: 00                    .db ops0|am_nam   ; $CA  DEX
  5043 00:90B9: 00                    .db ops0|am_nam   ; $CB  WAI
  5044 00:90BA: 20                    .db ops2|am_nam   ; $CC  CPY abs
  5045 00:90BB: 20                    .db ops2|am_nam   ; $CD  CMP abs
  5046 00:90BC: 20                    .db ops2|am_nam   ; $CE  DEC abs
  5047 00:90BD: 30                    .db ops3|am_nam   ; $CF  CMP absl
  5048                        ;
  5049 00:90BE: 50                    .db bop1|am_nam   ; $D0  BNE abs
  5050 00:90BF: 18                    .db ops1|am_indy  ; $D1  CMP (<dp>),Y
  5051 00:90C0: 14                    .db ops1|am_ind   ; $D2  CMP (dp)
  5052 00:90C1: 1A                    .db ops1|am_stky  ; $D3  CMP (<offset>,S),Y
  5053 00:90C2: 10                    .db ops1|am_nam   ; $D4  PEI dp
  5054 00:90C3: 12                    .db ops1|am_adrx  ; $D5  CMP dp,X
  5055 00:90C4: 12                    .db ops1|am_adrx  ; $D6  DEC dp,X
  5056 00:90C5: 16                    .db ops1|am_indly ; $D7  CMP [dp],Y
  5057 00:90C6: 00                    .db ops0|am_nam   ; $D8  CLD
  5058 00:90C7: 23                    .db ops2|am_adry  ; $D9  CMP abs,Y
  5059 00:90C8: 00                    .db ops0|am_nam   ; $DA  PHX
  5060 00:90C9: 00                    .db ops0|am_nam   ; $DB  STP
  5061 00:90CA: 25                    .db ops2|am_indl  ; $DC  JMP [abs]
  5062 00:90CB: 22                    .db ops2|am_adrx  ; $DD  CMP abs,X
  5063 00:90CC: 22                    .db ops2|am_adrx  ; $DE  DEC abs,X
  5064 00:90CD: 32                    .db ops3|am_adrx  ; $DF  CMP absl,X
  5065                        ;
  5066 00:90CE: 91                    .db vops|am_imm   ; $E0  CPX #
  5067 00:90CF: 17                    .db ops1|am_indx  ; $E1  SBC (dp,X)
  5068 00:90D0: 11                    .db ops1|am_imm   ; $E2  SEP #
  5069 00:90D1: 19                    .db ops1|am_stk   ; $E3  SBC <offset>,S
  5070 00:90D2: 10                    .db ops1|am_nam   ; $E4  CPX dp
  5071 00:90D3: 10                    .db ops1|am_nam   ; $E5  SBC dp
  5072 00:90D4: 10                    .db ops1|am_nam   ; $E6  INC dp
  5073 00:90D5: 15                    .db ops1|am_indl  ; $E7  SBC [dp]
  5074 00:90D6: 00                    .db ops0|am_nam   ; $E8  INX
  5075 00:90D7: 91                    .db vops|am_imm   ; $E9  SBC #
  5076 00:90D8: 00                    .db ops0|am_nam   ; $EA  NOP
  5077 00:90D9: 00                    .db ops0|am_nam   ; $EB  XBA
  5078 00:90DA: 20                    .db ops2|am_nam   ; $EC  CPX abs
  5079 00:90DB: 20                    .db ops2|am_nam   ; $ED  SBC abs
  5080 00:90DC: 20                    .db ops2|am_nam   ; $EE  INC abs
  5081 00:90DD: 30                    .db ops3|am_nam   ; $EF  SBC absl
  5082                        ;
  5083 00:90DE: 50                    .db bop1|am_nam   ; $F0  BEQ abs
  Sat Jan 22 2022 12:11                                                                                                Page 93


  5084 00:90DF: 18                    .db ops1|am_indy  ; $F1  SBC (<dp>),Y
  5085 00:90E0: 14                    .db ops1|am_ind   ; $F2  SBC (dp)
  5086 00:90E1: 1A                    .db ops1|am_stky  ; $F3  SBC (<offset>,S),Y
  5087 00:90E2: 21                    .db ops2|am_imm   ; $F4  PEA #
  5088 00:90E3: 12                    .db ops1|am_adrx  ; $F5  SBC dp,X
  5089 00:90E4: 12                    .db ops1|am_adrx  ; $F6  INC dp,X
  5090 00:90E5: 16                    .db ops1|am_indly ; $F7  SBC [dp],Y
  5091 00:90E6: 00                    .db ops0|am_nam   ; $F8  SED
  5092 00:90E7: 23                    .db ops2|am_adry  ; $F9  SBC abs,Y
  5093 00:90E8: 00                    .db ops0|am_nam   ; $FA  PLX
  5094 00:90E9: 00                    .db ops0|am_nam   ; $FB  XCE
  5095 00:90EA: 27                    .db ops2|am_indx  ; $FC  JSR (abs,X)
  5096 00:90EB: 22                    .db ops2|am_adrx  ; $FD  SBC abs,X
  5097 00:90EC: 22                    .db ops2|am_adrx  ; $FE  INC abs,X
  5098 00:90ED: 32                    .db ops3|am_adrx  ; $FF  SBC absl,X
  5099                        ;
  5100                        ;
  5101                        ;	.X & .Y immediate mode opcodes...
  5102                        ;
  5103 00:90EE: E0           vopidx   .db opc_cpxi        ;CPX #
  5104 00:90EF: C0                    .db opc_cpyi        ;CPY #
  5105 00:90F0: A2                    .db opc_ldxi        ;LDX #
  5106 00:90F1: A0                    .db opc_ldyi        ;LDY #
  5107             00000004   n_vopidx .equ *-vopidx             ;number of opcodes
  5108                        ;
  5109                        ;
  5110                        ;	addressing mode symbology lookup...
  5111                        ;
  5112 00:90F2: 0A 91        ms_lutab .dw ms_nam          ;no symbol
  5113 00:90F4: 14 91                 .dw ms_imm          ;#
  5114 00:90F6: 0C 91                 .dw ms_addrx        ;<addr>,X
  5115 00:90F8: 10 91                 .dw ms_addry        ;<addr>,Y
  5116 00:90FA: 16 91                 .dw ms_ind          ;(<addr>)
  5117 00:90FC: 19 91                 .dw ms_indl         ;[<dp>]
  5118 00:90FE: 1C 91                 .dw ms_indly        ;[<dp>],Y
  5119 00:9100: 21 91                 .dw ms_indx         ;(<addr>,X)
  5120 00:9102: 26 91                 .dw ms_indy         ;(<dp>),Y
  5121 00:9104: 2E 91                 .dw ms_stk          ;<offset>,S
  5122 00:9106: 32 91                 .dw ms_stky         ;(<offset>,S),Y
  5123 00:9108: 0A 91                 .dw ms_nam          ;<sbnk>,<dbnk>
  5124                        ;
  5125                        ;
  5126                        ;	addressing mode symbology strings...
  5127                        ;
  5128 00:910A: 20 00        ms_nam   .db " ",0           ;no symbol
  5129 00:910C: 20 2C 58 00  ms_addrx .db " ,X",0         ;<addr>,X
  5130 00:9110: 20 2C 59 00  ms_addry .db " ,Y",0         ;<addr>,Y
  5131 00:9114: 23 00        ms_imm   .db "#",0           ;#
  5132 00:9116: 28 29 00     ms_ind   .db "()",0          ;(<addr>)
  5133 00:9119: 5B 5D 00     ms_indl  .db "[]",0          ;[<dp>]
  5134 00:911C: 5B 5D 2C 59  ms_indly .db "[],Y",0        ;[<dp>],Y
       00:9120: 00 
  5135 00:9121: 28 2C 58 29  ms_indx  .db "(,X)",0        ;(<addr>,X)
       00:9125: 00 
  5136 00:9126: 28 29 2C 59  ms_indy  .db "(),Y",0        ;(<dp>),Y
       00:912A: 00 
  5137 00:912B: 2C 24 00     ms_move  .db ",$",0          ;<sbnk>,<dbnk>
  Sat Jan 22 2022 12:11                                                                                                Page 94


  5138 00:912E: 20 2C 53 00  ms_stk   .db " ,S",0         ;<offset>,S
  5139 00:9132: 28 2C 53 29  ms_stky  .db "(,S),Y",0      ;(<offset>,S),Y
       00:9136: 2C 59 00 
  5140                        ;
  5141                        ;================================================================================
  5142                        ;
  5143                        ;CONSOLE DISPLAY CONTROL STRINGS
  5144                        ;
  5145                        dc_lf    lf                    ;newline
+ 5145                                 cr
+ 5145 00:9139: 0D                    .db a_cr
+ 5145 00:913A: 0A                    .db a_lf
  5146 00:913B: 00                    .db 0
  5147                        ;
  5148                        dc_bs                          ;destructive backspace
  5149 00:913C: 08                    .db a_bs
  5150 00:913D: 20                    .db $20
  5151 00:913E: 08                    .db a_bs
  5152 00:913F: 00                    .db 0
  5153                        ;
  5154                        dc_cl_DUMB                      ;clear to end of line
  5155 00:9140: 0D 0A        	 .db $0d,$0a
  5156 00:9142: 00                    .db 0
  5157                        dc_cl_ANSI           		;clear to end of line
  5158 00:9143: 1B 5B 4B     	 .db a_esc,"[K"
  5159 00:9146: 00                    .db 0
  5160                        dc_cl_WYSE           		;clear to end of line
  5161 00:9147: 1B 54        	 .db a_esc,"T"
  5162 00:9149: 00                    .db 0
  5163                        
  5164                        ;
  5165                        ;
  5166                        
  5167                        ;
  5168                        ;================================================================================
  5169                        ;
  5170                        ;TEXT STRINGS
  5171                        ;
  5172                        mm_brk   rb
+ 5172 00:914A: 07                    .db a_bel
  5173                                 lf
+ 5173                                 cr
+ 5173 00:914B: 0D                    .db a_cr
+ 5173 00:914C: 0A                    .db a_lf
  5174 00:914D: 2A 42 52 4B           .db "*BRK"
  5175                                 lf
+ 5175                                 cr
+ 5175 00:9151: 0D                    .db a_cr
+ 5175 00:9152: 0A                    .db a_lf
  5176 00:9153: 00                    .db 0
  5177                        ;
  5178                        mm_entry lf
+ 5178                                 cr
+ 5178 00:9154: 0D                    .db a_cr
+ 5178 00:9155: 0A                    .db a_lf
  5179 00:9156: 53 75 70 65           .db "Supermon 816 "
       00:915A: 72 6D 6F 6E 
  Sat Jan 22 2022 12:11                                                                                                Page 95


       00:915E: 20 38 31 36 
       00:9162: 20 
  5180                                 softvers
+ 5180 00:9163: 31                    .db '1'             ;major
+ 5180 00:9164: 2E                    .db '.'
+ 5180 00:9165: 30                    .db '0'             ;minor
+ 5180 00:9166: 2E                    .db '.'
+ 5180 00:9167: 32                    .db '2'             ;revision
  5181 00:9168: 20                    .db " "
  5182                                 lf
+ 5182                                 cr
+ 5182 00:9169: 0D                    .db a_cr
+ 5182 00:916A: 0A                    .db a_lf
  5183 00:916B: 00                    .db 0
  5184                        ;
  5185 00:916C: 20 2A 45 52  mm_err   .db " *ERR ",0
       00:9170: 52 20 00 
  5186                        ;
  5187                        mm_prmpt lf
+ 5187                                 cr
+ 5187 00:9173: 0D                    .db a_cr
+ 5187 00:9174: 0A                    .db a_lf
  5188 00:9175: 2E 00                 .db ".",0
  5189                        ;
  5190                        mm_regs  lf
+ 5190                                 cr
+ 5190 00:9177: 0D                    .db a_cr
+ 5190 00:9178: 0A                    .db a_lf
  5191 00:9179: 50 42 20 20           .db "PB  PC   NVmxDIZC  .C   .X   .Y   SP"
       00:917D: 50 43 20 20 
       00:9181: 20 4E 56 6D 
       00:9185: 78 44 49 5A 
       00:9189: 43 20 20 2E 
       00:918D: 43 20 20 20 
       00:9191: 2E 58 20 20 
       00:9195: 20 2E 59 20 
       00:9199: 20 20 53 50 
  5192                                 lf
+ 5192                                 cr
+ 5192 00:919D: 0D                    .db a_cr
+ 5192 00:919E: 0A                    .db a_lf
  5193 00:919F: 00                    .db 0
  5194                        mm_regs1 lf
+ 5194                                 cr
+ 5194 00:91A0: 0D                    .db a_cr
+ 5194 00:91A1: 0A                    .db a_lf
  5195 00:91A2: 20 44 50 20           .db " DP  DB"
       00:91A6: 20 44 42 
  5196                                 lf
+ 5196                                 cr
+ 5196 00:91A9: 0D                    .db a_cr
+ 5196 00:91AA: 0A                    .db a_lf
  5197 00:91AB: 00                    .db 0
  5198                        
  5199                        ;
  5200                        mm_rts   rb
+ 5200 00:91AC: 07                    .db a_bel
  Sat Jan 22 2022 12:11                                                                                                Page 96


  5201                                 lf
+ 5201                                 cr
+ 5201 00:91AD: 0D                    .db a_cr
+ 5201 00:91AE: 0A                    .db a_lf
  5202 00:91AF: 2A 52 54 53           .db "*RTS"
  5203                                 lf
+ 5203                                 cr
+ 5203 00:91B3: 0D                    .db a_cr
+ 5203 00:91B4: 0A                    .db a_lf
  5204 00:91B5: 00                    .db 0
  5205                        
  5206                        
  5207                        mm_S19_prmpt	lf
+ 5207                                 cr
+ 5207 00:91B6: 0D                    .db a_cr
+ 5207 00:91B7: 0A                    .db a_lf
  5208 00:91B8: 42 65 67 69           .db "Begin sending S28 encoded file. . ."
       00:91BC: 6E 20 73 65 
       00:91C0: 6E 64 69 6E 
       00:91C4: 67 20 53 32 
       00:91C8: 38 20 65 6E 
       00:91CC: 63 6F 64 65 
       00:91D0: 64 20 66 69 
       00:91D4: 6C 65 2E 20 
       00:91D8: 2E 20 2E 
  5209                                 lf
+ 5209                                 cr
+ 5209 00:91DB: 0D                    .db a_cr
+ 5209 00:91DC: 0A                    .db a_lf
  5210 00:91DD: 00                    .db 0
  5211                        
  5212                        ;
  5213                        ALIVEM:
  5214 00:91DE: 0D 0A                .db   $0D,$0A
  5215 00:91E0: 0D 0A                .db   $0D,$0A
  5216 00:91E2: 20 20 20 5F  		.db   "   __ _____  ___  __   __",$0D,$0A
       00:91E6: 5F 20 5F 5F 
       00:91EA: 5F 5F 5F 20 
       00:91EE: 20 5F 5F 5F 
       00:91F2: 20 20 5F 5F 
       00:91F6: 20 20 20 5F 
       00:91FA: 5F 0D 0A 
  5217 00:91FD: 20 20 2F 20  		.db   "  / /| ____|/ _ \/_ | / /",$0D,$0A
       00:9201: 2F 7C 20 5F 
       00:9205: 5F 5F 5F 7C 
       00:9209: 2F 20 5F 20 
       00:920D: 5C 2F 5F 20 
       00:9211: 7C 20 2F 20 
       00:9215: 2F 0D 0A 
  5218 00:9218: 20 2F 20 2F  		.db   " / /_| |__ | (_) || |/ /_",$0D,$0A
       00:921C: 5F 7C 20 7C 
       00:9220: 5F 5F 20 7C 
       00:9224: 20 28 5F 29 
       00:9228: 20 7C 7C 20 
       00:922C: 7C 2F 20 2F 
       00:9230: 5F 0D 0A 
  5219 00:9233: 7C 20 20 5F  		.db   "|  _ \___ \ > _ < | |  _ \",$0D,$0A
  Sat Jan 22 2022 12:11                                                                                                Page 97


       00:9237: 20 5C 5F 5F 
       00:923B: 5F 20 5C 20 
       00:923F: 3E 20 5F 20 
       00:9243: 3C 20 7C 20 
       00:9247: 7C 20 20 5F 
       00:924B: 20 5C 0D 0A 
  5220 00:924F: 7C 20 28 5F  		.db   "| (_) |__) | (_) || | (_) |",$0D,$0A
       00:9253: 29 20 7C 5F 
       00:9257: 5F 29 20 7C 
       00:925B: 20 28 5F 29 
       00:925F: 20 7C 7C 20 
       00:9263: 7C 20 28 5F 
       00:9267: 29 20 7C 0D 
       00:926B: 0A 
  5221 00:926C: 20 5C 5F 5F  		.db   " \___/____/ \___/ |_|\___/ ",$0D,$0A
       00:9270: 5F 2F 5F 5F 
       00:9274: 5F 5F 2F 20 
       00:9278: 5C 5F 5F 5F 
       00:927C: 2F 20 7C 5F 
       00:9280: 7C 5C 5F 5F 
       00:9284: 5F 2F 20 0D 
       00:9288: 0A 
  5222 00:9289: 0D 0A                .db   $0D,$0A
  5223 00:928B: 36 35 63 38  		.db   "65c816 BIOS (NATIVE MODE)",$0D,$0A
       00:928F: 31 36 20 42 
       00:9293: 49 4F 53 20 
       00:9297: 28 4E 41 54 
       00:929B: 49 56 45 20 
       00:929F: 4D 4F 44 45 
       00:92A3: 29 0D 0A 
  5224 00:92A6: 76 30 2E 35  		.db   "v0.55 4/9/2021 - D.WERNER",$0D,$0A
       00:92AA: 35 20 34 2F 
       00:92AE: 39 2F 32 30 
       00:92B2: 32 31 20 2D 
       00:92B6: 20 44 2E 57 
       00:92BA: 45 52 4E 45 
       00:92BE: 52 0D 0A 
  5225 00:92C1: 2D 2D 2D 2D  		.db   "-------------------------------------",$0D,$0A
       00:92C5: 2D 2D 2D 2D 
       00:92C9: 2D 2D 2D 2D 
       00:92CD: 2D 2D 2D 2D 
       00:92D1: 2D 2D 2D 2D 
       00:92D5: 2D 2D 2D 2D 
       00:92D9: 2D 2D 2D 2D 
       00:92DD: 2D 2D 2D 2D 
       00:92E1: 2D 2D 2D 2D 
       00:92E5: 2D 0D 0A 
  5226 00:92E8: 0D 0A 00     		.db   $0D,$0A,0
  5227                        ;
  5228                        
  5229                        
  5230             000092EB   _txtend_ .equ *                     ;end of program text
  5231                        ;
  5232                        ;================================================================================
  5233                        	.end


  Sat Jan 22 2022 12:11                                                                                                Page 98


      Lines assembled: 5437
      Errors: 0
